<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023面试题前端优化遇上chatGPT</title>
      <link href="/post/230703.html"/>
      <url>/post/230703.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端高频面试题-2023版"><a href="#前端高频面试题-2023版" class="headerlink" title="前端高频面试题 - 2023版"></a>前端高频面试题 - 2023版</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="1、什么是-Ajax，Ajax-都有哪些优点和缺点"><a href="#1、什么是-Ajax，Ajax-都有哪些优点和缺点" class="headerlink" title="1、什么是 Ajax，Ajax 都有哪些优点和缺点?"></a>1、什么是 Ajax，Ajax 都有哪些优点和缺点?</h3><p>Ajax是一种异步的JavaScript和XML技术，可以在不刷新整个页面的情况下向服务器发送请求并接收响应。它的优点包括可以提高用户体验，减少页面刷新次数，节省带宽和服务器资源，支持异步数据交互等。缺点包括可能会增加代码复杂度，对SEO不友好，可能会导致安全问题等。</p><h3 id="2、请介绍一下-XMLHTTPrequest-对象及常用方法和属性"><a href="#2、请介绍一下-XMLHTTPrequest-对象及常用方法和属性" class="headerlink" title="2、请介绍一下 XMLHTTPrequest 对象及常用方法和属性"></a>2、请介绍一下 XMLHTTPrequest 对象及常用方法和属性</h3><p>XMLHttpRequest对象是AJAX的核心，它可以在不刷新页面的情况下向服务器发送请求和接收响应。常用的方法有open()、send()、abort()，常用的属性有readyState、status、responseText、responseXML等。其中，readyState表示请求的状态，status表示响应的状态码，responseText和responseXML分别表示响应的文本和XML数据。</p><h3 id="3、Ajax的实现流程是怎样的"><a href="#3、Ajax的实现流程是怎样的" class="headerlink" title="3、Ajax的实现流程是怎样的?"></a>3、Ajax的实现流程是怎样的?</h3><p>Ajax的实现流程如下：</p><ol><li>创建XMLHttpRequest对象</li><li>使用open()方法设置请求方式、请求地址和是否异步</li><li>使用send()方法发送请求</li><li>服务器响应请求并返回数据</li><li>使用onreadystatechange事件监听XMLHttpRequest对象状态的变化</li><li>当XMLHttpRequest对象状态为4且状态码为200时，表示请求成功，可以获取服务器返回的数据</li><li>使用responseText或responseXML属性获取服务器返回的数据</li><li>对获取的数据进行处理和展示</li></ol><p>以上是Ajax的基本实现流程，具体实现还需要根据具体的需求进行调整和优化。</p><h3 id="4、Ajax-接收到的数据类型有哪些数据如何处理"><a href="#4、Ajax-接收到的数据类型有哪些数据如何处理" class="headerlink" title="4、Ajax 接收到的数据类型有哪些数据如何处理?"></a>4、Ajax 接收到的数据类型有哪些数据如何处理?</h3><p>Ajax 接收到的数据类型可以是文本、XML、JSON 等格式的数据。可以通过 XMLHttpRequest 对象的 responseType 属性来指定接收的数据类型。接收到的数据可以通过 XMLHttpRequest 对象的 responseText、responseXML、responseJSON 等属性来获取，然后根据具体的数据类型进行相应的处理。例如，对于 JSON 格式的数据，可以使用 JSON.parse() 方法将其转换为 JavaScript 对象，然后进行相应的操作。</p><h3 id="5、封装好的-Ajax-里的常见参数及其代表的含义"><a href="#5、封装好的-Ajax-里的常见参数及其代表的含义" class="headerlink" title="5、封装好的 Ajax 里的常见参数及其代表的含义"></a>5、封装好的 Ajax 里的常见参数及其代表的含义</h3><p>封装好的 Ajax 里的常见参数及其代表的含义包括：</p><ul><li>method：请求方法，可以是 GET 或 POST 等；</li><li>url：请求的地址；</li><li>data：发送的数据，可以是字符串、对象或 FormData 等；</li><li>headers：请求头，可以设置 Content-Type 等信息；</li><li>responseType：响应的数据类型，可以是 text、json、blob 等；</li><li>timeout：请求超时时间；</li><li>withCredentials：是否允许跨域请求发送凭据，如 cookie 等；</li><li>beforeSend：发送请求前的回调函数；</li><li>success：请求成功时的回调函数；</li><li>error：请求失败时的回调函数；</li><li>complete：请求完成时的回调函数。</li></ul><h3 id="6、Ajax-注意事项及适用和不适用场景"><a href="#6、Ajax-注意事项及适用和不适用场景" class="headerlink" title="6、Ajax 注意事项及适用和不适用场景"></a>6、Ajax 注意事项及适用和不适用场景</h3><p>Ajax 注意事项：</p><ol><li>跨域问题：需要注意跨域请求的问题，可以使用 JSONP 或 CORS 解决。</li><li>安全问题：需要注意防止 XSS 和 CSRF 攻击。</li><li>异步请求：需要注意异步请求的顺序和并发数量，避免出现数据混乱或请求阻塞的情况。</li><li>兼容性问题：需要注意不同浏览器对 Ajax 的支持程度和实现方式的差异。</li></ol><p>适用场景：</p><ol><li>实现无刷新更新部分页面内容。</li><li>实现异步上传和下载文件。</li><li>实现与后端进行数据交互，实现动态数据展示和交互操作。</li><li>实现自动补全、搜索提示等功能。</li></ol><p>不适用场景：</p><ol><li>对 SEO 有较高要求的页面。</li><li>需要频繁刷新页面的场景。</li><li>对页面性能要求较高的场景，如大量数据的渲染和处理。</li></ol><h3 id="7、常见的-HTTP-状态码以及代表的意义"><a href="#7、常见的-HTTP-状态码以及代表的意义" class="headerlink" title="7、常见的 HTTP 状态码以及代表的意义"></a>7、常见的 HTTP 状态码以及代表的意义</h3><p>常见的 HTTP 状态码包括：</p><ul><li>200 OK：请求成功，服务器正常返回请求的数据。</li><li>201 Created：请求成功并且服务器创建了新的资源。</li><li>204 No Content：请求成功，但服务器没有返回任何数据。</li><li>301 Moved Permanently：请求的资源已经被永久移动到新的位置。</li><li>302 Found：请求的资源临时被移动到新的位置。</li><li>304 Not Modified：客户端发送了一个条件请求，服务器告诉客户端资源未被修改，可以使用缓存的版本。</li><li>400 Bad Request：请求错误，服务器无法理解请求的格式。</li><li>401 Unauthorized：请求未经授权，需要身份验证。</li><li>403 Forbidden：服务器拒绝请求，没有权限访问。</li><li>404 Not Found：请求的资源不存在。</li><li>500 Internal Server Error：服务器内部错误，无法完成请求。</li><li>503 Service Unavailable：服务器暂时无法处理请求，可能是过载或维护。</li></ul><p>这些状态码代表了不同的意义，开发者需要根据具体情况进行处理和调试。</p><h3 id="8、301-302-303-状态码的区别"><a href="#8、301-302-303-状态码的区别" class="headerlink" title="8、301 302 303 状态码的区别?"></a>8、301 302 303 状态码的区别?</h3><p>301、302、303 状态码都是 HTTP 重定向状态码，它们的区别如下：</p><ol><li><p>301 Moved Permanently：永久重定向，表示请求的资源已经被分配了新的 URL，以后应使用新的 URL。搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p></li><li><p>302 Found：临时重定向，表示请求的资源临时被分配了新的 URL，客户端应继续使用原有的 URL。搜索引擎会抓取新的内容而保留旧的网址，不会替换。</p></li><li><p>303 See Other：表示请求的资源存在着另一个 URL，应使用 GET 方法获取资源。这个方法比较少用。</p></li></ol><p>总的来说，301 表示永久重定向，搜索引擎会抓取新的内容并替换旧的网址；302 表示临时重定向，搜索引擎会保留旧的网址不替换；303 也是临时重定向，但是要求客户端必须使用 GET 方法获取资源。</p><h3 id="9、什么是同源策略"><a href="#9、什么是同源策略" class="headerlink" title="9、什么是同源策略"></a>9、什么是同源策略</h3><p>同源策略是浏览器的一种安全策略，它要求网页只能与同一来源的资源进行交互，包括协议、域名、端口号必须完全一致，否则就会被浏览器拦截。这种策略可以有效防止恶意网站窃取用户的信息，保护用户的隐私安全。</p><h3 id="10、为什么会有跨域的问题出现，如何解决跨域问题"><a href="#10、为什么会有跨域的问题出现，如何解决跨域问题" class="headerlink" title="10、为什么会有跨域的问题出现，如何解决跨域问题"></a>10、为什么会有跨域的问题出现，如何解决跨域问题</h3><p>跨域问题是由于浏览器的同源策略所导致的。同源策略是浏览器的一种安全策略，它要求网页只能从同一个域名下加载资源，不能跨域加载资源。</p><p>解决跨域问题的方法有多种，常见的包括：</p><ol><li><p>JSONP：通过动态创建 script 标签，利用 script 标签没有跨域限制的特性，从而实现跨域请求数据。</p></li><li><p>CORS：服务端设置 Access-Control-Allow-Origin 头部信息，允许指定的域名访问资源。</p></li><li><p>代理：通过在同域名下设置代理服务器，将跨域请求转发到目标服务器，从而绕过跨域限制。</p></li><li><p>postMessage：通过 window.postMessage 方法实现跨窗口通信，从而实现跨域数据传输。</p></li><li><p>WebSocket：通过 WebSocket 协议实现跨域通信，WebSocket 协议不受同源策略限制。</p></li></ol><h3 id="11、Get-和-Post-的区别以及使用场景"><a href="#11、Get-和-Post-的区别以及使用场景" class="headerlink" title="11、Get 和 Post 的区别以及使用场景"></a>11、Get 和 Post 的区别以及使用场景</h3><p>Get 和 Post 是 HTTP 协议中常用的两种请求方法，它们的主要区别在于：</p><ol><li>参数传递方式不同：Get 请求的参数是通过 URL 传递的，而 Post 请求的参数是通过请求体传递的。</li><li>安全性不同：Get 请求的参数会被浏览器缓存，也会被保存在浏览器的历史记录中，因此不适合传递敏感信息；而 Post 请求的参数不会被缓存或保存在历史记录中，相对更安全。</li><li>传输数据量不同：Get 请求的传输数据量有限制，一般不能超过 2KB；而 Post 请求的传输数据量没有限制。</li><li>使用场景不同：Get 请求适合用于请求数据，比如查询、搜索等操作；而 Post 请求适合用于提交数据，比如注册、登录等操作。</li></ol><p>在实际开发中，需要根据具体的业务需求和数据传输方式来选择使用 Get 还是 Post 请求。</p><h3 id="12、解释-jsonp-的原理"><a href="#12、解释-jsonp-的原理" class="headerlink" title="12、解释 jsonp 的原理"></a>12、解释 jsonp 的原理</h3><p>jsonp（JSON with Padding）是一种跨域数据请求方式，它的原理是利用 script 标签的 src 属性不受同源策略限制的特性，将需要获取的数据包装在一个函数中，通过 script 标签引入，服务器接收到请求后返回一个函数调用，并将数据作为参数传入该函数中，从而实现跨域数据请求。由于 jsonp 只支持 GET 请求，且只能获取数据，不能实现像 POST 请求那样的数据提交，因此在使用时需要注意安全性问题。</p><h3 id="13、HTTP-与-HTTPS-的区别"><a href="#13、HTTP-与-HTTPS-的区别" class="headerlink" title="13、HTTP 与 HTTPS 的区别"></a>13、HTTP 与 HTTPS 的区别</h3><p>HTTP和HTTPS的区别主要有以下几点：</p><ol><li><p>安全性：HTTPS协议需要到CA申请证书，所以比HTTP协议安全。HTTPS协议的安全基础是SSL/TLS，SSL/TLS协议的主要功能是提供身份验证和数据加密传输，可以有效防止数据被篡改和窃取。</p></li><li><p>端口不同：HTTP协议使用的是80端口，而HTTPS协议使用的是443端口。</p></li><li><p>传输方式不同：HTTP协议是明文传输，HTTPS协议是加密传输。</p></li><li><p>速度：HTTPS协议比HTTP协议慢，因为HTTPS协议需要进行加密和解密操作，会增加服务器的负担。</p></li><li><p>缓存方式不同：HTTPS协议的内容不会被缓存，而HTTP协议的内容可以被缓存。</p></li></ol><p>综上所述，HTTPS协议比HTTP协议更加安全，但是会增加服务器的负担，适用于对安全性要求较高的场景，如网上银行、电子商务等。而HTTP协议适用于对安全性要求不高的场景，如新闻、博客等。</p><h3 id="14、简述-web-前端-Cookie-机制，并结合该机制说明会话保持原理"><a href="#14、简述-web-前端-Cookie-机制，并结合该机制说明会话保持原理" class="headerlink" title="14、简述 web 前端 Cookie 机制，并结合该机制说明会话保持原理"></a>14、简述 web 前端 Cookie 机制，并结合该机制说明会话保持原理</h3><p>Web前端Cookie机制是指在客户端存储一些数据，以便在同一域名下的不同页面之间进行传递和共享。Cookie是由服务器发送到客户端的一小段文本，客户端将其存储在浏览器中，每次请求同一域名下的页面时都会将其发送给服务器。</p><p>会话保持是指在用户与服务器之间进行交互时，服务器能够识别出同一用户的不同请求，并将其视为同一会话。在Web前端中，会话保持通常是通过Cookie机制实现的。当用户第一次访问网站时，服务器会在响应头中设置一个Set-Cookie字段，其中包含一个唯一的标识符。浏览器将该标识符存储在Cookie中，并在后续的每个请求中将其发送给服务器。服务器通过该标识符识别出同一用户的不同请求，并将其视为同一会话。</p><h3 id="15、你知道的-HTTP-请求方式有几种"><a href="#15、你知道的-HTTP-请求方式有几种" class="headerlink" title="15、你知道的 HTTP 请求方式有几种"></a>15、你知道的 HTTP 请求方式有几种</h3><p>常见的 HTTP 请求方式有以下几种：</p><ol><li>GET：用于请求指定的资源，请求参数会附在 URL 后面，可以被缓存，不应该用于传输敏感信息。</li><li>POST：用于向指定资源提交数据，请求参数会包含在请求体中，不会被缓存，可以用于传输敏感信息。</li><li>PUT：用于向指定资源更新数据，请求参数会包含在请求体中，请求的资源不存在则会创建，存在则会更新。</li><li>DELETE：用于删除指定的资源。</li><li>HEAD：与 GET 类似，但只返回响应头部，不返回响应体。</li><li>OPTIONS：用于获取目标资源支持的通信选项。</li><li>TRACE：用于追踪请求-响应的传输路径，主要用于诊断。</li><li>CONNECT：用于建立与目标资源的网络连接，主要用于 HTTPS。</li></ol><p>以上是常见的 HTTP 请求方式，不同的请求方式适用于不同的场景。</p><h3 id="16、谈谈你理解的-RESTFUL-规范"><a href="#16、谈谈你理解的-RESTFUL-规范" class="headerlink" title="16、谈谈你理解的 RESTFUL 规范"></a>16、谈谈你理解的 RESTFUL 规范</h3><p>RESTFUL 规范是一种基于 HTTP 协议的网络应用程序的设计风格和开发方式。它要求每个 URL 代表一种资源，客户端和服务器之间的交互传递这些资源的某种表现层。RESTFUL 规范的核心思想是将所有的 Web 功能抽象成资源，通过 HTTP 协议对资源进行 CRUD 操作，使得系统具有良好的可伸缩性、可移植性和可读性。同时，RESTFUL 规范还要求使用标准的 HTTP 方法（GET、POST、PUT、DELETE 等）来操作资源，以及使用标准的 HTTP 状态码来表示操作结果。</p><h3 id="17、解释一下三次握手是什么，具体流程。变为二次握手会发生什么问题"><a href="#17、解释一下三次握手是什么，具体流程。变为二次握手会发生什么问题" class="headerlink" title="17、解释一下三次握手是什么，具体流程。变为二次握手会发生什么问题?"></a>17、解释一下三次握手是什么，具体流程。变为二次握手会发生什么问题?</h3><p>三次握手是TCP协议中建立连接的过程，具体流程如下：</p><ol><li>客户端向服务器发送SYN报文，表示请求建立连接，并指定一个初始序列号seq。</li><li>服务器收到SYN报文后，回复一个SYN+ACK报文，表示同意建立连接，确认序列号ack=seq+1，同时指定自己的初始序列号seq。</li><li>客户端收到SYN+ACK报文后，回复一个ACK报文，表示连接建立成功，确认序列号ack=seq+1，同时指定自己的初始序列号seq。</li></ol><p>如果变为二次握手，会存在以下问题：</p><ol><li>客户端发送SYN报文后，服务器收到后回复SYN+ACK报文，但是这个报文可能会丢失。</li><li>客户端没有收到SYN+ACK报文，但是它并不知道，因此会一直等待，直到超时。</li><li>服务器也没有收到客户端的ACK报文，但是它并不知道，因此会一直等待，直到超时。</li><li>如果客户端重新发送SYN报文，会导致服务器认为客户端发起了一个新的连接，从而会出现连接混乱的情况。</li></ol><p>因此，TCP协议中采用三次握手的方式来建立连接，可以保证连接的可靠性和正确性。</p><h3 id="18、TCP-和-UDP-分别是什么"><a href="#18、TCP-和-UDP-分别是什么" class="headerlink" title="18、TCP 和 UDP 分别是什么?"></a>18、TCP 和 UDP 分别是什么?</h3><p>TCP 和 UDP 是两种不同的传输层协议。</p><p>TCP（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层协议。它通过三次握手建立连接，保证数据的可靠传输，适用于要求可靠传输的应用场景，如文件传输、电子邮件等。</p><p>UDP（User Datagram Protocol）是一种无连接的、不可靠的、基于数据报的传输层协议。它不需要建立连接，数据发送后不会确认是否到达目的地，适用于实时性要求高、数据传输量较小的应用场景，如视频、音频等。</p><h3 id="19、WebSocket-的实现和应用。"><a href="#19、WebSocket-的实现和应用。" class="headerlink" title="19、WebSocket 的实现和应用。"></a>19、WebSocket 的实现和应用。</h3><p>WebSocket 是一种基于 TCP 协议的全双工通信协议，它可以在浏览器和服务器之间建立持久连接，实现实时通信。WebSocket 的实现需要客户端和服务器端都支持，客户端可以使用浏览器内置的 WebSocket 对象，服务器端可以使用相应的库或框架进行实现。WebSocket 的应用场景包括在线聊天、实时数据传输等需要实时通信的场景。相比于传统的 HTTP 请求，WebSocket 可以减少网络传输的开销，提高通信效率。</p><h3 id="20、一个图片-url-访问后直接下载怎样实现"><a href="#20、一个图片-url-访问后直接下载怎样实现" class="headerlink" title="20、一个图片 url 访问后直接下载怎样实现?"></a>20、一个图片 url 访问后直接下载怎样实现?</h3><p>可以通过设置 HTTP 响应头 Content-Disposition 来实现。具体步骤如下：</p><ol><li>在服务器端设置响应头 Content-Disposition，其中 filename 指定下载后的文件名。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Disposition</span>: attachment; filename=<span class="string">&quot;filename.jpg&quot;</span></span><br></pre></td></tr></table></figure><pre><code>2.在前端通过 a 标签的 href 属性指定图片 url，同时设置 download 属性。 </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://example.com/image.jpg&quot;</span> download&gt;下载图片&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这样，当用户点击下载图片链接时，浏览器会自动下载图片并保存为指定的文件名。 </p><h3 id="21、说一下-http2-0"><a href="#21、说一下-http2-0" class="headerlink" title="21、说一下 http2.0"></a>21、说一下 http2.0</h3><p>HTTP/2.0 是 HTTP 协议的一个新版本，它的目标是提高页面加载速度和性能。HTTP/2.0 采用二进制格式传输数据，而不是 HTTP/1.x 的文本格式，同时还支持多路复用，即可以在同一个连接上同时传输多个请求和响应，避免了 HTTP/1.x 中的队头阻塞问题。HTTP/2.0 还支持头部压缩、服务器推送等新特性，可以更好地优化网络传输，提高页面加载速度和性能。</p><h3 id="22、补充-400-和-401、403-状态码"><a href="#22、补充-400-和-401、403-状态码" class="headerlink" title="22、补充 400 和 401、403 状态码"></a>22、补充 400 和 401、403 状态码</h3><p>400 Bad Request：请求出现语法错误，服务器无法理解。</p><p>401 Unauthorized：请求要求用户身份验证，用户未登录或登录失败。</p><p>403 Forbidden：服务器拒绝请求，没有权限访问该资源。</p><h3 id="23、fetch发送2次请求的原因"><a href="#23、fetch发送2次请求的原因" class="headerlink" title="23、fetch发送2次请求的原因"></a>23、fetch发送2次请求的原因</h3><p>fetch 发送两次请求的原因可能是因为第一次请求是预检请求，也就是 CORS 中的 OPTIONS 请求，用于检查实际请求是否可以被服务器接受。如果服务器允许该请求，则浏览器会再次发送实际请求。</p><h3 id="24、对-HTML-语义化标签的理解"><a href="#24、对-HTML-语义化标签的理解" class="headerlink" title="24、对 HTML 语义化标签的理解"></a>24、对 HTML 语义化标签的理解</h3><p>HTML 语义化标签是指在 HTML 中使用具有语义的标签来描述页面的结构和内容，而不是仅仅使用无语义的 div 和 span 标签。语义化标签可以让页面结构更加清晰，便于开发者阅读和维护，同时也有利于搜索引擎对页面内容的理解和收录。常见的语义化标签包括 header、nav、section、article、aside、footer 等。</p><h3 id="25、Cookie-和-session-的区别"><a href="#25、Cookie-和-session-的区别" class="headerlink" title="25、Cookie 和 session 的区别"></a>25、Cookie 和 session 的区别</h3><p>Cookie 和 session 都是用于在客户端和服务端之间传递信息的机制，但是它们有以下区别：</p><ol><li><p>存储位置不同：Cookie 存储在客户端浏览器中，而 session 存储在服务端。</p></li><li><p>存储内容不同：Cookie 存储的内容是明文的，可以被客户端修改和篡改，而 session 存储的内容是加密的，客户端无法直接修改。</p></li><li><p>存储大小不同：Cookie 存储的大小有限制，一般为 4KB 左右，而 session 存储的大小没有限制。</p></li><li><p>有效期不同：Cookie 可以设置过期时间，可以长期保存在客户端，而 session 的有效期只在用户打开浏览器访问网站时才会生成，关闭浏览器就会失效。</p></li><li><p>作用范围不同：Cookie 的作用范围是在同一个域名下的所有页面，而 session 的作用范围是在同一个用户的所有页面。</p></li></ol><h3 id="26、强缓存-和-协商缓存-区别-什么时候用哪个-本质是"><a href="#26、强缓存-和-协商缓存-区别-什么时候用哪个-本质是" class="headerlink" title="26、强缓存 和 协商缓存 区别? 什么时候用哪个 ? 本质是?"></a>26、强缓存 和 协商缓存 区别? 什么时候用哪个 ? 本质是?</h3><p>强缓存和协商缓存都是浏览器缓存机制的两种方式。强缓存是利用http响应头中的Expires和Cache-Control字段来控制，本质是利用http响应头中的字段告诉浏览器是否需要向服务器请求资源。协商缓存是利用http请求头中的If-Modified-Since和If-None-Match字段和http响应头中的Last-Modified和ETag字段来控制，本质是利用http请求头和响应头中的字段告诉浏览器是否需要使用缓存资源。</p><p>当浏览器第一次请求资源时，服务器返回响应头中包含了Expires或Cache-Control字段的响应，浏览器会将该响应缓存起来。当再次请求该资源时，浏览器会根据响应头中的Expires或Cache-Control字段判断是否使用缓存。如果缓存未过期，则使用缓存，否则向服务器请求资源。</p><p>当浏览器再次请求资源时，服务器返回响应头中包含了Last-Modified或ETag字段的响应，浏览器会将该响应缓存起来。当再次请求该资源时，浏览器会根据请求头中的If-Modified-Since或If-None-Match字段和响应头中的Last-Modified或ETag字段判断是否使用缓存。如果缓存未过期，则使用缓存，否则向服务器请求资源。</p><p>一般情况下，强缓存优先级高于协商缓存。但是在某些情况下，如强缓存设置时间过长或者服务器时间和浏览器时间不同步等情况下，协商缓存更为适用。</p><h3 id="27、cache-control的值有哪些"><a href="#27、cache-control的值有哪些" class="headerlink" title="27、cache-control的值有哪些"></a>27、cache-control的值有哪些</h3><p>cache-control 的值包括：</p><ul><li>public：响应可以被任何中间缓存缓存。</li><li>private：响应只能被单个用户缓存，不能被中间缓存缓存。</li><li>no-cache：缓存前必须先向服务器验证缓存是否过期。</li><li>no-store：所有内容都不会被缓存到缓存或 Internet 临时文件中。</li><li>max-age：指定缓存的最大有效时间，单位为秒。</li><li>s-maxage：覆盖 max-age 或 Expires 头，但仅适用于共享缓存（比如各个代理），而非私有缓存（比如浏览器缓存）。</li><li>must-revalidate：如果缓存过期，必须向服务器验证。</li><li>proxy-revalidate：与 must-revalidate 类似，但仅适用于共享缓存。</li></ul><p>根据具体的需求，可以选择不同的 cache-control 值来控制缓存的行为。</p><h3 id="28、谈谈-304-状态码"><a href="#28、谈谈-304-状态码" class="headerlink" title="28、谈谈 304 状态码"></a>28、谈谈 304 状态码</h3><p>304 状态码表示客户端发送了一个带有条件的请求，服务器检查了条件，发现条件为真，于是返回 304 状态码和响应头，告诉客户端可以使用缓存的版本。这样可以减少不必要的网络传输，提高网站性能。通常与协商缓存一起使用。</p><h3 id="29、什么是-CDN，以及如何优化"><a href="#29、什么是-CDN，以及如何优化" class="headerlink" title="29、什么是 CDN，以及如何优化?"></a>29、什么是 CDN，以及如何优化?</h3><p>CDN（Content Delivery Network）即内容分发网络，是一种通过在不同地理位置部署节点服务器来缓存和分发内容的技术，以提高用户访问网站的速度和性能。</p><p>CDN优化的方法包括：</p><p>1.选择合适的CDN提供商：根据自己的业务需求选择合适的CDN提供商，比如阿里云、腾讯云、百度云等。</p><p>2.合理设置缓存策略：根据不同的资源类型设置不同的缓存时间，减少请求次数。</p><p>3.使用CDN域名：使用CDN提供商提供的域名，可以减少DNS解析时间。</p><p>4.压缩文件：对于静态资源文件，如JS、CSS、图片等，可以进行压缩，减少文件大小，提高传输速度。</p><p>5.使用HTTPS加密协议：使用HTTPS加密协议可以提高网站的安全性，同时也可以提高网站的访问速度。</p><p>6.使用预加载技术：对于一些常用的资源，可以使用预加载技术，在用户访问之前就将资源加载到缓存中，提高用户访问速度。</p><h3 id="30、DNS是什么"><a href="#30、DNS是什么" class="headerlink" title="30、DNS是什么"></a>30、DNS是什么</h3><p>DNS（Domain Name System）是一种将域名解析为 IP 地址的分布式数据库系统。它将域名映射到 IP 地址，使得用户可以通过易于记忆的域名来访问网站，而不必记住复杂的 IP 地址。DNS 通过域名解析来实现这一功能，将域名解析为对应的 IP 地址，从而使得用户可以访问到正确的服务器。DNS 优化可以通过减少 DNS 查询时间、减少 DNS 解析时间、使用 CDN 等方式来实现。</p><h3 id="31、什么是四层、七层网络模型"><a href="#31、什么是四层、七层网络模型" class="headerlink" title="31、什么是四层、七层网络模型?"></a>31、什么是四层、七层网络模型?</h3><p>四层网络模型是指传输控制协议/因特网协议（TCP/IP）模型中的四个层次，分别是应用层、传输层、网络层和数据链路层。它主要关注数据传输的流程和控制，是网络通信的基础。</p><p>七层网络模型是指国际标准化组织（ISO）制定的网络通信模型，也称为OSI模型。它将网络通信分为七个层次，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。它强调了不同层次之间的独立性和互相协作的关系，是网络通信的理论基础。</p><p>在实际应用中，四层网络模型更为常见，而七层网络模型则更为理论化。</p><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="1、什么是-xss-攻击及如何防范"><a href="#1、什么是-xss-攻击及如何防范" class="headerlink" title="1、什么是 xss 攻击及如何防范"></a>1、什么是 xss 攻击及如何防范</h3><p>XSS（跨站脚本攻击）是一种常见的网络安全漏洞，攻击者通过在网页中注入恶意脚本，从而获取用户的敏感信息或者控制用户的浏览器。</p><p>防范 XSS 攻击的方法包括：</p><ol><li><p>对用户输入的数据进行过滤和验证，避免恶意脚本的注入。</p></li><li><p>对输出到页面的数据进行编码，避免恶意脚本的执行。</p></li><li><p>使用 HTTP-only Cookie，避免 Cookie 被盗取。</p></li><li><p>设置 Content-Security-Policy（CSP），限制页面中可以执行的脚本来源。</p></li><li><p>对于需要用户输入的敏感信息，使用 HTTPS 协议传输，避免信息被窃取。</p></li><li><p>及时更新和修补网站的漏洞，避免攻击者利用已知漏洞进行攻击。</p></li></ol><h3 id="2、什么是-ddox-攻击及如何防范"><a href="#2、什么是-ddox-攻击及如何防范" class="headerlink" title="2、什么是 ddox 攻击及如何防范?"></a>2、什么是 ddox 攻击及如何防范?</h3><p>DDoS攻击是指分布式拒绝服务攻击，攻击者通过控制大量的计算机或者网络设备，向目标服务器发送大量的请求，导致服务器无法正常响应合法请求，从而使得服务不可用。为了防范DDoS攻击，可以采取以下措施：</p><ol><li><p>增加带宽和硬件设备：增加带宽和硬件设备可以增强服务器的抗压能力，从而减轻DDoS攻击的影响。</p></li><li><p>使用CDN：CDN可以将网站的内容缓存到全球各地的服务器上，从而分散DDoS攻击的压力。</p></li><li><p>配置防火墙：防火墙可以过滤掉DDoS攻击的流量，从而保护服务器的正常运行。</p></li><li><p>使用反向代理：反向代理可以将请求转发到多台服务器上，从而分散DDoS攻击的压力。</p></li><li><p>使用云安全服务：云安全服务可以提供实时的DDoS攻击监测和防御，从而保护网站的安全。</p></li></ol><h3 id="3、什么是-csrf-攻击及如何防范"><a href="#3、什么是-csrf-攻击及如何防范" class="headerlink" title="3、什么是 csrf 攻击及如何防范?"></a>3、什么是 csrf 攻击及如何防范?</h3><p>CSRF（Cross-site request forgery）攻击是一种利用用户已登录的身份，在用户不知情的情况下，以用户的名义完成非法操作的攻击方式。攻击者可以通过构造特定的链接或表单，诱导用户点击，从而在用户不知情的情况下完成一些非法操作，如转账、修改密码等。</p><p>防范CSRF攻击的方法主要有以下几种：</p><ol><li><p>验证码：在关键操作前，要求用户输入验证码，以确保用户是真实的操作者。</p></li><li><p>Token验证：在用户登录时，服务器生成一个随机的Token，并将其存储在用户的Session中，然后在用户发起操作时，将Token一并提交到服务器进行验证，以确保请求是合法的。</p></li><li><p>Referer验证：在服务器端验证HTTP请求头中的Referer字段，确保请求是从当前网站发起的。</p></li><li><p>SameSite属性：设置Cookie的SameSite属性为Strict或Lax，以限制Cookie只能在同一站点内使用，从而防止跨站点攻击。</p></li><li><p>防止XSS攻击：由于CSRF攻击通常需要构造特定的链接或表单，因此防止XSS攻击也可以有效地防范CSRF攻击。</p></li></ol><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h3 id="1、如何理解前端模块化、前端组件化，二者有何区别"><a href="#1、如何理解前端模块化、前端组件化，二者有何区别" class="headerlink" title="1、如何理解前端模块化、前端组件化，二者有何区别?"></a>1、如何理解前端模块化、前端组件化，二者有何区别?</h3><p>前端模块化是将一个大的程序分解成互相依赖的小模块，每个模块只关注自己的功能实现，提高代码的可维护性和可复用性。常见的前端模块化方案有 CommonJS、AMD、ES6 Module 等。</p><p>前端组件化是将一个页面分解成多个独立的组件，每个组件都有自己的样式、行为和数据，可以被复用和组合。组件化可以提高代码的可维护性和可复用性，同时也可以提高开发效率和用户体验。常见的前端组件化方案有 React、Vue、Angular 等。</p><p>二者的区别在于，前端模块化是针对代码的分解和组织，而前端组件化是针对页面的分解和组织。前端模块化更关注代码的可维护性和可复用性，而前端组件化更关注页面的可维护性和可复用性。</p><h3 id="2、如何理解前后端分离"><a href="#2、如何理解前后端分离" class="headerlink" title="2、如何理解前后端分离?"></a>2、如何理解前后端分离?</h3><p>前后端分离是指将前端和后端的开发分离开来，前端和后端通过接口进行通信。前端负责展示数据和交互逻辑，后端负责处理业务逻辑和数据存储。前后端分离可以提高开发效率、降低耦合度、提高系统的可维护性和可扩展性。同时，前后端分离也可以让前端和后端的开发团队专注于各自的领域，提高开发效率和质量。</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="1、有自己配置过-webpack-吗-如果需求是多页面与单页面并行，需要如何配置"><a href="#1、有自己配置过-webpack-吗-如果需求是多页面与单页面并行，需要如何配置" class="headerlink" title="1、有自己配置过 webpack 吗? 如果需求是多页面与单页面并行，需要如何配置?"></a>1、有自己配置过 webpack 吗? 如果需求是多页面与单页面并行，需要如何配置?</h3><p>是的，我有配置过 webpack。如果需求是多页面与单页面并行，可以通过配置多个 entry 和 output 来实现。对于单页面应用，可以将入口设置为一个主文件，然后使用 webpack-dev-server 来启动本地服务器。对于多页面应用，可以为每个页面创建一个入口，然后将它们分别打包成不同的文件。同时，可以使用 HtmlWebpackPlugin 来自动生成 HTML 文件，并将打包后的文件自动插入到 HTML 中。这样可以实现多页面与单页面并行的需求。</p><h3 id="2、Webpack-的优点是什么"><a href="#2、Webpack-的优点是什么" class="headerlink" title="2、Webpack 的优点是什么?"></a>2、Webpack 的优点是什么?</h3><p>Webpack 的优点包括：</p><ol><li><p>模块化：Webpack 支持模块化开发，可以将代码拆分成多个模块，提高代码的可维护性和可复用性。</p></li><li><p>自动化构建：Webpack 可以自动化地构建项目，包括代码转换、压缩、打包等操作，提高开发效率。</p></li><li><p>插件系统：Webpack 有丰富的插件系统，可以通过插件来扩展其功能，满足不同项目的需求。</p></li><li><p>优化性能：Webpack 可以对代码进行优化，如代码分割、懒加载等，提高页面加载速度和性能。</p></li><li><p>社区支持：Webpack 有庞大的社区支持，可以快速解决问题，获取最新的技术资讯。</p></li></ol><h3 id="3、Webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全"><a href="#3、Webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全" class="headerlink" title="3、Webpack 的构建流程是什么?从读取配置到输出文件这个过程尽量说全"></a>3、Webpack 的构建流程是什么?从读取配置到输出文件这个过程尽量说全</h3><p>Webpack的构建流程大致分为以下几个步骤：</p><ol><li><p>读取配置文件：Webpack会读取项目中的配置文件，通常是webpack.config.js文件。</p></li><li><p>解析入口文件：Webpack会根据配置文件中的entry入口，递归解析出所有依赖的模块。</p></li><li><p>加载模块：Webpack会根据模块的类型，选择合适的loader对模块进行加载和转换。</p></li><li><p>生成代码块：Webpack会根据模块之间的依赖关系，将模块分组成一个个代码块。</p></li><li><p>解析代码块间的依赖关系：Webpack会分析代码块之间的依赖关系，生成依赖关系树。</p></li><li><p>生成输出文件：Webpack会根据配置文件中的output选项，将代码块转换成文件输出到指定的目录中。</p></li></ol><p>在这个过程中，Webpack还会执行各种插件的功能，例如压缩代码、提取公共代码等。最终生成的输出文件可以直接在浏览器中运行。</p><h3 id="4、说一下-Webpack-的热更新原理"><a href="#4、说一下-Webpack-的热更新原理" class="headerlink" title="4、说一下 Webpack 的热更新原理"></a>4、说一下 Webpack 的热更新原理</h3><p>Webpack 的热更新原理是通过在运行时将新模块代码替换旧模块代码，而不是重新加载整个页面。具体实现是通过在客户端和服务器之间建立 WebSocket 连接，当本地文件发生变化时，Webpack 会将变化的部分打包成一个补丁文件，通过 WebSocket 传输到客户端，客户端再通过补丁文件更新页面。这样就实现了快速更新页面而不需要重新加载整个页面的效果。</p><h3 id="5、有哪些常见的-Loader-他们是解决什么问题的"><a href="#5、有哪些常见的-Loader-他们是解决什么问题的" class="headerlink" title="5、有哪些常见的 Loader? 他们是解决什么问题的?"></a>5、有哪些常见的 Loader? 他们是解决什么问题的?</h3><p>常见的 Loader 有：</p><ol><li>babel-loader：将 ES6/ES7/JSX 等代码转换为浏览器可识别的 ES5 代码，解决浏览器兼容性问题。</li><li>css-loader：处理 CSS 文件中的 <code>@import</code> 和 <code>url()</code>，并将 CSS 转换为 CommonJS 模块，以便在 JavaScript 中引入。</li><li>style-loader：将 CSS 代码注入到 HTML 的 <code>&lt;style&gt;</code> 标签中，使其生效。</li><li>file-loader/url-loader：处理图片、字体等静态资源，将其转换为模块，以便在 JavaScript 中引入。</li></ol><p>这些 Loader 解决了前端开发中常见的问题，如浏览器兼容性、CSS 模块化、静态资源引入等。</p><h3 id="6、Loader-和-Plugin-的不同"><a href="#6、Loader-和-Plugin-的不同" class="headerlink" title="6、Loader 和 Plugin 的不同?"></a>6、Loader 和 Plugin 的不同?</h3><p>Loader 和 Plugin 是 Webpack 中两个不同的概念。</p><p>Loader 用于对模块的源代码进行转换，将其转换为 Webpack 能够处理的有效模块。常见的 Loader 有 babel-loader、css-loader、file-loader 等，它们可以解决模块中不同类型文件的加载和转换问题。</p><p>Plugin 则是用于扩展 Webpack 功能的插件，可以在 Webpack 构建过程中的不同阶段执行自定义的任务。常见的 Plugin 有 HtmlWebpackPlugin、CleanWebpackPlugin、CopyWebpackPlugin 等，它们可以解决构建过程中的各种问题，如生成 HTML 文件、清理构建目录、复制静态文件等。</p><h3 id="7、-如何利用-Webpack-来优化前端性能"><a href="#7、-如何利用-Webpack-来优化前端性能" class="headerlink" title="7、 如何利用 Webpack 来优化前端性能"></a>7、 如何利用 Webpack 来优化前端性能</h3><p>可以通过以下几种方式来利用 Webpack 来优化前端性能：</p><ol><li><p>代码压缩：使用 UglifyJSPlugin 或 TerserPlugin 来压缩 JavaScript 代码，使用 OptimizeCSSAssetsPlugin 来压缩 CSS 代码，从而减小文件体积，提高加载速度。</p></li><li><p>代码分离：使用 SplitChunksPlugin 来将公共代码分离出来，避免重复加载，从而减小文件体积，提高加载速度。</p></li><li><p>按需加载：使用动态 import 或者 React.lazy() 来实现按需加载，避免一次性加载过多代码，从而提高页面加载速度。</p></li><li><p>图片压缩：使用 image-webpack-loader 来压缩图片，减小文件体积，提高加载速度。</p></li><li><p>缓存优化：使用 hash 或 chunkhash 来给文件名添加哈希值，实现缓存优化，避免重复加载，提高加载速度。</p></li><li><p>Tree Shaking：使用 Webpack 自带的 Tree Shaking 功能来剔除未使用的代码，减小文件体积，提高加载速度。</p></li></ol><h3 id="8、是否写过-Loader-和-Plugin-描述一下编写-loader-或-plugin-的思路"><a href="#8、是否写过-Loader-和-Plugin-描述一下编写-loader-或-plugin-的思路" class="headerlink" title="8、是否写过 Loader 和 Plugin? 描述一下编写 loader 或 plugin 的思路?"></a>8、是否写过 Loader 和 Plugin? 描述一下编写 loader 或 plugin 的思路?</h3><p>Loader 和 Plugin 都是 Webpack 中非常重要的概念，它们可以帮助我们实现很多自动化的工作，提高开发效率。如果需要编写 Loader 或 Plugin，可以按照以下思路进行：</p><p>编写 Loader：</p><ol><li>确定需要处理的文件类型和处理方式；</li><li>编写处理函数，对文件进行处理；</li><li>将处理后的结果返回给 Webpack。</li></ol><p>编写 Plugin：</p><ol><li>确定需要监听的 Webpack 事件；</li><li>编写事件处理函数，实现相应的功能；</li><li>将插件注册到 Webpack 中。</li></ol><p>在编写 Loader 或 Plugin 的过程中，需要注意以下几点：</p><ol><li>Loader 和 Plugin 的编写都需要遵循一定的规范，可以参考官方文档；</li><li>在编写 Loader 或 Plugin 之前，需要对 Webpack 的工作原理有一定的了解；</li><li>在编写 Loader 或 Plugin 时，需要考虑兼容性和性能问题。</li></ol><h3 id="9、使用-Webpack-开发时，你用过哪些可以提高效率的插件"><a href="#9、使用-Webpack-开发时，你用过哪些可以提高效率的插件" class="headerlink" title="9、使用 Webpack 开发时，你用过哪些可以提高效率的插件?"></a>9、使用 Webpack 开发时，你用过哪些可以提高效率的插件?</h3><p>常用的提高 Webpack 效率的插件有：</p><ol><li><p>HtmlWebpackPlugin：自动生成 HTML 文件，并将打包后的 JS、CSS 文件自动引入 HTML 中。</p></li><li><p>CleanWebpackPlugin：在每次构建前清理打包目录，避免旧文件对新文件的影响。</p></li><li><p>MiniCssExtractPlugin：将 CSS 文件从 JS 中分离出来，提高页面加载速度。</p></li><li><p>HotModuleReplacementPlugin：热更新插件，实现页面无刷新更新。</p></li><li><p>DefinePlugin：定义全局变量，方便在代码中使用。</p></li><li><p>CopyWebpackPlugin：将静态资源复制到打包目录中。</p></li><li><p>BundleAnalyzerPlugin：分析打包后的文件大小，找出优化方案。</p></li><li><p>UglifyJsPlugin：压缩 JS 文件，减小文件体积。</p></li><li><p>OptimizeCSSAssetsPlugin：压缩 CSS 文件，减小文件体积。</p></li></ol><p>使用这些插件可以提高 Webpack 的构建效率，减少开发时间。</p><h3 id="10、什么是长缓存-在-Webpack-中如何做到长缓存优化"><a href="#10、什么是长缓存-在-Webpack-中如何做到长缓存优化" class="headerlink" title="10、什么是长缓存?在 Webpack 中如何做到长缓存优化?"></a>10、什么是长缓存?在 Webpack 中如何做到长缓存优化?</h3><p>长缓存是指浏览器在一段时间内缓存静态资源，避免重复请求和下载，提高网站的加载速度和性能。在 Webpack 中，可以通过以下几种方式来实现长缓存优化：</p><ol><li><p>使用文件名哈希：在打包时，可以使用 [contenthash] 或 [chunkhash] 等哈希值来作为文件名的一部分，当文件内容发生变化时，哈希值也会发生变化，从而保证浏览器能够正确地缓存新的文件。</p></li><li><p>提取公共代码：将公共的代码提取到单独的文件中，避免重复打包和下载，从而减少文件的大小和数量，提高加载速度。</p></li><li><p>使用缓存插件：例如，使用 webpack-md5-hash 插件可以将哈希值添加到文件名中，使用 cache-loader 插件可以缓存 loader 的执行结果，避免重复执行。</p></li><li><p>设置缓存控制头：在服务器端设置缓存控制头，例如 Cache-Control 和 Expires，可以告诉浏览器缓存文件的有效期限，从而避免重复请求和下载。</p></li></ol><p>通过以上方式，可以有效地实现长缓存优化，提高网站的性能和用户体验。</p><h3 id="11、如何提高-Webpack-的构建速度"><a href="#11、如何提高-Webpack-的构建速度" class="headerlink" title="11、如何提高 Webpack 的构建速度?"></a>11、如何提高 Webpack 的构建速度?</h3><p>可以从以下几个方面来提高 Webpack 的构建速度：</p><ol><li><p>减少文件搜索范围：可以通过配置 resolve.modules 和 resolve.extensions 来减少 Webpack 查找模块的范围和文件后缀，从而减少搜索时间。</p></li><li><p>使用 DllPlugin 和 DllReferencePlugin：将一些不经常变化的第三方库打包成一个单独的文件，避免每次构建都重新打包，可以大大提高构建速度。</p></li><li><p>使用 HappyPack：将 Loader 的执行过程放到子进程中，从而实现多进程并行处理，提高构建速度。</p></li><li><p>使用缓存：可以使用 cache-loader 或 hard-source-webpack-plugin 等插件来缓存模块，避免重复构建。</p></li><li><p>使用 Tree Shaking：通过配置 optimization.usedExports 和 optimization.sideEffects，可以剔除无用的代码，减少打包体积和构建时间。</p></li><li><p>使用 Code Splitting：将代码拆分成多个小块，实现按需加载，从而减少首次加载时间和构建时间。</p></li><li><p>使用 Webpack 5：Webpack 5 对构建速度进行了优化，比如使用持久化缓存、增加了多进程编译等，可以进一步提高构建速度。</p></li></ol><h3 id="12、怎么实现-Webpack-的按需加载-什么是神奇注释"><a href="#12、怎么实现-Webpack-的按需加载-什么是神奇注释" class="headerlink" title="12、怎么实现 Webpack 的按需加载? 什么是神奇注释?"></a>12、怎么实现 Webpack 的按需加载? 什么是神奇注释?</h3><p>实现 Webpack 的按需加载可以使用动态 import() 语法或者使用 React.lazy() 函数。其中，动态 import() 语法可以在代码中直接使用，而 React.lazy() 函数则需要在组件中使用。</p><p>神奇注释是一种特殊的注释语法，可以用于告诉 Webpack 在打包时如何处理代码。例如，可以使用 /<em> webpackChunkName: “my-chunk-name” <em>/ 来指定按需加载的代码块的名称，或者使用 /</em> webpackPrefetch: true </em>/ 来告诉 Webpack 在空闲时间预加载代码块。这些注释可以帮助 Webpack 更好地优化代码的加载行为。</p><h3 id="13、Babel-的原理是什么"><a href="#13、Babel-的原理是什么" class="headerlink" title="13、Babel 的原理是什么?"></a>13、Babel 的原理是什么?</h3><p>Babel 的原理是将 ES6/ES7/ES8 等高级语法转换为 ES5 语法，使得现代浏览器和旧版浏览器都能够支持这些语法。Babel 的核心是一个 JavaScript 编译器，它将源代码解析成抽象语法树（AST），然后对 AST 进行转换，最后再将转换后的 AST 生成新的代码。Babel 还可以通过插件机制，实现对各种语法和功能的支持。</p><h3 id="14、如何写一个-babel-插件"><a href="#14、如何写一个-babel-插件" class="headerlink" title="14、如何写一个 babel 插件?"></a>14、如何写一个 babel 插件?</h3><p>编写一个 Babel 插件需要以下步骤：</p><ol><li>安装 Babel 和相关依赖</li><li>编写插件代码，可以使用 Babel 提供的工具函数来操作 AST</li><li>在插件代码中导出一个函数，该函数接收一个 babel 对象作为参数，返回一个对象，该对象包含 visitor 属性</li><li>在 visitor 属性中定义需要转换的节点类型和对应的转换函数</li><li>将插件作为 Babel 的配置项之一传入 Babel 编译器中</li></ol><p>需要注意的是，编写插件需要对 JavaScript 语法和 AST 有一定的了解，同时需要对 Babel 的插件开发文档有一定的掌握。</p><h3 id="15、rebase-与-merge-的区别"><a href="#15、rebase-与-merge-的区别" class="headerlink" title="15、rebase 与 merge 的区别?"></a>15、rebase 与 merge 的区别?</h3><p>rebase 和 merge 都是 Git 中用于合并分支的命令，它们的区别在于合并后的提交历史不同。</p><p>merge 命令会将两个分支的历史合并成一个新的提交，这个新的提交有两个父节点，其中一个是当前分支的最新提交，另一个是被合并的分支的最新提交。</p><p>rebase 命令则是将当前分支的提交“变基”到另一个分支上，使得当前分支的提交历史变成线性的，看起来像是在另一个分支上提交的。这样做的好处是可以保持提交历史的整洁，避免出现过多的合并提交。</p><p>总的来说，如果要合并的分支是一个长期存在的分支，比如 master 分支，那么使用 merge 命令更为合适；如果要合并的分支是一个临时性的分支，比如 feature 分支，那么使用 rebase 命令更为合适。</p><h3 id="16、git-reset、git-revert-和-git-checkout-有什么区别"><a href="#16、git-reset、git-revert-和-git-checkout-有什么区别" class="headerlink" title="16、git reset、git revert 和 git checkout 有什么区别 ?"></a>16、git reset、git revert 和 git checkout 有什么区别 ?</h3><p>git reset、git revert 和 git checkout 都是 Git 中常用的撤销操作命令，它们的区别如下：</p><ol><li><p>git reset：将 HEAD 指针和当前分支指向指定的 commit，可以用来撤销提交，但是会删除之后的提交记录，慎用。</p></li><li><p>git revert：创建一个新的 commit，用来撤销指定的 commit，不会删除之后的提交记录，安全可靠。</p></li><li><p>git checkout：用来切换分支或恢复文件，可以用来撤销本地的修改，但是不会影响提交历史。</p></li></ol><h3 id="17、webpack-和-vite-区别-模块化与流的区别"><a href="#17、webpack-和-vite-区别-模块化与流的区别" class="headerlink" title="17、webpack 和 vite 区别 (模块化与流的区别)"></a>17、webpack 和 vite 区别 (模块化与流的区别)</h3><p>Webpack 和 Vite 都是现代前端开发中常用的构建工具，它们的主要区别在于模块化和流的处理方式。</p><p>Webpack 是一个模块化打包工具，它将所有的模块打包成一个或多个 bundle，然后在浏览器中运行。Webpack 通过 loader 和 plugin 来处理各种类型的文件，比如 JavaScript、CSS、图片等。Webpack 的主要优点是可以处理复杂的项目结构和依赖关系，但是在开发过程中，每次修改代码都需要重新打包，导致开发效率较低。</p><p>Vite 是一个基于浏览器原生 ES 模块的开发服务器，它使用了浏览器原生的 ES 模块解析方式，可以实现快速的开发和热更新。Vite 通过将每个模块作为一个单独的文件来处理，而不是像 Webpack 那样将所有模块打包成一个或多个 bundle。这种方式可以避免不必要的重新构建和打包，提高了开发效率。</p><p>因此，Webpack 适用于处理复杂的项目结构和依赖关系，而 Vite 适用于快速的开发和热更新。</p><h3 id="18、webpack文件指纹策略-hash-chunkhash-contenthash"><a href="#18、webpack文件指纹策略-hash-chunkhash-contenthash" class="headerlink" title="18、webpack文件指纹策略: hash chunkhash contenthash"></a>18、webpack文件指纹策略: hash chunkhash contenthash</h3><p>webpack 文件指纹策略是为了解决缓存问题，其中 hash、chunkhash 和 contenthash 是三种常见的指纹策略。</p><ul><li>hash：每次构建时生成唯一的 hash 值，所有文件都共用同一个 hash 值，只要有文件发生变化，所有文件的 hash 值都会改变，会导致所有文件都需要重新加载，缓存失效。</li><li>chunkhash：根据不同的入口文件进行依赖文件的解析，生成对应的 hash 值，不同的入口文件生成不同的 hash 值，只有发生变化的文件的 hash 值会改变，其他文件的 hash 值不变，可以实现部分缓存。</li><li>contenthash：根据文件内容生成 hash 值，只有文件内容发生变化时，hash 值才会改变，可以实现精确缓存。</li></ul><p>使用方式：</p><ul><li>hash：在 output.filename 中使用 [hash] 占位符。</li><li>chunkhash：在 output.filename 中使用 [chunkhash] 占位符，同时在 optimization.splitChunks 中设置 chunks: ‘all’。</li><li>contenthash：在 MiniCssExtractPlugin.loader 的 options 中使用 [contenthash] 占位符。</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="1、做过哪些前端性能优化相关的事情"><a href="#1、做过哪些前端性能优化相关的事情" class="headerlink" title="1、做过哪些前端性能优化相关的事情?"></a>1、做过哪些前端性能优化相关的事情?</h3><p>作为一名高级前端开发者，我做过以下前端性能优化相关的事情：</p><ol><li><p>压缩代码：使用工具如Webpack、Gulp等压缩JavaScript、CSS和HTML代码，减小文件大小，提高加载速度。</p></li><li><p>图片优化：使用工具如TinyPNG等压缩图片大小，使用WebP格式图片，使用CSS Sprites技术，减少HTTP请求次数。</p></li><li><p>懒加载：使用工具如Intersection Observer API等实现图片懒加载，减少首屏加载时间。</p></li><li><p>代码优化：避免使用过多的全局变量，减少DOM操作，使用事件委托等技术，减少页面重绘和回流。</p></li><li><p>CDN加速：使用CDN加速静态资源加载，减少服务器压力，提高页面加载速度。</p></li><li><p>缓存优化：使用浏览器缓存和服务端缓存技术，减少HTTP请求次数，提高页面加载速度。</p></li><li><p>代码分割：使用Webpack等工具实现代码分割，按需加载，减少首屏加载时间。</p></li><li><p>服务端渲染：使用Node.js等技术实现服务端渲染，减少首屏加载时间，提高SEO。</p></li><li><p>前端监控：使用工具如Google Analytics等进行前端性能监控，及时发现和解决性能问题。</p></li></ol><h3 id="2、要加载大量图片，你有哪些方法优化方案"><a href="#2、要加载大量图片，你有哪些方法优化方案" class="headerlink" title="2、要加载大量图片，你有哪些方法优化方案?"></a>2、要加载大量图片，你有哪些方法优化方案?</h3><ol><li>图片压缩：使用图片压缩工具，将图片压缩至最小化，减少图片文件大小，提高加载速度。</li><li>图片懒加载：使用懒加载技术，只有当用户滚动到图片所在位置时才加载图片，减少页面加载时间。</li><li>CDN加速：使用CDN加速服务，将图片分布在不同的服务器上，提高图片加载速度。</li><li>WebP格式：使用WebP格式的图片，可以减少图片文件大小，提高加载速度。</li><li>雪碧图：将多张小图片合并成一张大图，减少HTTP请求，提高加载速度。</li><li>缓存：使用浏览器缓存技术，将图片缓存到本地，减少重复加载，提高加载速度。</li><li>响应式图片：使用响应式图片技术，根据不同设备的屏幕大小，加载不同大小的图片，提高用户体验。</li></ol><h3 id="3、列表无限滚动，数据越来越多，页面卡顿，如何解决"><a href="#3、列表无限滚动，数据越来越多，页面卡顿，如何解决" class="headerlink" title="3、列表无限滚动，数据越来越多，页面卡顿，如何解决?"></a>3、列表无限滚动，数据越来越多，页面卡顿，如何解决?</h3><p>使用虚拟滚动技术，只渲染当前可见区域的数据，随着滚动不断更新渲染的数据，减少页面渲染的负担，从而提高页面性能。可以使用第三方库如react-virtualized或自行实现。同时，也可以对数据进行分页加载，减少一次性加载大量数据的压力。</p><h3 id="4、for-let-i-0-i-lt-1000000-i-console-log-i-如何优化"><a href="#4、for-let-i-0-i-lt-1000000-i-console-log-i-如何优化" class="headerlink" title="4、for (let i=0;i&lt;1000000;i++) {console.log(i)} 如何优化?"></a>4、for (let i=0;i&lt;1000000;i++) {console.log(i)} 如何优化?</h3><p>可以使用分段渲染或虚拟滚动的技术，将大量数据分成多个小块进行渲染，只渲染当前可见区域的数据，从而避免一次性渲染大量数据导致的页面卡顿问题。另外，可以使用节流或防抖的方式来减少频繁的渲染操作，提高性能。</p><h3 id="5、谈谈你是如何判断网站的性能的"><a href="#5、谈谈你是如何判断网站的性能的" class="headerlink" title="5、谈谈你是如何判断网站的性能的?"></a>5、谈谈你是如何判断网站的性能的?</h3><p>我通常会从以下几个方面来判断网站的性能：</p><ol><li><p>加载速度：通过浏览器的开发者工具中的网络面板来查看网站的加载速度，包括页面、CSS、JavaScript、图片等资源的加载时间。</p></li><li><p>渲染速度：通过浏览器的开发者工具中的性能面板来查看网站的渲染速度，包括首次渲染时间、重绘和回流次数等。</p></li><li><p>用户体验：通过实际使用网站来感受用户体验，包括页面是否流畅、交互是否响应迅速等。</p></li><li><p>SEO优化：通过工具来检测网站的SEO优化情况，包括页面是否有合适的标题、描述、关键词等。</p></li><li><p>安全性：通过工具来检测网站的安全性，包括是否有安全漏洞、是否有HTTPS等。</p></li></ol><p>综合以上几个方面来判断网站的性能，可以更全面地了解网站的优化情况，从而提出相应的优化建议。</p><h3 id="6、解释一下，性能指标-FP-FCP-FMP，如何查看"><a href="#6、解释一下，性能指标-FP-FCP-FMP，如何查看" class="headerlink" title="6、解释一下，性能指标 FP FCP FMP，如何查看"></a>6、解释一下，性能指标 FP FCP FMP，如何查看</h3><p>FP（First Paint）：首次绘制时间，即浏览器首次将像素绘制到屏幕上的时间点。</p><p>FCP（First Contentful Paint）：首次内容绘制时间，即浏览器首次绘制文本、图像、非空白的canvas或SVG的时间点。</p><p>FMP（First Meaningful Paint）：首次有意义绘制时间，即页面内容有足够的可见部分呈现给用户的时间点。</p><p>我们可以通过Chrome浏览器的开发者工具来查看这些性能指标。在Performance面板中，可以通过录制页面交互过程来获取性能数据，并在Summary面板中查看FP、FCP、FMP等指标的具体数值。</p><h3 id="7、谈谈浏览器的渲染过程，DOM-树和渲染树的区别"><a href="#7、谈谈浏览器的渲染过程，DOM-树和渲染树的区别" class="headerlink" title="7、谈谈浏览器的渲染过程，DOM 树和渲染树的区别"></a>7、谈谈浏览器的渲染过程，DOM 树和渲染树的区别</h3><p>浏览器的渲染过程分为以下几步：</p><ol><li>解析HTML，构建DOM树</li><li>解析CSS，构建CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树（Render Tree）</li><li>布局渲染树，确定每个节点的位置大小等信息</li><li>绘制渲染树，将节点绘制到屏幕上</li></ol><p>DOM树和渲染树的区别在于，DOM树是由HTML文档中的所有节点构成的树形结构，而渲染树只包含需要显示在屏幕上的节点，即可见元素。渲染树中不包含像head、display:none的元素等不需要显示的节点。渲染树的生成过程中，浏览器会忽略掉不需要显示的节点，只关注需要显示的节点，这样可以提高渲染效率。</p><h3 id="8、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么"><a href="#8、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么" class="headerlink" title="8、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么"></a>8、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么</h3><ol><li>DNS 解析：将域名解析成 IP 地址。</li><li>TCP 连接：浏览器与服务器建立 TCP 连接。</li><li>发送 HTTP 请求：浏览器向服务器发送 HTTP 请求。</li><li>服务器处理请求并返回数据：服务器处理请求并返回 HTML、CSS、JavaScript 等资源文件。</li><li>浏览器解析渲染页面：浏览器解析 HTML、CSS、JavaScript 等资源文件，构建 DOM 树、CSSOM 树，生成渲染树，最终将页面渲染出来。</li><li>连接结束：浏览器与服务器断开连接。</li></ol><h3 id="9、什么是SPA单页面应用，首屏加载你是如何优化的"><a href="#9、什么是SPA单页面应用，首屏加载你是如何优化的" class="headerlink" title="9、什么是SPA单页面应用，首屏加载你是如何优化的"></a>9、什么是SPA单页面应用，首屏加载你是如何优化的</h3><p>SPA单页面应用是指在web应用中，只有一个完整的页面，页面的内容的变化通过JS动态的变换页面的不同部分来实现，从而避免了传统的多页面应用的页面切换的延迟和不流畅的问题。</p><p>首屏加载优化的方法有：</p><ol><li><p>代码压缩和合并，减少HTTP请求次数，提高加载速度。</p></li><li><p>图片懒加载，只有当图片进入可视区域时才加载，减少首屏加载时间。</p></li><li><p>使用CDN加速，将静态资源分布到不同的地理位置，提高访问速度。</p></li><li><p>使用缓存，将常用的静态资源缓存到本地，减少请求时间。</p></li><li><p>服务端渲染，将页面的HTML结构提前生成好，减少客户端渲染时间。</p></li></ol><h2 id="移动-web-开发"><a href="#移动-web-开发" class="headerlink" title="移动 web 开发"></a>移动 web 开发</h2><h3 id="1、知道-PWA-吗"><a href="#1、知道-PWA-吗" class="headerlink" title="1、知道 PWA 吗"></a>1、知道 PWA 吗</h3><p>PWA（Progressive Web App）是一种渐进式 Web 应用，它结合了 Web 和 Native 应用的优点，可以像 Native 应用一样提供离线访问、推送通知等功能，同时又具有 Web 应用的跨平台、无需下载安装等优势。</p><h3 id="2、移动布局方案"><a href="#2、移动布局方案" class="headerlink" title="2、移动布局方案"></a>2、移动布局方案</h3><p>移动布局方案是指在移动端设备上，为了适应不同尺寸的屏幕，采用不同的布局方式。常见的移动布局方案有：</p><ol><li><p>媒体查询：通过 CSS3 的媒体查询功能，根据屏幕宽度设置不同的样式，实现响应式布局。</p></li><li><p>百分比布局：通过设置元素的宽度、高度、内外边距等属性为百分比，实现自适应布局。</p></li><li><p>rem 布局：通过设置根元素的字体大小为屏幕宽度的百分比，再通过 rem 单位设置元素的大小，实现自适应布局。</p></li><li><p>flex 布局：通过设置容器的 display 属性为 flex，再通过设置容器内元素的 flex 属性，实现自适应布局。</p></li><li><p>vw/vh 布局：通过设置元素的宽度、高度等属性为视口宽度、高度的百分比，实现自适应布局。</p></li></ol><h3 id="3、Rem-布局及其优缺点"><a href="#3、Rem-布局及其优缺点" class="headerlink" title="3、Rem 布局及其优缺点"></a>3、Rem 布局及其优缺点</h3><p>Rem 布局是一种相对于根元素字体大小的单位，可以实现页面的等比缩放。它的优点是可以适配不同屏幕大小，而且相对于其他单位来说使用起来比较方便。缺点是在某些情况下，如需要精确控制元素大小和位置时，使用 Rem 布局可能会比较麻烦。</p><h3 id="4、讲讲-viewport-和移动端布局"><a href="#4、讲讲-viewport-和移动端布局" class="headerlink" title="4、讲讲 viewport 和移动端布局"></a>4、讲讲 viewport 和移动端布局</h3><p>Viewport 是指网页的可视区域，移动端布局是指在移动设备上展示网页的布局方式。移动端布局需要考虑不同设备的屏幕尺寸和像素密度，而 viewport 可以通过设置 meta 标签来控制。常用的 meta 标签有 viewport 和 apple-mobile-web-app-capable。其中 viewport 可以设置网页的宽度、缩放比例、初始缩放比例、最大缩放比例等属性，从而适配不同的设备。移动端布局方案有很多，比如基于像素的布局、百分比布局、flex 布局、rem 布局等。其中 rem 布局相对于其他方案具有更好的适配性和灵活性，但需要注意兼容性问题和计算复杂度。</p><h3 id="5、移动端适配-1px的问题"><a href="#5、移动端适配-1px的问题" class="headerlink" title="5、移动端适配 1px的问题"></a>5、移动端适配 1px的问题</h3><p>移动端屏幕像素密度高，1px 的线在高清屏幕上会显得非常细，影响视觉效果。为了解决这个问题，可以使用 CSS3 的 transform: scale() 方法将元素放大，再缩小回来。也可以使用 viewport 的 meta 标签设置 initial-scale=1，然后通过 JS 动态计算缩放比例，将元素放大后再缩小回来。还可以使用 border-image 和 box-shadow 等 CSS 属性来实现 1px 的效果。</p><h3 id="6、移动端性能优化相关经验"><a href="#6、移动端性能优化相关经验" class="headerlink" title="6、移动端性能优化相关经验"></a>6、移动端性能优化相关经验</h3><p>移动端性能优化的相关经验包括以下几点：</p><ol><li><p>减少 HTTP 请求：合并 CSS 和 JS 文件，使用 CSS Sprites 和 Icon Fonts，减少图片数量和大小等。</p></li><li><p>压缩文件大小：使用 Gzip 压缩文件，压缩图片大小，使用 WebP 格式等。</p></li><li><p>减少重绘和回流：避免频繁操作 DOM，使用 CSS3 动画代替 JS 动画，使用 requestAnimationFrame 优化动画性能等。</p></li><li><p>延迟加载：使用懒加载技术，延迟加载图片和视频等。</p></li><li><p>使用缓存：使用浏览器缓存，使用 CDN 加速等。</p></li><li><p>优化 JavaScript：避免使用全局变量，避免使用 eval() 函数，使用事件委托等。</p></li><li><p>使用 Web Workers：使用 Web Workers 处理复杂计算，避免阻塞主线程。</p></li><li><p>使用性能分析工具：使用 Chrome 开发者工具、Lighthouse 等工具分析页面性能，找到性能瓶颈并优化。</p></li></ol><h3 id="7、移动端兼容性"><a href="#7、移动端兼容性" class="headerlink" title="7、移动端兼容性"></a>7、移动端兼容性</h3><p>移动端兼容性是指在不同的移动设备上，不同的浏览器和操作系统下，网页能够正常显示和运行的能力。为了解决移动端兼容性问题，可以采取以下措施：</p><ol><li>使用 CSS3 和 HTML5 标准，避免使用过时的标签和属性；</li><li>使用流行的 CSS 框架，如 Bootstrap、Foundation 等，它们已经考虑了兼容性问题；</li><li>使用媒体查询和响应式布局，根据不同的设备尺寸和分辨率，调整页面布局和样式；</li><li>使用 JavaScript 库，如 Modernizr、Normalize.css 等，它们可以检测浏览器的特性和支持情况，从而提供相应的兼容性解决方案；</li><li>进行测试和调试，使用模拟器和真实设备进行测试，发现和解决兼容性问题。</li></ol><h3 id="8、小程序"><a href="#8、小程序" class="headerlink" title="8、小程序"></a>8、小程序</h3><p>小程序是一种轻量级的应用程序，可以在微信、支付宝等平台上运行。小程序具有开发成本低、用户获取成本低、使用门槛低等特点，适合于一些简单的应用场景。小程序开发需要掌握相应的框架和语言，如微信小程序需要使用WXML、WXSS、JavaScript等技术。小程序的开发和发布需要遵循相应的规范和流程。</p><h3 id="9、2X-图-3X-图适配"><a href="#9、2X-图-3X-图适配" class="headerlink" title="9、2X 图 3X 图适配"></a>9、2X 图 3X 图适配</h3><p>2X图和3X图适配是指在高清屏幕下，为了保证图片的清晰度，需要提供2倍和3倍大小的图片。在实际开发中，可以使用CSS的媒体查询和<code>background-size</code>属性来实现不同屏幕下的图片适配。同时，也可以使用前端框架或者工具来自动化生成不同尺寸的图片，减少手动操作的工作量。</p><h3 id="10、图片在安卓上，有些设备模糊问题"><a href="#10、图片在安卓上，有些设备模糊问题" class="headerlink" title="10、图片在安卓上，有些设备模糊问题"></a>10、图片在安卓上，有些设备模糊问题</h3><p>这个问题可能是由于安卓设备的像素密度不同导致的。可以通过使用高清晰度的图片来解决这个问题，例如使用2x或3x的图片。另外，可以使用CSS属性<code>image-rendering</code>来控制图片的渲染方式，以获得更好的显示效果。此外，还可以使用<code>srcset</code>属性来根据设备的像素密度加载不同分辨率的图片。</p><h3 id="11、固定定位布局键盘挡住输入框内容"><a href="#11、固定定位布局键盘挡住输入框内容" class="headerlink" title="11、固定定位布局键盘挡住输入框内容"></a>11、固定定位布局键盘挡住输入框内容</h3><p>在移动端，当使用固定定位布局时，键盘可能会挡住输入框内容，解决方法有以下几种：</p><ol><li><p>使用CSS3的vh单位，将输入框的高度设置为屏幕高度的一部分，这样即使键盘弹起，也不会挡住输入框。</p></li><li><p>使用JavaScript监听键盘的弹起和收起事件，当键盘弹起时，将输入框的位置向上移动，当键盘收起时，将输入框的位置还原。</p></li><li><p>在输入框上方添加一个固定高度的占位元素，当键盘弹起时，占位元素的高度会被键盘顶起，从而不会挡住输入框。</p></li></ol><h3 id="12、click-的-300ms-延迟问题和点击穿透问题"><a href="#12、click-的-300ms-延迟问题和点击穿透问题" class="headerlink" title="12、click 的 300ms 延迟问题和点击穿透问题"></a>12、click 的 300ms 延迟问题和点击穿透问题</h3><p>click 的 300ms 延迟问题是因为移动端浏览器需要等待一段时间来判断用户是否要进行双击缩放操作，而点击穿透问题则是因为在某些情况下，点击某个元素后，下面的元素也会被触发点击事件。解决这两个问题的方法可以使用 fastclick 库来消除 300ms 延迟和阻止点击穿透，或者使用 touchstart 和 touchend 事件来替代 click 事件。</p><h3 id="13、防止手机中页面放大和缩小"><a href="#13、防止手机中页面放大和缩小" class="headerlink" title="13、防止手机中页面放大和缩小"></a>13、防止手机中页面放大和缩小</h3><p>当前请求过多，请稍后重新尝试。可以通过设置 viewport 的 meta 标签来防止手机中页面放大和缩小。具体做法是在 head 标签中添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，width=device-width 表示页面宽度等于设备宽度，initial-scale=1.0 表示初始缩放比例为 1，maximum-scale=1.0 表示最大缩放比例为 1，user-scalable=no 表示禁止用户缩放页面。这样设置后，用户就无法通过手势放大或缩小页面。</p><h3 id="14、px、em、rem、-、vw、vh、vm-这些单位的区别"><a href="#14、px、em、rem、-、vw、vh、vm-这些单位的区别" class="headerlink" title="14、px、em、rem、%、vw、vh、vm 这些单位的区别"></a>14、px、em、rem、%、vw、vh、vm 这些单位的区别</h3><ul><li>px：像素，是相对于显示器屏幕分辨率而言的，具有固定的大小，不随页面缩放而变化。</li><li>em：相对长度单位，相对于父元素的字体大小，如果自身定义了 font-size 属性，则相对于自身的字体大小。</li><li>rem：相对长度单位，相对于根元素（html）的字体大小，具有相对稳定的大小，适合用于响应式布局。</li><li>%：相对长度单位，相对于父元素的宽度，高度或字体大小。</li><li>vw：视口宽度的百分比，1vw 等于视口宽度的 1%。</li><li>vh：视口高度的百分比，1vh 等于视口高度的 1%。</li><li>vmin：vw 和 vh 中较小的那个。</li><li>vmax：vw 和 vh 中较大的那个。</li></ul><p>总结：px 是绝对单位，其他单位都是相对单位，em 相对于父元素字体大小，rem 相对于根元素字体大小，% 相对于父元素宽度、高度或字体大小，vw、vh、vmin、vmax 相对于视口大小。</p><h3 id="15、移动端适配-dpr-浅析"><a href="#15、移动端适配-dpr-浅析" class="headerlink" title="15、移动端适配- dpr 浅析"></a>15、移动端适配- dpr 浅析</h3><p>在移动端适配中，dpr（Device Pixel Ratio）是一个重要的概念。它指的是设备物理像素和设备独立像素的比值。在不同的设备上，dpr 的值可能不同，比如 iPhone 6 的 dpr 是 2，而 iPhone 6 Plus 的 dpr 是 3。</p><p>在进行移动端适配时，我们需要根据不同设备的 dpr 值来设置相应的样式。比如，对于 dpr 为 2 的设备，我们可以将样式的像素值设置为原来的一半，以保证在不同设备上显示的效果一致。</p><p>同时，为了方便开发，我们可以使用一些工具来自动化处理移动端适配的问题，比如使用 rem 单位和 postcss-pxtorem 插件来自动将像素值转换为 rem 值，以适配不同的设备。</p><h3 id="16、移动端扩展点击区域"><a href="#16、移动端扩展点击区域" class="headerlink" title="16、移动端扩展点击区域"></a>16、移动端扩展点击区域</h3><p>移动端扩展点击区域可以通过以下几种方式实现：</p><ol><li><p>使用 padding 或 margin 扩大元素的点击区域，但这种方式会影响元素的布局和样式。</p></li><li><p>使用伪元素 ::before 或 ::after 来扩大元素的点击区域，但需要注意伪元素的 z-index 值，避免遮挡其他元素。</p></li><li><p>使用 JavaScript 监听元素的 click 事件，然后在事件处理函数中判断点击位置是否在元素的扩展区域内，如果是则执行相应的操作。</p></li><li><p>使用 CSS3 的 transform 属性来缩小元素的大小，然后通过 scale() 方法来放大元素的点击区域，但需要注意 transform 属性对元素的布局和样式的影响。</p></li></ol><h3 id="17、上下拉动滚动条时卡顿、慢"><a href="#17、上下拉动滚动条时卡顿、慢" class="headerlink" title="17、上下拉动滚动条时卡顿、慢"></a>17、上下拉动滚动条时卡顿、慢</h3><p>这个问题可能有多种原因，以下是一些可能的解决方案：</p><ol><li>减少页面中的图片和其他资源的大小，以减少加载时间和内存占用。</li><li>使用 CSS3 动画代替 JavaScript 动画，以减少 CPU 占用率。</li><li>避免在滚动时进行复杂的计算和操作，以减少 CPU 占用率。</li><li>使用虚拟滚动技术，只渲染可见区域内的内容，以减少内存占用和渲染时间。</li><li>使用硬件加速，例如使用 transform 和 opacity 属性，以减少 CPU 占用率。</li><li>避免在滚动时触发重排和重绘，以减少渲染时间。</li><li>使用 debounce 或 throttle 函数来限制滚动事件的触发频率，以减少 CPU 占用率。</li></ol><h3 id="18、长时间按住页面出现闪退"><a href="#18、长时间按住页面出现闪退" class="headerlink" title="18、长时间按住页面出现闪退"></a>18、长时间按住页面出现闪退</h3><p>这个问题可能是因为页面中的 JavaScript 代码执行时间过长，导致页面出现卡顿或者崩溃。可以通过以下几种方式来解决：</p><ol><li><p>减少页面中的 JavaScript 代码量，尽量避免使用复杂的算法和循环操作。</p></li><li><p>将一些耗时的操作放到 Web Worker 中执行，避免阻塞主线程。</p></li><li><p>使用 requestAnimationFrame 来代替 setInterval 和 setTimeout，避免出现卡顿。</p></li><li><p>对于一些需要长时间执行的操作，可以考虑使用分段执行的方式，每次只执行一小段代码，然后暂停一段时间再继续执行下一段代码，这样可以避免页面出现卡顿或者崩溃。</p></li><li><p>对于一些需要频繁执行的操作，可以考虑使用节流或者防抖的方式来优化代码，避免出现卡顿。</p></li></ol><h3 id="19、webkit-mask-兼容处理"><a href="#19、webkit-mask-兼容处理" class="headerlink" title="19、webkit mask 兼容处理"></a>19、webkit mask 兼容处理</h3><p>webkit mask 是 WebKit 内核浏览器的一个 CSS 属性，用于设置元素的遮罩效果。在其他浏览器中不支持该属性，需要进行兼容处理。可以使用 SVG 或者 Canvas 来实现遮罩效果，也可以使用 JavaScript 来动态生成遮罩元素并添加到页面中。另外，也可以使用 CSS3 的 clip-path 属性来代替 mask 实现遮罩效果，但是 clip-path 的兼容性也不是很好，需要进行兼容处理。</p><h3 id="20、transiton-闪屏"><a href="#20、transiton-闪屏" class="headerlink" title="20、transiton 闪屏"></a>20、transiton 闪屏</h3><p>transiton 闪屏是指在使用 CSS transition 动画时，页面在动画开始或结束时出现短暂的闪烁现象。这是因为浏览器在渲染过程中，会在动画开始或结束时重新计算元素的样式，导致页面重新绘制，从而出现闪烁现象。解决方法包括：</p><ol><li><p>使用 transform 替代 top/left 等属性进行动画，因为 transform 不会触发页面的重绘。</p></li><li><p>使用 requestAnimationFrame 代替 setTimeout/setInterval 进行动画，因为 requestAnimationFrame 会在浏览器下一次重绘时执行，可以避免页面的闪烁。</p></li><li><p>将动画元素设置为图层，可以使用 CSS 的 will-change 属性或者 transform: translateZ(0) 来实现。这样可以让浏览器将动画元素单独绘制在一个图层中，避免重绘整个页面。</p></li><li><p>将动画元素设置为 fixed 或 absolute 定位，可以避免其他元素的重绘。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 chatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023面试题前端研发流程遇上chatGPT</title>
      <link href="/post/230703.html"/>
      <url>/post/230703.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端高频面试题-2023版"><a href="#前端高频面试题-2023版" class="headerlink" title="前端高频面试题 - 2023版"></a>前端高频面试题 - 2023版</h1><h2 id="技术设计"><a href="#技术设计" class="headerlink" title="技术设计"></a>技术设计</h2><h3 id="1、设计文档需要涵盖哪些部分"><a href="#1、设计文档需要涵盖哪些部分" class="headerlink" title="1、设计文档需要涵盖哪些部分?"></a>1、设计文档需要涵盖哪些部分?</h3><p>设计文档需要涵盖以下部分：</p><ol><li><p>项目概述：包括项目的目标、背景、范围、需求和约束条件等。</p></li><li><p>用户界面设计：包括界面的布局、颜色、字体、图标、交互方式等。</p></li><li><p>数据库设计：包括数据库的结构、表的设计、关系、索引等。</p></li><li><p>系统架构设计：包括系统的组成部分、模块划分、接口设计等。</p></li><li><p>系统流程设计：包括系统的流程图、用例图、时序图等。</p></li><li><p>技术选型：包括所选用的技术、框架、库等。</p></li><li><p>安全设计：包括系统的安全性、数据的保护、权限控制等。</p></li><li><p>性能设计：包括系统的性能、负载均衡、缓存等。</p></li><li><p>测试计划：包括测试的方法、测试用例、测试环境等。</p></li><li><p>部署计划：包括系统的部署方式、部署流程、上线计划等。</p></li></ol><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h3 id="1、谈谈-eslint"><a href="#1、谈谈-eslint" class="headerlink" title="1、谈谈 eslint"></a>1、谈谈 eslint</h3><p>ESLint是一个开源的JavaScript代码检查工具，它可以帮助我们在编写代码时发现并修复一些常见的代码错误和潜在的问题。它可以通过配置文件来自定义规则，也可以集成到我们的开发工具中，如编辑器和构建工具。使用ESLint可以提高代码质量和可维护性，减少bug和重构成本。</p><h3 id="2、谈谈-commit-message-规范"><a href="#2、谈谈-commit-message-规范" class="headerlink" title="2、谈谈 commit message 规范"></a>2、谈谈 commit message 规范</h3><p>Commit message 规范是指在代码提交时，按照一定的格式书写提交信息，以便于团队成员更好地理解代码变更的内容和目的。通常包括三个部分：类型、影响范围和简要描述。常见的类型包括 feat（新功能）、fix（修复 bug）、docs（文档更新）、style（样式调整）、refactor（重构代码）、test（测试相关）、chore（构建或工具相关）等。影响范围可以是文件名、模块名、功能模块等。简要描述则是对代码变更的简要概述。规范的 commit message 可以提高代码可读性、可维护性，方便代码审查和版本管理。</p><h2 id="研发协同-Git"><a href="#研发协同-Git" class="headerlink" title="研发协同(Git)"></a>研发协同(Git)</h2><h3 id="1、git-的基本使用方法"><a href="#1、git-的基本使用方法" class="headerlink" title="1、git 的基本使用方法"></a>1、git 的基本使用方法</h3><p>Git的基本使用方法包括以下几个方面：</p><ol><li><p>初始化一个Git仓库：在项目根目录下执行<code>git init</code>命令。</p></li><li><p>添加文件到暂存区：使用<code>git add</code>命令将修改的文件添加到暂存区。</p></li><li><p>提交代码到本地仓库：使用<code>git commit</code>命令将暂存区的文件提交到本地仓库。</p></li><li><p>查看仓库状态：使用<code>git status</code>命令查看当前仓库的状态。</p></li><li><p>查看提交历史：使用<code>git log</code>命令查看提交历史。</p></li><li><p>创建分支：使用<code>git branch</code>命令创建新的分支。</p></li><li><p>切换分支：使用<code>git checkout</code>命令切换到指定的分支。</p></li><li><p>合并分支：使用<code>git merge</code>命令将指定分支合并到当前分支。</p></li><li><p>拉取远程仓库代码：使用<code>git pull</code>命令从远程仓库拉取最新代码。</p></li><li><p>推送本地代码到远程仓库：使用<code>git push</code>命令将本地代码推送到远程仓库。</p></li></ol><p>以上是Git的基本使用方法，掌握这些命令可以完成日常的代码管理工作。</p><h3 id="2、git-工作流程"><a href="#2、git-工作流程" class="headerlink" title="2、git 工作流程"></a>2、git 工作流程</h3><p>Git工作流程是指在团队协作开发中，如何使用Git进行版本控制和协作开发的一套规范流程。常见的Git工作流程有以下几种：</p><ol><li><p>集中式工作流程：所有开发者都向同一个中央仓库提交代码，适用于小型团队或个人开发。</p></li><li><p>功能分支工作流程：每个功能开发都在独立的分支上进行，开发完成后合并到主分支，适用于中型团队或大型项目。</p></li><li><p>Gitflow工作流程：在功能分支工作流程的基础上，增加了发布分支和维护分支，适用于大型团队或复杂项目。</p></li><li><p>Forking工作流程：每个开发者都在自己的仓库中进行开发，通过Pull Request向主仓库提交代码，适用于开源项目或跨组织协作开发。</p></li></ol><p>以上是常见的Git工作流程，具体选择哪种工作流程，需要根据团队规模、项目复杂度、开发流程等因素综合考虑。</p><h3 id="3、需要合并别人代码进来"><a href="#3、需要合并别人代码进来" class="headerlink" title="3、需要合并别人代码进来"></a>3、需要合并别人代码进来</h3><p>合并别人代码进来的步骤如下：</p><ol><li><p>首先，将别人的代码仓库添加为远程仓库，使用 <code>git remote add</code> 命令。</p></li><li><p>然后，从远程仓库拉取代码，使用 <code>git fetch</code> 命令。</p></li><li><p>接着，将远程分支合并到本地分支，使用 <code>git merge</code> 命令。</p></li><li><p>如果出现冲突，需要手动解决冲突，然后再提交代码。</p></li><li><p>最后，将本地代码推送到远程仓库，使用 <code>git push</code> 命令。</p></li></ol><p>需要注意的是，在合并别人的代码之前，最好先将自己的代码提交并推送到远程仓库，以免出现冲突。同时，也要确保自己的代码与别人的代码没有冲突。</p><h3 id="4、需要切换分支"><a href="#4、需要切换分支" class="headerlink" title="4、需要切换分支"></a>4、需要切换分支</h3><p>要切换分支，可以使用 <code>git checkout</code> 命令，后面跟上要切换到的分支名。例如，要切换到名为 <code>dev</code> 的分支，可以使用以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>如果当前分支有未提交的更改，需要先提交或者撤销更改后再切换分支。</p><h3 id="5、我们如何使用-git-和开源的码云或-github-上面的远端仓库的项目进行工作呢"><a href="#5、我们如何使用-git-和开源的码云或-github-上面的远端仓库的项目进行工作呢" class="headerlink" title="5、我们如何使用 git 和开源的码云或 github 上面的远端仓库的项目进行工作呢"></a>5、我们如何使用 git 和开源的码云或 github 上面的远端仓库的项目进行工作呢</h3><p>我们可以通过以下步骤使用 git 和开源的码云或 GitHub 上面的远端仓库的项目进行工作：</p><ol><li><p>克隆远端仓库到本地：使用 git clone 命令将远端仓库克隆到本地。</p></li><li><p>创建分支：使用 git branch 命令创建一个新的分支，以便我们可以在不影响主分支的情况下进行开发。</p></li><li><p>切换分支：使用 git checkout 命令切换到新创建的分支。</p></li><li><p>进行开发：在新创建的分支上进行开发，并使用 git add 和 git commit 命令将更改提交到本地仓库。</p></li><li><p>推送到远端仓库：使用 git push 命令将本地分支推送到远端仓库。</p></li><li><p>提交合并请求：在远端仓库上创建一个合并请求，请求将我们的更改合并到主分支中。</p></li><li><p>处理反馈：如果合并请求被拒绝或需要更改，我们可以在本地分支上进行更改并再次提交。</p></li><li><p>合并到主分支：一旦合并请求被接受，我们可以将更改合并到主分支中，以便其他人可以访问我们的更改。</p></li></ol><h3 id="6、git、github、gitlab-三者之间的联系以及区别"><a href="#6、git、github、gitlab-三者之间的联系以及区别" class="headerlink" title="6、git、github、gitlab 三者之间的联系以及区别"></a>6、git、github、gitlab 三者之间的联系以及区别</h3><p>Git 是一款分布式版本控制系统，可以帮助我们管理代码的版本。GitHub 和 GitLab 都是基于 Git 的代码托管平台，提供了代码仓库、版本控制、协作开发等功能。其中，GitHub 是最大的开源社区，主要面向个人和开源项目，而 GitLab 则更多地面向企业和团队协作。此外，GitLab 还提供了 CI/CD、容器等功能。总的来说，Git 是版本控制工具，而 GitHub 和 GitLab 则是基于 Git 的代码托管平台，提供了更多的协作和管理功能。</p><h3 id="7、github-和码云的区别"><a href="#7、github-和码云的区别" class="headerlink" title="7、github 和码云的区别"></a>7、github 和码云的区别</h3><p>GitHub 和码云都是基于 Git 的代码托管平台，都提供了代码仓库、版本控制、协作开发、问题追踪等功能。它们的主要区别在于：</p><ol><li>地域：GitHub 总部在美国，码云总部在中国，因此在国内访问码云速度更快。</li><li>用户群体：GitHub 的用户主要是国外的开发者，码云的用户主要是国内的开发者。</li><li>功能：码云相对于 GitHub 增加了一些针对中国用户的功能，比如 Gitee Pages、码云 GVP、码云云构建等。</li><li>开源：GitHub 上的大部分项目都是开源的，而码云上的项目则有很多是私有的。</li></ol><p>总的来说，GitHub 更适合国外的开发者，码云更适合国内的开发者。</p><h3 id="8、提交时发生冲突，你能解释冲突是如何产生的吗-你是如何解决的"><a href="#8、提交时发生冲突，你能解释冲突是如何产生的吗-你是如何解决的" class="headerlink" title="8、提交时发生冲突，你能解释冲突是如何产生的吗? 你是如何解决的"></a>8、提交时发生冲突，你能解释冲突是如何产生的吗? 你是如何解决的</h3><p>提交时发生冲突是因为两个或多个人在同一文件的同一部分进行了修改，Git 无法自动决定应该保留哪个修改。解决冲突的方法是手动编辑文件，选择要保留的修改，然后再次提交。通常的做法是使用 Git 提供的合并工具来解决冲突，如使用 <code>git mergetool</code> 命令打开合并工具进行手动合并。如果无法解决冲突，可以考虑与其他人协商，或者撤销本次提交并重新开始。</p><h3 id="9、如果本次提交误操作，如何撤销"><a href="#9、如果本次提交误操作，如何撤销" class="headerlink" title="9、如果本次提交误操作，如何撤销"></a>9、如果本次提交误操作，如何撤销</h3><p>可以使用 git reset 命令来撤销本次提交，具体操作如下：</p><ol><li><p>使用 git log 命令查看提交记录，找到需要撤销的提交的 commit id。</p></li><li><p>使用 git reset 命令，将 HEAD 指针指向需要撤销的提交的前一个提交。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="variable constant_">HEAD</span>^</span><br></pre></td></tr></table></figure><p>如果需要撤销多个提交，可以使用以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="variable constant_">HEAD</span>~n </span><br></pre></td></tr></table></figure><h3 id="10、git-修改提交的历史信息"><a href="#10、git-修改提交的历史信息" class="headerlink" title="10、git 修改提交的历史信息"></a>10、git 修改提交的历史信息</h3><p>使用 git 的 rebase 命令可以修改提交的历史信息。具体步骤为：使用 git rebase -i 命令打开交互式 rebase 编辑器，选择需要修改的提交，将 pick 命令改为 edit，保存并退出编辑器。然后使用 git commit —amend 命令修改提交信息，最后使用 git rebase —continue 命令完成修改。需要注意的是，修改提交历史信息会改变提交的哈希值，因此需要谨慎操作。</p><h3 id="11、如何删除-github-和-gitlab-上的文件夹"><a href="#11、如何删除-github-和-gitlab-上的文件夹" class="headerlink" title="11、如何删除 github 和 gitlab 上的文件夹"></a>11、如何删除 github 和 gitlab 上的文件夹</h3><p>要删除 Github 和 Gitlab 上的文件夹，可以通过以下步骤实现：</p><ol><li>打开仓库并进入要删除的文件夹。</li><li>点击页面右上角的“Settings”选项。</li><li>在“Danger Zone”下找到“Delete this repository”或“Delete this project”选项。</li><li>输入要删除的文件夹名称以确认删除操作。</li><li>点击“Delete”按钮以完成删除操作。</li></ol><p>需要注意的是，删除操作是不可逆的，因此在进行删除操作前，请确保已备份好重要的文件和数据。</p><h3 id="12、如何查看分支提交的历史记录-查看某个文件的历史记录呢"><a href="#12、如何查看分支提交的历史记录-查看某个文件的历史记录呢" class="headerlink" title="12、如何查看分支提交的历史记录? 查看某个文件的历史记录呢"></a>12、如何查看分支提交的历史记录? 查看某个文件的历史记录呢</h3><p>要查看分支提交的历史记录，可以使用 git log 命令。该命令会显示分支的每个提交记录，包括提交的哈希值、作者、提交时间、提交信息等。</p><p>要查看某个文件的历史记录，可以使用 git log 命令加上文件路径参数。例如，要查看 index.html 文件的历史记录，可以使用命令 git log index.html。该命令会显示该文件的每个提交记录，包括提交的哈希值、作者、提交时间、提交信息等。</p><h3 id="13、git-跟-svn-有什么区别"><a href="#13、git-跟-svn-有什么区别" class="headerlink" title="13、git 跟 svn 有什么区别"></a>13、git 跟 svn 有什么区别</h3><p>Git 和 SVN 都是版本控制工具，但它们有以下区别：</p><ol><li><p>分布式 vs 集中式：Git 是一种分布式版本控制系统，每个开发者都有一份完整的代码仓库，可以在本地进行版本控制和提交。而 SVN 是一种集中式版本控制系统，所有的代码都保存在中央仓库中，开发者需要从中央仓库中获取代码并提交修改。</p></li><li><p>分支管理：Git 的分支管理非常方便，可以轻松地创建、合并和删除分支。而 SVN 的分支管理比较麻烦，需要手动创建分支，并且合并分支时可能会出现冲突。</p></li><li><p>性能：Git 的性能比 SVN 更好，因为 Git 可以在本地进行版本控制和提交，不需要频繁地与中央仓库进行通信。</p></li><li><p>安全性：Git 的安全性比 SVN 更好，因为 Git 使用 SHA-1 算法对每个提交进行哈希，可以保证代码的完整性和安全性。</p></li></ol><p>总之，Git 更适合分布式团队协作和大型项目管理，而 SVN 更适合集中式团队协作和小型项目管理。</p><h3 id="14、我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行-it-status-时都让这些文件显示出来，我们该如何操作"><a href="#14、我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行-it-status-时都让这些文件显示出来，我们该如何操作" class="headerlink" title="14、我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行 it status 时都让这些文件显示出来，我们该如何操作?"></a>14、我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行 it status 时都让这些文件显示出来，我们该如何操作?</h3><p>可以在项目根目录下创建一个名为 .gitignore 的文件，将不需要被提交的文件或文件夹名称写入该文件中，这样 git 就会忽略这些文件或文件夹的变化，不会在 it status 中显示出来。</p><h3 id="15、git-fetch-和-git-merge-和-git-pull-的区别"><a href="#15、git-fetch-和-git-merge-和-git-pull-的区别" class="headerlink" title="15、git fetch 和 git merge 和 git pull 的区别"></a>15、git fetch 和 git merge 和 git pull 的区别</h3><p>git fetch 会将远程仓库的最新代码拉取到本地，但不会自动合并到当前分支，需要手动执行 git merge 或 git rebase 进行合并。</p><p>git merge 会将指定分支的代码合并到当前分支，如果有冲突需要手动解决。</p><p>git pull 相当于 git fetch 和 git merge 的组合，会自动拉取远程仓库的最新代码并合并到当前分支。</p><h3 id="16、如何把本地仓库的内容推向一个空的远程仓库"><a href="#16、如何把本地仓库的内容推向一个空的远程仓库" class="headerlink" title="16、如何把本地仓库的内容推向一个空的远程仓库"></a>16、如何把本地仓库的内容推向一个空的远程仓库</h3><p>可以通过以下步骤把本地仓库的内容推向一个空的远程仓库：</p><ol><li>在远程仓库中创建一个新的空仓库。</li><li>在本地仓库中使用 git remote add 命令添加远程仓库地址。</li><li>使用 git push 命令将本地仓库的内容推送到远程仓库。</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1、单元测试如何做"><a href="#1、单元测试如何做" class="headerlink" title="1、单元测试如何做?"></a>1、单元测试如何做?</h3><p>单元测试是一种测试方法，用于测试代码的最小单元——函数或方法。以下是单元测试的一般步骤：</p><ol><li>选择一个测试框架，如Jest、Mocha、Karma等。</li><li>编写测试用例，包括输入数据、预期输出和测试代码。</li><li>运行测试用例，检查实际输出是否与预期输出一致。</li><li>分析测试结果，修复代码中的错误。</li><li>重复执行步骤2-4，直到所有测试用例都通过为止。</li></ol><p>单元测试可以帮助开发人员及时发现代码中的错误，提高代码质量和可维护性。</p><h3 id="2、如何解决联调依赖问题"><a href="#2、如何解决联调依赖问题" class="headerlink" title="2、如何解决联调依赖问题?"></a>2、如何解决联调依赖问题?</h3><p>联调依赖问题通常可以通过以下几种方式来解决：</p><ol><li><p>使用模拟数据：在开发过程中，可以使用模拟数据来模拟接口返回的数据，从而避免依赖后端接口的情况。</p></li><li><p>使用 mock 数据：可以使用 mock 数据来模拟后端接口的返回数据，从而避免依赖后端接口的情况。</p></li><li><p>使用代理服务器：可以使用代理服务器来代理后端接口，从而避免跨域问题和依赖后端接口的情况。</p></li><li><p>使用测试环境：在联调过程中，可以使用测试环境来模拟生产环境，从而避免对生产环境的依赖。</p></li></ol><h3 id="3、提测阶段bug-和-线上bug-解决过程有和区别"><a href="#3、提测阶段bug-和-线上bug-解决过程有和区别" class="headerlink" title="3、提测阶段bug 和 线上bug 解决过程有和区别?"></a>3、提测阶段bug 和 线上bug 解决过程有和区别?</h3><p>提测阶段的bug和线上bug解决过程有以下区别：</p><ol><li><p>优先级不同：提测阶段的bug优先级相对较高，需要在发布前解决，而线上bug则需要根据影响程度和紧急程度来确定优先级。</p></li><li><p>定位难度不同：提测阶段的bug通常可以通过日志和调试工具来定位，而线上bug则需要更加敏锐的观察和分析，可能需要使用线上调试工具和监控系统。</p></li><li><p>影响范围不同：提测阶段的bug通常只影响测试环境，而线上bug则可能会影响到大量用户，需要及时处理。</p></li><li><p>解决时间不同：提测阶段的bug通常需要在发布前解决，而线上bug则需要在最短时间内解决，以减少用户的影响。</p></li></ol><p>因此，在解决提测阶段的bug和线上bug时，需要根据不同的情况采取不同的策略和方法，以保证问题能够得到及时解决。</p><h2 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h2><h3 id="1、流水线如何搭建"><a href="#1、流水线如何搭建" class="headerlink" title="1、流水线如何搭建"></a>1、流水线如何搭建</h3><p>发布上线的流水线搭建可以分为以下几个步骤：</p><ol><li><p>代码仓库：使用 Git 管理代码，建立一个代码仓库。</p></li><li><p>自动化构建：使用工具如 Jenkins、Travis CI 等，建立自动化构建流程，包括编译、打包、测试等。</p></li><li><p>镜像仓库：使用 Docker 等工具，建立镜像仓库，将构建好的应用程序打包成镜像。</p></li><li><p>自动化部署：使用工具如 Kubernetes、Docker Swarm 等，建立自动化部署流程，将镜像部署到生产环境。</p></li><li><p>监控和日志：使用工具如 ELK、Prometheus 等，建立监控和日志系统，监控应用程序的运行状态和日志输出。</p></li><li><p>自动化回滚：建立自动化回滚流程，当应用程序出现问题时，自动回滚到上一个版本。</p></li></ol><p>通过以上步骤，可以建立一个完整的发布上线流水线，实现快速、高效、可靠的应用程序发布。</p><h3 id="2、对-Docker-理解"><a href="#2、对-Docker-理解" class="headerlink" title="2、对 Docker 理解"></a>2、对 Docker 理解</h3><p>Docker 是一种容器化技术，可以将应用程序及其依赖项打包到一个可移植的容器中，使得应用程序可以在任何环境中运行。Docker 容器可以在不同的操作系统、云平台和硬件上运行，具有高度的可移植性和灵活性。Docker 还提供了一套完整的工具链，包括 Docker Engine、Docker Compose、Docker Swarm 等，可以方便地管理和部署容器化应用程序。Docker 技术在 DevOps、云计算、微服务等领域得到了广泛的应用。</p><h3 id="3、pm2-与-docker-有何区别"><a href="#3、pm2-与-docker-有何区别" class="headerlink" title="3、pm2 与 docker 有何区别?"></a>3、pm2 与 docker 有何区别?</h3><p>PM2 是一个进程管理工具，可以帮助我们管理 Node.js 进程，包括启动、停止、重启、监控等功能。而 Docker 是一个容器化平台，可以将应用程序及其依赖项打包成一个独立的容器，使得应用程序可以在任何环境中运行，且不受环境差异的影响。</p><p>具体来说，PM2 只是一个进程管理工具，它可以帮助我们管理 Node.js 进程，但是它并不能解决应用程序在不同环境中运行的问题。而 Docker 则可以将应用程序及其依赖项打包成一个独立的容器，使得应用程序可以在任何环境中运行，且不受环境差异的影响。因此，Docker 更适合用于构建和部署应用程序，而 PM2 更适合用于管理应用程序的运行。</p><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><h3 id="1、对-Node-js-有没有了解，它有什么特点，适合做什么业务"><a href="#1、对-Node-js-有没有了解，它有什么特点，适合做什么业务" class="headerlink" title="1、对 Node.js 有没有了解，它有什么特点，适合做什么业务"></a>1、对 Node.js 有没有了解，它有什么特点，适合做什么业务</h3><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境，它具有事件驱动、非阻塞I/O等特点，适合处理高并发、I/O密集型的业务，如Web服务器、API服务器、实时通讯服务器等。Node.js还有丰富的第三方模块和工具，可以快速构建高效、可扩展的应用程序。</p><h3 id="2、Node-和-前端项目怎么解决跨域的"><a href="#2、Node-和-前端项目怎么解决跨域的" class="headerlink" title="2、Node 和 前端项目怎么解决跨域的"></a>2、Node 和 前端项目怎么解决跨域的</h3><p>可以通过以下几种方式解决跨域问题：</p><ol><li><p>代理：在前端项目中，通过配置代理服务器来转发请求，使得请求不再跨域。</p></li><li><p>JSONP：利用 script 标签的 src 属性不受同源策略限制的特点，将请求转换为 script 标签的 src 属性，服务器返回的数据需要包裹在一个函数调用中，前端通过该函数获取数据。</p></li><li><p>CORS：在服务端设置响应头 Access-Control-Allow-Origin，允许指定的域名访问该资源。</p></li><li><p>postMessage：在前端页面中使用 postMessage 方法向目标页面发送消息，目标页面通过监听 message 事件获取消息，从而实现跨域通信。</p></li></ol><h3 id="3、Node-的优点是什么-缺点是什么"><a href="#3、Node-的优点是什么-缺点是什么" class="headerlink" title="3、Node 的优点是什么? 缺点是什么"></a>3、Node 的优点是什么? 缺点是什么</h3><p>Node 的优点包括：</p><ol><li><p>高效性：Node.js 使用了事件驱动、非阻塞 I/O 模型，使得它可以处理大量并发连接，具有很高的性能表现。</p></li><li><p>跨平台：Node.js 可以在多个操作系统上运行，包括 Windows、Linux、Mac OS 等。</p></li><li><p>社区支持：Node.js 有一个庞大的社区，提供了大量的模块和工具，可以帮助开发者快速构建应用程序。</p></li><li><p>前后端一体化：Node.js 可以用于构建前端和后端应用程序，使得前后端可以使用同一种语言和技术栈，提高了开发效率。</p></li></ol><p>Node 的缺点包括：</p><ol><li><p>单线程：Node.js 使用单线程模型，如果有一个请求阻塞了事件循环，会导致整个应用程序的性能下降。</p></li><li><p>不适合 CPU 密集型任务：由于 Node.js 使用单线程模型，不适合处理 CPU 密集型任务，因为这会导致事件循环被阻塞，影响整个应用程序的性能。</p></li><li><p>回调地狱：由于 Node.js 使用回调函数处理异步操作，如果嵌套过多，会导致代码难以维护，出现回调地狱的情况。</p></li></ol><h3 id="4、commonJS-中的-require-exports-和-ES6-中import-expot-的区别是什么"><a href="#4、commonJS-中的-require-exports-和-ES6-中import-expot-的区别是什么" class="headerlink" title="4、commonJS 中的 require/exports 和 ES6 中import/expot 的区别是什么"></a>4、commonJS 中的 require/exports 和 ES6 中import/expot 的区别是什么</h3><p>commonJS 中的 require/exports 和 ES6 中 import/export 的区别如下：</p><ol><li><p>语法不同：require/exports 是 commonJS 的模块化规范，而 import/export 是 ES6 的模块化规范。</p></li><li><p>加载方式不同：require/exports 是同步加载模块，而 import/export 是异步加载模块。</p></li><li><p>功能不同：require/exports 只能导出一个对象，而 import/export 可以导出多个对象。</p></li><li><p>静态分析不同：import/export 可以进行静态分析，可以在编译时就确定模块的依赖关系，而 require/exports 只能在运行时确定依赖关系。</p></li><li><p>作用域不同：require/exports 的作用域是模块级别的，而 import/export 的作用域是块级别的。</p></li></ol><p>总的来说，ES6 的 import/export 更加灵活、高效、安全，是未来的趋势。</p><h3 id="5、简述同步和异步的区别，如何避免回调地狱，Node-的异步问题是如何解决的"><a href="#5、简述同步和异步的区别，如何避免回调地狱，Node-的异步问题是如何解决的" class="headerlink" title="5、简述同步和异步的区别，如何避免回调地狱，Node 的异步问题是如何解决的"></a>5、简述同步和异步的区别，如何避免回调地狱，Node 的异步问题是如何解决的</h3><p>同步和异步的区别：同步是指代码按照顺序执行，必须等待前面的代码执行完毕才能执行后面的代码；异步是指代码不按照顺序执行，可以在前面的代码没有执行完毕的情况下执行后面的代码。</p><p>避免回调地狱的方法：可以使用Promise、async/await等方式来避免回调地狱。</p><p>Node的异步问题解决方法：Node使用了事件循环机制来解决异步问题，通过将异步任务交给事件循环处理，避免了阻塞主线程的情况。同时，Node也提供了一些异步API，如fs.readFile等，来方便开发者进行异步编程。</p><h3 id="6、dependencies-和-devDependencies-两者区别"><a href="#6、dependencies-和-devDependencies-两者区别" class="headerlink" title="6、dependencies 和 devDependencies 两者区别"></a>6、dependencies 和 devDependencies 两者区别</h3><p>在 Node.js 的 package.json 文件中，dependencies 和 devDependencies 两者都是用来声明项目所依赖的包，但是它们之间有一个重要的区别。dependencies 中声明的包是项目运行时必须要依赖的包，而 devDependencies 中声明的包则是开发时需要用到的包，比如测试框架、打包工具等等。在项目部署时，devDependencies 中声明的包不会被安装，只有 dependencies 中声明的包才会被安装。这样可以减少项目部署时的包体积，提高部署效率。</p><h3 id="7、描述一下从接到-url-开始，到逻辑处理，到DB查询，到返回结果，整个过程是怎么处理的"><a href="#7、描述一下从接到-url-开始，到逻辑处理，到DB查询，到返回结果，整个过程是怎么处理的" class="headerlink" title="7、描述一下从接到 url 开始，到逻辑处理，到DB查询，到返回结果，整个过程是怎么处理的?"></a>7、描述一下从接到 url 开始，到逻辑处理，到DB查询，到返回结果，整个过程是怎么处理的?</h3><p>从接到 URL 开始，整个过程如下：</p><ol><li>浏览器发送 HTTP 请求到服务器。</li><li>服务器接收请求，解析 URL，找到对应的路由和处理函数。</li><li>处理函数根据业务逻辑进行处理，可能需要从数据库中查询数据。</li><li>处理函数将处理结果返回给服务器。</li><li>服务器将处理结果封装成 HTTP 响应，发送给浏览器。</li><li>浏览器接收到响应，根据响应头和响应体进行处理，可能需要渲染页面。</li></ol><p>在这个过程中，可能会有一些中间件对请求进行处理，例如解析请求体、处理跨域等。同时，为了提高性能，可能会使用缓存、CDN 等技术。</p><h3 id="8、谈谈你对-Koa-和-Express-的理解，二者的区别是"><a href="#8、谈谈你对-Koa-和-Express-的理解，二者的区别是" class="headerlink" title="8、谈谈你对 Koa 和 Express 的理解，二者的区别是?"></a>8、谈谈你对 Koa 和 Express 的理解，二者的区别是?</h3><p>Koa 和 Express 都是 Node.js 的 Web 框架，用于构建 Web 应用程序。它们的主要区别在于它们的设计哲学和实现方式。Express 是一个功能丰富的框架，提供了大量的中间件和插件，可以快速构建 Web 应用程序。而 Koa 的设计哲学是更加轻量级和模块化，它提供了更少的中间件和插件，但是可以通过自定义中间件来实现更加灵活的功能。此外，Koa 使用了 ES6 的 async/await 特性来处理异步操作，使得代码更加简洁易懂。</p><h3 id="9、谈谈对-egg-和-nest-js-的理解，二者的区别是"><a href="#9、谈谈对-egg-和-nest-js-的理解，二者的区别是" class="headerlink" title="9、谈谈对 egg 和 nest.js 的理解，二者的区别是?"></a>9、谈谈对 egg 和 nest.js 的理解，二者的区别是?</h3><p>Egg 和 Nest.js 都是基于 Node.js 的 Web 框架，但是 Egg 是基于 Express 的，而 Nest.js 则是基于 Express 或 Fastify 的。Egg 更加适合于大型企业级应用的开发，提供了插件机制和约定大于配置的思想，可以快速搭建出高可用、高性能的 Web 应用。Nest.js 则更加注重代码的模块化和可维护性，提供了依赖注入和面向切面编程等特性，可以让开发者更加方便地编写可测试、可扩展的应用。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 chatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023面试题前端三剑客遇上chatGPT</title>
      <link href="/post/230702.html"/>
      <url>/post/230702.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端高频面试题-2023版"><a href="#前端高频面试题-2023版" class="headerlink" title="前端高频面试题 - 2023版"></a>前端高频面试题 - 2023版</h1><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML + CSS"></a>HTML + CSS</h2><h4 id="1-、什么是-BFC-如何触发-有何特点-如何解决-margin”塌陷”"><a href="#1-、什么是-BFC-如何触发-有何特点-如何解决-margin”塌陷”" class="headerlink" title="1 、什么是 BFC ?如何触发? 有何特点? 如何解决 margin”塌陷”?"></a>1 、什么是 BFC ?如何触发? 有何特点? 如何解决 margin”塌陷”?</h4><p>BFC是块级格式化上下文的缩写，是一种页面渲染的方式。</p><p>BFC可以理解为一个独立的渲染区域，其中的元素布局不会影响到外部元素。</p><p>BFC的触发条件包括：根元素、浮动元素、绝对定位元素、display属性为inline-block、table-cell、table-caption、flex、grid等元素，以及overflow属性不为visible的元素。</p><p>BFC的特点包括：可以防止margin塌陷、可以清除浮动、可以自适应两栏布局等。</p><p>解决margin塌陷的方法包括：将元素放入一个新的BFC中、使用padding代替margin、使用border代替margin等。</p><h3 id="2、CSS-如何处理溢出-说一下-overflow-不同值的区别"><a href="#2、CSS-如何处理溢出-说一下-overflow-不同值的区别" class="headerlink" title="2、CSS 如何处理溢出? 说一下 overflow 不同值的区别"></a>2、CSS 如何处理溢出? 说一下 overflow 不同值的区别</h3><p>CSS如何处理溢出：</p><p>CSS中可以使用overflow属性来处理溢出。当一个元素的内容超出了其容器的大小时，overflow属性可以控制溢出内容的显示方式。</p><p>overflow不同值的区别：</p><ol><li><p>visible：默认值，不会裁剪内容，溢出的内容会显示在容器外部。</p></li><li><p>hidden：裁剪溢出的内容，不显示在容器外部。</p></li><li><p>scroll：显示滚动条，可以滚动查看溢出的内容。</p></li><li><p>auto：自动显示滚动条，只有当内容溢出时才会显示滚动条。</p></li><li><p>inherit：继承父元素的overflow属性值。</p></li></ol><p>总之，overflow属性可以控制元素内容的溢出方式，根据实际需求选择不同的值来达到最佳效果。</p><h3 id="3、三栏布局有什么实现方式"><a href="#3、三栏布局有什么实现方式" class="headerlink" title="3、三栏布局有什么实现方式?"></a>3、三栏布局有什么实现方式?</h3><p>三栏布局有多种实现方式，以下是其中几种：</p><ol><li><p>浮动布局：将左右两栏浮动，中间栏设置 margin 或 padding，需要注意清除浮动。</p></li><li><p>绝对定位布局：将左右两栏绝对定位，中间栏设置 margin 或 padding，需要注意父元素设置相对定位。</p></li><li><p>flex 布局：将父元素设置为 flex 容器，左右两栏设置为固定宽度，中间栏设置为 flex-grow: 1。</p></li><li><p>grid 布局：将父元素设置为 grid 容器，左右两栏设置为固定宽度，中间栏设置为 grid-column: 2 / -2。</p></li></ol><p>以上是常见的三栏布局实现方式，具体选择哪种方式取决于具体需求和兼容性要求。</p><h3 id="4、css-calc-属性作用是什么-主要用于解决什么问题"><a href="#4、css-calc-属性作用是什么-主要用于解决什么问题" class="headerlink" title="4、css calc 属性作用是什么? 主要用于解决什么问题?"></a>4、css calc 属性作用是什么? 主要用于解决什么问题?</h3><p>CSS calc属性可以让我们在CSS中使用数学表达式来计算属性值，从而更加灵活地控制布局。它主要用于解决一些复杂布局的问题，例如在响应式设计中，我们需要根据屏幕宽度来计算元素的宽度，或者在实现等高布局时，我们需要计算元素的高度以保证它们的高度相等。使用calc属性可以让我们更加方便地实现这些复杂的布局需求。</p><h3 id="5、有一个固定长宽div，怎么实现在屏幕上垂直水平居中"><a href="#5、有一个固定长宽div，怎么实现在屏幕上垂直水平居中" class="headerlink" title="5、有一个固定长宽div，怎么实现在屏幕上垂直水平居中"></a>5、有一个固定长宽div，怎么实现在屏幕上垂直水平居中</h3><p>这是一个常见的前端面试题，解决方法如下：</p><ol><li>使用flex布局</li></ol><p>将父元素设置为flex布局，然后使用justify-content和align-items属性分别设置水平和垂直居中。</p><ol><li>使用绝对定位</li></ol><p>将父元素设置为相对定位，然后将子元素设置为绝对定位，并使用top、left、bottom、right属性分别设置距离父元素四个方向的距离为50%。同时，使用transform属性将子元素向上向左移动自身宽高的一半。translate(-50%, -50%);</p><ol><li>使用grid布局</li></ol><p>将父元素设置为grid布局，然后使用place-items属性分别设置水平和垂直居中。</p><h3 id="6、描述一下渐进增强-progressive-enhancement-和优雅降级-graceful-degradation"><a href="#6、描述一下渐进增强-progressive-enhancement-和优雅降级-graceful-degradation" class="headerlink" title="6、描述一下渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation)"></a>6、描述一下渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation)</h3><p>渐进增强是一种设计理念，它强调在开发网站或应用程序时，应该首先关注基本功能和核心内容，然后逐步添加更高级的功能和增强效果，以确保在不同设备和浏览器上都能够提供最基本的用户体验。</p><p>优雅降级是一种设计理念，它强调在开发网站或应用程序时，应该首先考虑最高级别的功能和效果，然后逐步降低到更基本的功能和效果，以确保在旧版本的浏览器或设备上也能够提供相对较好的用户体验。这种方法通常需要使用特定的技术和代码，以确保在不支持某些功能或效果的浏览器上也能够正常运行。</p><h3 id="7、iframe-有哪些优点-哪些缺点-用它来解决过什么问题"><a href="#7、iframe-有哪些优点-哪些缺点-用它来解决过什么问题" class="headerlink" title="7、iframe 有哪些优点? 哪些缺点? 用它来解决过什么问题?"></a>7、iframe 有哪些优点? 哪些缺点? 用它来解决过什么问题?</h3><p>Iframe是一种HTML标签，它可以在一个网页中嵌入另一个网页。它的优点包括：</p><ol><li><p>可以将一个大的网页分成多个小的网页进行加载，从而提高网页的加载速度和性能。</p></li><li><p>可以实现跨域通信，使得不同域名下的网页可以进行数据交互。</p></li><li><p>可以实现网页的动态加载，使得网页内容可以根据用户的操作进行实时更新。</p></li></ol><p>Iframe的缺点包括：</p><ol><li><p>可能会导致网页的加载速度变慢，因为每个Iframe都需要单独加载。</p></li><li><p>可能会导致网页的安全性问题，因为Iframe可以用于跨域攻击。</p></li><li><p>可能会导致网页的可访问性问题，因为Iframe中的内容可能无法被搜索引擎索引。</p></li></ol><p>Iframe可以用来解决一些问题，例如：</p><ol><li><p>可以用来实现网页的异步加载，从而提高网页的性能和用户体验。</p></li><li><p>可以用来实现网页的动态更新，从而使得网页内容可以根据用户的操作进行实时更新。</p></li><li><p>可以用来实现网页的跨域通信，从而使得不同域名下的网页可以进行数据交互。</p></li></ol><h3 id="8、Google-Chrome-如何支持大小小于-12px-的文字"><a href="#8、Google-Chrome-如何支持大小小于-12px-的文字" class="headerlink" title="8、Google Chrome 如何支持大小小于 12px 的文字?"></a>8、Google Chrome 如何支持大小小于 12px 的文字?</h3><p>Google Chrome 支持大小小于 12px 的文字的方法是使用 CSS 属性 <code>-webkit-text-size-adjust</code>，将其设置为 <code>none</code>，即可禁用 Chrome 的默认文本大小调整。这样可以确保小字体的清晰度和可读性。但需要注意的是，这个属性只在 WebKit 内核的浏览器中有效，其他浏览器需要使用不同的方法来支持小字体。</p><h3 id="9、描述一下-css-盒子模型"><a href="#9、描述一下-css-盒子模型" class="headerlink" title="9、描述一下 css 盒子模型"></a>9、描述一下 css 盒子模型</h3><p>CSS 盒子模型是指在网页中，每个 HTML 元素都被看作是一个矩形的盒子，这个盒子包含了元素的内容、内边距、边框和外边距。盒子模型可以通过 CSS 的属性来控制元素的大小、边距、内边距和边框等样式。</p><p>盒子模型分为两种：标准盒子模型和怪异盒子模型。</p><p>标准盒子模型的宽度和高度只包括内容的宽度和高度，</p><p>而怪异盒子模型的宽度和高度包括了内容、内边距和边框的宽度和高度。</p><h3 id="10、HTML5的特性有哪些"><a href="#10、HTML5的特性有哪些" class="headerlink" title="10、HTML5的特性有哪些?"></a>10、HTML5的特性有哪些?</h3><p>HTML5的新特性包括但不限于以下几个方面：</p><ol><li><p>语义化标签：HTML5新增了一些语义化标签，如header、footer、nav、article、section等，使得页面结构更加清晰明了。</p></li><li><p>视频和音频：HTML5支持直接在网页中播放视频和音频，不需要使用Flash等插件。</p></li><li><p>Canvas绘图：HTML5的Canvas标签可以用来绘制2D图形和动画效果，使得网页的交互性更加丰富。</p></li><li><p>本地存储：HTML5提供了localStorage和sessionStorage两种本地存储方式，可以在浏览器端存储数据，方便离线使用和数据传输。</p></li><li><p>Web Workers：HTML5的Web Workers可以在后台运行JavaScript代码，提高了网页的性能和响应速度。</p></li><li><p>Web Socket：HTML5的Web Socket可以实现浏览器和服务器之间的实时通信，使得网页的交互性更加强大。</p></li><li><p>Geolocation：HTML5的Geolocation可以获取用户的地理位置信息，方便网页根据用户位置提供更加个性化的服务。</p></li><li><p>表单控件：HTML5新增了一些表单控件，如date、time、email、url等，使得表单的输入更加方便和准确。</p></li></ol><p>总之，HTML5的新特性使得网页的交互性、性能和用户体验都得到了很大的提升。</p><h3 id="11、CSS3-的特性有哪些"><a href="#11、CSS3-的特性有哪些" class="headerlink" title="11、CSS3 的特性有哪些?"></a>11、CSS3 的特性有哪些?</h3><p>CSS3 的特性包括但不限于以下几点：</p><ol><li>新的选择器，如属性选择器、伪类选择器、伪元素选择器等；</li><li>盒子模型的改进，包括盒子阴影、圆角、边框图片、背景图片等；</li><li>文字效果的增强，如文字阴影、文字渐变、文字描边等；</li><li>变形效果，如旋转、缩放、倾斜、移动等；</li><li>过渡和动画效果，如渐变、旋转、缩放、移动等；</li><li>媒体查询，可以根据设备的不同来应用不同的样式；</li><li>弹性盒子布局，可以更方便地实现自适应布局；</li><li>网格布局，可以更方便地实现复杂的网页布局。</li></ol><p>这些特性的出现，大大提高了 CSS 的灵活性和可扩展性，使得前端开发更加高效和便捷。</p><h3 id="12、如何实现水平居中"><a href="#12、如何实现水平居中" class="headerlink" title="12、如何实现水平居中?"></a>12、如何实现水平居中?</h3><p>有多种方法可以实现水平居中，以下是几种常见的方式：</p><ol><li><p>使用文本对齐（text-align）属性：对于块级元素，将其父元素的text-align属性设置为”center”可以实现水平居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用margin属性：将要居中的元素的左右外边距（margin-left和margin-right）设置为”auto”，可以使其在父元素中水平居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Flexbox布局：将父元素的display属性设置为”flex”，并且设置justify-content属性为”center”，可以使所有子元素在父元素中水平居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Grid布局：将父元素的display属性设置为”grid”，并使用grid-template-columns属性设置列的宽度为自动和1fr，可以使子元素自动居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: auto <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这些方法适用于不同的布局需求和场景，你可以根据具体的情况选择最合适的方法来实现水平居中效果。</p><h3 id="13、如何实现垂直居中"><a href="#13、如何实现垂直居中" class="headerlink" title="13、如何实现垂直居中?"></a>13、如何实现垂直居中?</h3><p>实现垂直居中比水平居中稍微复杂一些，以下是几种常见的方法：</p><ol><li><p>使用Flexbox布局：将父元素的display属性设置为”flex”，并设置align-items属性为”center”，可以使所有子元素在父元素中垂直居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用绝对定位和transform属性：将要居中的元素的position属性设置为”absolute”，然后将top和left属性设置为50%，并且使用transform属性将元素向上移动自身高度的一半。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用表格布局：将父元素的display属性设置为”table”，并将子元素的display属性设置为”table-cell”和vertical-align属性设置为”middle”，可以实现垂直居中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123; <span class="attribute">display</span>: table-cell; <span class="attribute">vertical-align</span>: middle;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这些方法可以根据具体的布局需求和场景进行选择和调整。注意，有时候垂直居中可能会受到其他因素的影响，如父元素高度、子元素高度等，请确保相关的元素和属性已经设置合适。</p><h3 id="14、如何实现双圣杯布局"><a href="#14、如何实现双圣杯布局" class="headerlink" title="14、如何实现双圣杯布局?"></a>14、如何实现双圣杯布局?</h3><p>双圣杯布局是一种常见的三栏布局，其中两个侧边栏宽度固定，而中间的主内容栏宽度自适应。以下是一种实现双圣杯布局的方法：</p><p>HTML结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左侧边栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 右侧边栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>; <span class="comment">/* 左侧边栏宽度 */</span></span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">200px</span>; <span class="comment">/* 右侧边栏宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-content</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="comment">/* 主内容自适应宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-sidebar</span>, <span class="selector-class">.right-sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 左右侧边栏固定宽度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，使用flex布局将父容器（<code>.container</code>）设置为display: flex，并设置左右侧边栏（<code>.left-sidebar</code>和<code>.right-sidebar</code>）的固定宽度。中间的主内容栏（<code>.main-content</code>）利用<code>flex-grow: 1</code>使其宽度自适应填充剩余空间。</p><p>可以根据具体的需求调整容器宽度、侧边栏宽度和样式。此方法可适用于大多数现代浏览器，并且在响应式设计中也具备一定的灵活性。</p><h3 id="15、CSS中选择器的优先级"><a href="#15、CSS中选择器的优先级" class="headerlink" title="15、CSS中选择器的优先级?"></a>15、CSS中选择器的优先级?</h3><p>优先级的顺序可以简单概括为：内联样式 &gt; ID选择器 &gt; 类选择器/伪类选择器/属性选择器 &gt; 元素选择器/伪元素选择器 &gt; 通用选择器/子选择器/相邻兄弟选择器。</p><h3 id="16、CSS-权重如何计算"><a href="#16、CSS-权重如何计算" class="headerlink" title="16、CSS 权重如何计算?"></a>16、CSS 权重如何计算?</h3><p>CSS选择器的优先级是由权重来计算的。权重是一个数值，用于确定每个选择器在应用样式时的优先级顺序。CSS权重计算的规则如下：</p><ol><li><p>内联样式的权重为1000，它具有最高优先级。</p></li><li><p>ID选择器的权重为100，它比类选择器和属性选择器的权重更高。</p></li><li><p>类选择器、属性选择器和伪类选择器的权重都为10。</p></li><li><p>元素选择器和伪元素选择器的权重为1。</p></li></ol><h3 id="17、HTML5-input-元素-type-属性有哪些"><a href="#17、HTML5-input-元素-type-属性有哪些" class="headerlink" title="17、HTML5 input 元素 type 属性有哪些?"></a>17、HTML5 input 元素 type 属性有哪些?</h3><p>HTML5的<code>input</code>元素的<code>type</code>属性有以下常见的取值：</p><ol><li><p><code>text</code>：用于输入纯文本，默认类型。</p></li><li><p><code>password</code>：用于输入密码，输入内容会以圆点或星号进行屏蔽。</p></li><li><p><code>number</code>：用于输入数值。</p></li><li><p><code>email</code>：用于输入电子邮件地址，浏览器会对输入进行验证。</p></li><li><p><code>url</code>：用于输入URL地址，浏览器会对输入进行验证。</p></li><li><p><code>tel</code>：用于输入电话号码。</p></li><li><p><code>date</code>：用于输入日期。</p></li><li><p><code>time</code>：用于输入时间。</p></li><li><p><code>datetime-local</code>：用于输入日期和时间。</p></li><li><p><code>month</code>：用于输入年月。</p></li><li><p><code>week</code>：用于输入年周。</p></li><li><p><code>search</code>：用于输入搜索关键词。</p></li><li><p><code>color</code>：用于选择颜色。</p></li><li><p><code>range</code>：用于选择范围，比如音量大小。</p></li><li><p><code>file</code>：用于上传文件。</p></li></ol><p>除了以上列出的常见类型，HTML5的<code>input</code>元素还支持其他类型，如<code>checkbox</code>、<code>radio</code>、<code>submit</code>、<code>reset</code>等，用于特定的输入和表单交互需求。</p><h3 id="18、CSS-中哪些属性可继承，哪些不可以？"><a href="#18、CSS-中哪些属性可继承，哪些不可以？" class="headerlink" title="18、CSS 中哪些属性可继承，哪些不可以？"></a>18、CSS 中哪些属性可继承，哪些不可以？</h3><p>可继承属性：</p><ul><li><code>font</code>：包括<code>font-family</code>、<code>font-size</code>、<code>font-weight</code>等字体相关属性。</li><li><code>color</code>：文本颜色。</li><li><code>text</code>：包括<code>text-align</code>、<code>text-decoration</code>等文本相关属性。</li><li><code>line-height</code>：行高。</li><li><code>white-space</code>：空白处理。</li><li><code>cursor</code>：鼠标指针样式。</li><li><code>list-style</code>：列表样式。</li></ul><p>不可继承属性：</p><ul><li><code>margin</code>：外边距。</li><li><code>padding</code>：内边距。</li><li><code>border</code>：边框样式。</li><li><code>background</code>：背景样式。</li><li><code>width</code>、<code>height</code>：宽度和高度。</li><li><code>position</code>：定位方式。</li><li><code>display</code>：显示方式。</li></ul><p>需要注意的是，并非所有属性都严格分为可继承和不可继承两类。有一些属性的可继承性取决于具体的情况，例如<code>opacity</code>属性是不可继承的，但是透明度的效果会影响其子元素。</p><p>此外，通过使用<code>inherit</code>关键字，可以显式地指定某个属性的继承行为，即使它通常是不可继承的。</p><p>需要根据具体属性的特性来确定其是否可继承，可以参考CSS属性的文档以了解更详细的继承规则。</p><h3 id="19、CSS-单位中-px、em-和-rem-的区别-配合-font-size-如何计算-移动端适配方案"><a href="#19、CSS-单位中-px、em-和-rem-的区别-配合-font-size-如何计算-移动端适配方案" class="headerlink" title="19、CSS 单位中 px、em 和 rem 的区别? 配合 font-size 如何计算? (移动端适配方案)"></a>19、CSS 单位中 px、em 和 rem 的区别? 配合 font-size 如何计算? (移动端适配方案)</h3><p>在CSS中，px、em和rem是三种不同的单位。px是像素单位，它是相对于屏幕分辨率而言的，而em和rem是相对单位，它们是相对于父元素的字体大小而言的。em是相对于父元素的字体大小，而rem是相对于根元素的字体大小。</p><p>在移动端适配方案中，我们通常使用rem作为单位，因为它可以根据根元素的字体大小进行缩放，从而实现适配不同的屏幕尺寸。我们可以通过设置根元素的字体大小来控制整个页面的缩放比例，通常建议将根元素的字体大小设置为16px，这样1rem就等于16px。</p><p>在计算font-size时，我们可以使用rem作为单位，例如，如果我们想将一个元素的字体大小设置为20px，我们可以将其设置为1.25rem（20/16=1.25）。这样，无论在任何屏幕尺寸下，该元素的字体大小都将按照相同的比例进行缩放，从而实现适配不同的设备。</p><h3 id="20、如何画一条-0-5px-的线？"><a href="#20、如何画一条-0-5px-的线？" class="headerlink" title="20、如何画一条 0.5px 的线？"></a>20、如何画一条 0.5px 的线？</h3><p>在普通的屏幕上，无法直接画出 0.5px 的线，因为屏幕的物理像素只能显示整数像素。但是在 Retina 屏幕上，可以使用 scale 属性将 1px 的线缩小一半来模拟 0.5px 的线。在 CSS 中，可以使用 transform: scale(0.5) 和 -webkit-transform: scale(0.5) 来实现。在移动端适配方案中，可以使用 rem 单位来进行适配，根据不同的屏幕宽度设置不同的根字体大小，从而实现自适应布局。</p><h3 id="21、隐藏一个元素有哪些方法-display-none-与-visibility-hidden-与-opacity-0-之间的区别"><a href="#21、隐藏一个元素有哪些方法-display-none-与-visibility-hidden-与-opacity-0-之间的区别" class="headerlink" title="21、隐藏一个元素有哪些方法? display: none 与 visibility: hidden 与 opacity: 0 之间的区别?"></a>21、隐藏一个元素有哪些方法? display: none 与 visibility: hidden 与 opacity: 0 之间的区别?</h3><ul><li>display: none：完全隐藏元素，不占据空间，无法点击，不会触发任何事件。</li><li>visibility: hidden：元素仍然占据空间，只是不可见，无法点击，但会触发事件。</li><li>opacity: 0：元素仍然占据空间，不可见但可点击，会触发事件。</li></ul><h3 id="22、position-的值有哪些，分别有什么特点"><a href="#22、position-的值有哪些，分别有什么特点" class="headerlink" title="22、position 的值有哪些，分别有什么特点?"></a>22、position 的值有哪些，分别有什么特点?</h3><ol><li><p>static：默认值，元素按照文档流进行排列，不进行定位。</p></li><li><p>relative：相对定位，元素相对于其正常位置进行定位，不会影响其他元素的布局。</p></li><li><p>absolute：绝对定位，元素相对于其最近的已定位祖先元素进行定位，如果没有已定位的祖先元素，则相对于 body 元素进行定位。</p></li><li><p>fixed：固定定位，元素相对于浏览器窗口进行定位，不随页面滚动而移动。</p></li><li><p>sticky：粘性定位，元素在跨越特定阈值前为相对定位，之后为固定定位。</p></li></ol><p>其中，relative、absolute、fixed 三种定位方式可以通过 top、right、bottom、left 属性来指定元素的具体位置。</p><h3 id="23、什么是浮动，浮动会引起什么问题，有何解决方案"><a href="#23、什么是浮动，浮动会引起什么问题，有何解决方案" class="headerlink" title="23、什么是浮动，浮动会引起什么问题，有何解决方案?"></a>23、什么是浮动，浮动会引起什么问题，有何解决方案?</h3><p>浮动是一种 CSS 布局方式，可以让元素脱离文档流并向左或向右浮动。浮动元素会引起父元素高度塌陷，导致布局混乱。解决方案包括清除浮动和使用 flex 布局。清除浮动可以通过在父元素末尾添加一个空的 div 元素并设置 clear 属性，或者使用伪元素 ::after 清除浮动。使用 flex 布局可以避免浮动带来的问题，同时也更加灵活和方便。</p><h3 id="24、line-height-和-height-的区别"><a href="#24、line-height-和-height-的区别" class="headerlink" title="24、line-height 和 height 的区别"></a>24、line-height 和 height 的区别</h3><p>line-height 是指行高，即行与行之间的距离，而 height 是指元素的高度。line-height 可以控制行内元素的垂直居中，而 height 只能控制元素的高度。当 line-height 大于 height 时，行内元素会在行框中垂直居中。</p><h3 id="25、设置一个元素的背景颜色，背景颜色会填充哪些区域"><a href="#25、设置一个元素的背景颜色，背景颜色会填充哪些区域" class="headerlink" title="25、设置一个元素的背景颜色，背景颜色会填充哪些区域?"></a>25、设置一个元素的背景颜色，背景颜色会填充哪些区域?</h3><p>设置一个元素的背景颜色，背景颜色会填充该元素的内容区域、内边距区域和边框区域，但不包括外边距区域。如果元素设置了透明度，背景颜色也会受到透明度的影响。</p><h2 id="26、inline-block、inline-和-block-的区别-为什么-img-是-inline-还可以设置宽高？"><a href="#26、inline-block、inline-和-block-的区别-为什么-img-是-inline-还可以设置宽高？" class="headerlink" title="26、inline-block、inline 和 block 的区别;为什么 img 是 inline 还可以设置宽高？"></a>26、inline-block、inline 和 block 的区别;为什么 img 是 inline 还可以设置宽高？</h2><p>inline-block、inline 和 block 是 CSS 中常见的三种盒子模型，它们的主要区别在于它们的布局方式和元素的排列方式。block 元素会独占一行，宽度默认为父元素的宽度，高度可以自动调整或者手动设置；inline 元素不会独占一行，宽度由内容撑开，高度由字体大小决定；inline-block 元素既可以像 inline 元素一样排列在一行，又可以像 block 元素一样设置宽高。</p><p>img 元素默认是 inline 元素，但是它可以设置宽高是因为它是替换元素，它的宽高是由图片本身的大小决定的，而不是由内容撑开。因此，即使设置了宽高，它也不会影响到其他元素的排列。</p><h3 id="27、什么是重绘-什么是回流-如何减少-如何让文档脱离文档流"><a href="#27、什么是重绘-什么是回流-如何减少-如何让文档脱离文档流" class="headerlink" title="27、什么是重绘? 什么是回流? 如何减少?如何让文档脱离文档流?"></a>27、什么是重绘? 什么是回流? 如何减少?如何让文档脱离文档流?</h3><p>重绘是指当元素样式改变时，浏览器需要重新绘制元素的内容，但是元素的几何属性并未改变。回流是指当元素的几何属性发生改变时，浏览器需要重新计算元素的几何属性和位置，并重新绘制元素的内容。</p><p>为了减少重绘和回流，可以采取以下措施：使用 CSS3 的 transform 和 opacity 属性代替 top 和 left 属性；使用 position: absolute 或 fixed 属性代替 float 属性；避免频繁操作样式，可以使用 class 切换代替直接操作样式；使用文档碎片来减少 DOM 操作次数。</p><p>要让文档脱离文档流，可以使用 position: absolute 或 fixed 属性，或者使用 float 属性。这样可以让元素不再占据文档流中的位置，从而避免影响其他元素的布局。</p><h3 id="28、box-sizing-的作用，如何使用"><a href="#28、box-sizing-的作用，如何使用" class="headerlink" title="28、box-sizing 的作用，如何使用?"></a>28、box-sizing 的作用，如何使用?</h3><p>box-sizing是CSS中的一个属性，用于控制元素的盒模型计算方式。默认情况下，元素的宽度和高度只包括内容区域，而不包括边框和内边距。而使用box-sizing属性可以改变这种计算方式，让元素的宽度和高度包括边框和内边距。</p><h3 id="29、如何实现清除浮动？"><a href="#29、如何实现清除浮动？" class="headerlink" title="29、如何实现清除浮动？"></a>29、如何实现清除浮动？</h3><p>清除浮动可以通过以下几种方式实现：</p><ol><li><p>使用空元素清除浮动，即在浮动元素后面添加一个空的块级元素，并设置 clear 属性为 both。</p></li><li><p>使用 overflow 属性清除浮动，即在浮动元素的父元素上设置 overflow 属性为 auto 或 hidden。</p></li><li><p>使用 clearfix 清除浮动，即在浮动元素的父元素上添加 clearfix 类，并在 CSS 中定义 clearfix 类的样式。</p></li><li><p>使用 flexbox 布局清除浮动，即在浮动元素的父元素上设置 display 属性为 flex 或 inline-flex。</p></li></ol><p>以上几种方式都可以有效地清除浮动，具体使用哪种方式取决于具体的情况和需求。</p><h3 id="30、css-动画如何实现"><a href="#30、css-动画如何实现" class="headerlink" title="30、css 动画如何实现"></a>30、css 动画如何实现</h3><p>CSS 动画可以通过以下几种方式实现：</p><ol><li><p>使用 transition 属性，设置需要过渡的属性和过渡时间，当属性值发生变化时，会自动过渡到新的值。</p></li><li><p>使用 keyframes 和 animation 属性，定义动画的关键帧和动画属性，然后将动画应用到元素上。</p></li><li><p>使用 transform 属性，通过改变元素的位置、大小、旋转等属性来实现动画效果。</p></li><li><p>使用 JavaScript 控制元素的样式，通过改变样式属性的值来实现动画效果。</p></li></ol><h3 id="31、如何实现在某个容器中居中的布局？"><a href="#31、如何实现在某个容器中居中的布局？" class="headerlink" title="31、如何实现在某个容器中居中的布局？"></a>31、如何实现在某个容器中居中的布局？</h3><p>要实现在某个容器中居中的布局，可以使用以下方法：</p><ol><li><p>使用 flex 布局，将容器设置为 display: flex;，并使用 justify-content 和 align-items 属性来实现水平和垂直居中。</p></li><li><p>使用绝对定位，将容器设置为 position: absolute;，并使用 top、bottom、left、right 属性来实现居中。</p></li><li><p>使用 margin 属性，将容器的上下左右 margin 设置为 auto，这样容器就会在父容器中水平和垂直居中。</p></li><li><p>使用 transform 属性，将容器设置为 position: absolute;，并使用 translate 属性来实现居中。</p></li></ol><p>以上方法都可以实现在某个容器中居中的布局，具体使用哪种方法取决于具体的情况和需求。</p><h3 id="32、如何改变一个-DOM-元素的字体颜色"><a href="#32、如何改变一个-DOM-元素的字体颜色" class="headerlink" title="32、如何改变一个 DOM 元素的字体颜色?"></a>32、如何改变一个 DOM 元素的字体颜色?</h3><p>可以使用 CSS 的 color 属性来改变一个 DOM 元素的字体颜色，例如：<br>    .element {  color: red;}</p><p>这将把类名为 “element” 的元素的字体颜色改为红色。也可以使用 JavaScript 来动态地改变元素的字体颜色，例如：<br>    const element = document.querySelector(‘.element’);element.style.color = ‘red’;</p><p>这将选中类名为 “element” 的元素并将其字体颜色改为红色。</p><h3 id="33、相对布局和绝对布局，position-relative-和-obsolute"><a href="#33、相对布局和绝对布局，position-relative-和-obsolute" class="headerlink" title="33、相对布局和绝对布局，position:relative 和 obsolute"></a>33、相对布局和绝对布局，position:relative 和 obsolute</h3><p>相对布局和绝对布局是 CSS 中的两种常见布局方式。其中，position:relative 和 position:absolute 是两个常用的 CSS 属性，用于实现相对布局和绝对布局。</p><p>position:relative 属性用于相对定位，它会使元素相对于其正常位置进行定位，但不会使元素脱离文档流。使用 position:relative 属性时，可以通过 top、bottom、left、right 属性来调整元素的位置。</p><p>position:absolute 属性用于绝对定位，它会使元素脱离文档流，并相对于最近的已定位祖先元素进行定位。如果没有已定位的祖先元素，则相对于文档的 body 元素进行定位。使用 position:absolute 属性时，也可以通过 top、bottom、left、right 属性来调整元素的位置。</p><p>相对布局和绝对布局在实际开发中都有广泛的应用，可以用于实现各种复杂的布局效果。</p><h3 id="34、什么是弹性盒子-flex-布局"><a href="#34、什么是弹性盒子-flex-布局" class="headerlink" title="34、什么是弹性盒子 flex 布局?"></a>34、什么是弹性盒子 flex 布局?</h3><p>弹性盒子布局（Flexbox）是一种用于在容器中进行布局的 CSS3 新特性。它通过将容器分配给子元素的空间来对齐和分布它们，从而使响应式设计更加容易。使用 flex 布局，可以轻松地实现水平和垂直居中、等高列布局等常见布局需求。在 flex 布局中，通过设置容器的 display 属性为 flex 或 inline-flex 来启用 flex 布局，然后通过设置容器和子元素的 flex 属性来控制布局。</p><h3 id="35、什么是-rem-布局"><a href="#35、什么是-rem-布局" class="headerlink" title="35、什么是 rem 布局?"></a>35、什么是 rem 布局?</h3><p>rem 是一种相对于根元素（即 html 元素）字体大小的单位，rem 布局是指使用 rem 作为布局单位来实现响应式布局。通过设置根元素的字体大小，可以实现整个页面的缩放，从而适应不同的屏幕尺寸。相比于传统的固定像素布局，rem 布局更加灵活，可以适应不同的设备和屏幕尺寸。</p><h3 id="36、less-和-scss-有什么区别"><a href="#36、less-和-scss-有什么区别" class="headerlink" title="36、less 和 scss 有什么区别?"></a>36、less 和 scss 有什么区别?</h3><p>less 和 scss 都是 CSS 预处理器，它们的主要区别在于语法的不同。less 使用类似 CSS 的语法，而 scss 则使用类似于编程语言的语法。scss 支持大括号、分号和变量，而 less 则不支持。此外，scss 还支持条件语句和循环语句等高级功能，而 less 则不支持。总的来说，scss 更加灵活和强大，但 less 更加简单易学。</p><h2 id="37、-before-和-after-中双冒号和单冒号的区别"><a href="#37、-before-和-after-中双冒号和单冒号的区别" class="headerlink" title="37、::before 和::after 中双冒号和单冒号的区别?"></a>37、::before 和::after 中双冒号和单冒号的区别?</h2><p>::before 和 ::after 是 CSS 伪元素，用于在元素的内容前或后插入内容。双冒号(::)和单冒号(:)都可以用来表示伪元素，但是在 CSS3 中规定，双冒号(::)用于表示伪元素，而单冒号(:)用于表示伪类。在 CSS2 中，双冒号和单冒号都可以用来表示伪元素。因此，为了兼容 CSS2，CSS3 中双冒号(::)和单冒号(:)都可以用来表示伪元素，但是建议使用双冒号(::)来表示伪元素。</p><h3 id="38、CSS3-新增伪类，以及伪元素"><a href="#38、CSS3-新增伪类，以及伪元素" class="headerlink" title="38、CSS3 新增伪类，以及伪元素?"></a>38、CSS3 新增伪类，以及伪元素?</h3><p>CSS3 新增的伪类有：:target、:not、:nth-child、:nth-last-child、:nth-of-type、:nth-last-of-type、:first-child、:last-child、:first-of-type、:last-of-type、:only-child、:only-of-type、:checked、:enabled、:disabled、:read-only、:read-write、:placeholder-shown、:default、:valid、:invalid、:in-range、:out-of-range、:required、:optional、:root、:empty、:fullscreen。</p><p>CSS3 新增的伪元素有：::before、::after、::first-letter、::first-line、::selection、::backdrop、::placeholder、::marker、::spelling-error、::grammar-error。其中，::before 和 ::after 用于在元素的前面或后面插入内容，::first-letter 和 ::first-line 用于选择元素的第一个字母或第一行，::selection 用于选择被用户选中的文本。</p><h3 id="39、响应式布局实现方案"><a href="#39、响应式布局实现方案" class="headerlink" title="39、响应式布局实现方案?"></a>39、响应式布局实现方案?</h3><p>响应式布局实现方案包括：</p><ol><li><p>媒体查询：通过设置不同的 CSS 样式来适应不同的屏幕尺寸和设备类型。</p></li><li><p>弹性网格布局：使用 flexbox 或者 grid 布局来实现弹性的网格布局，使得页面元素能够自适应不同的屏幕尺寸。</p></li><li><p>图片响应式布局：使用 max-width 属性来设置图片的最大宽度，使得图片能够自适应不同的屏幕尺寸。</p></li><li><p>视口单位：使用 vw、vh、vmin、vmax 等视口单位来设置元素的大小和位置，使得页面元素能够根据视口大小自适应。</p></li><li><p>CSS 框架：使用流行的 CSS 框架如 Bootstrap、Foundation 等，这些框架提供了响应式布局的组件和工具，可以快速实现响应式布局。</p></li></ol><h3 id="40、link-标签和-import-标签的区别"><a href="#40、link-标签和-import-标签的区别" class="headerlink" title="40、link 标签和 import 标签的区别?"></a>40、link 标签和 import 标签的区别?</h3><p>link 标签和 import 标签都可以用于引入外部资源，如 CSS 文件或其他 HTML 文件。它们的区别在于：</p><ol><li>link 标签可以引入 CSS 文件和其他资源文件，而 import 标签只能引入 HTML 文件。</li><li>link 标签在页面加载时同时加载，而 import 标签是在页面 DOM 加载完成后才加载。</li><li>link 标签可以通过 rel 属性指定资源文件的关系，如 stylesheet、icon 等，而 import 标签没有这个属性。</li><li>link 标签可以通过 media 属性指定样式表适用的设备类型，而 import 标签没有这个属性。</li></ol><p>因此，如果需要引入 CSS 文件，应该使用 link 标签；如果需要引入 HTML 文件，可以使用 import 标签。</p><h3 id="41、transition-和-animation-的区别"><a href="#41、transition-和-animation-的区别" class="headerlink" title="41、transition 和 animation 的区别?"></a>41、transition 和 animation 的区别?</h3><p>transition 和 animation 都是 CSS3 动画效果的实现方式，但它们有以下区别：</p><ol><li><p>transition 是指在元素从一种样式逐渐变为另一种样式时，添加过渡效果，可以控制过渡的时间、速度、延迟等属性。而 animation 是指通过关键帧来控制元素的动画效果，可以控制动画的播放次数、速度、延迟等属性。</p></li><li><p>transition 只能控制元素从一种状态到另一种状态的过渡效果，而 animation 可以实现更复杂的动画效果，如旋转、缩放、移动等。</p></li><li><p>transition 的触发是通过 CSS 属性的变化来触发的，而 animation 可以通过 JavaScript 控制触发。</p></li><li><p>transition 的兼容性更好，而 animation 在一些老版本的浏览器中可能会出现兼容性问题。</p></li></ol><p>因此，在实现不同的动画效果时，可以根据具体的需求选择使用 transition 或 animation。</p><h3 id="42、说一下块元素、行元素、置换元素"><a href="#42、说一下块元素、行元素、置换元素" class="headerlink" title="42、说一下块元素、行元素、置换元素"></a>42、说一下块元素、行元素、置换元素</h3><p>块元素、行元素和置换元素是 CSS 中常见的元素类型。</p><p>块元素通常用于页面布局，它们会在页面上独占一行，比如 div、p、h1 等。</p><p>行元素通常用于文本排版，它们会在一行内排列，比如 span、a、img 等。</p><p>置换元素是一种特殊的元素，它们的内容不是由文档源代码定义的，而是由浏览器根据元素的标签和属性来创建的。比如 img、input、video 等。</p><p>需要注意的是，CSS 中的 display 属性可以用来改变元素的类型，比如将块元素设置为行元素或置换元素。</p><h3 id="43、多行元素的文本省略号如何实现"><a href="#43、多行元素的文本省略号如何实现" class="headerlink" title="43、多行元素的文本省略号如何实现?"></a>43、多行元素的文本省略号如何实现?</h3><p>可以使用 CSS 属性 <code>text-overflow</code> 来实现多行文本的省略号，但是需要结合 <code>display</code> 和 <code>overflow</code> 属性一起使用。具体实现步骤如下：</p><ol><li>将元素设置为块级元素，可以使用 <code>display: block;</code> 或者 <code>display: inline-block;</code>；</li><li>设置元素的高度，可以使用 <code>height</code> 或者 <code>max-height</code> 属性；</li><li>将元素的文本溢出部分隐藏，可以使用 <code>overflow: hidden;</code>；</li><li>设置文本的省略号，可以使用 <code>text-overflow: ellipsis;</code>。</li></ol><p>需要注意的是，<code>text-overflow</code> 属性只在以下条件下生效：</p><ol><li>元素必须设置 <code>white-space: nowrap;</code>，即文本不能换行；</li><li>元素必须有固定的宽度，不能是自适应宽度；</li><li>元素不能是浮动元素或绝对定位元素。</li></ol><h3 id="44、Doctype-作用-严格模式与混杂模式如何区分-它们有何意义"><a href="#44、Doctype-作用-严格模式与混杂模式如何区分-它们有何意义" class="headerlink" title="44、Doctype 作用? 严格模式与混杂模式如何区分? 它们有何意义?"></a>44、Doctype 作用? 严格模式与混杂模式如何区分? 它们有何意义?</h3><p>Doctype 是文档类型声明，它的作用是告诉浏览器当前 HTML 文档使用的是哪种 HTML 或 XHTML 规范。严格模式和混杂模式是指浏览器解析 HTML 文档时采用的不同的渲染模式。严格模式是指浏览器按照 HTML 或 XHTML 规范的标准解析文档，而混杂模式则是指浏览器采用更宽松的解析方式。严格模式可以避免一些浏览器的兼容性问题，提高页面的渲染速度和性能。</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="1、javascript-的数据类型有哪些"><a href="#1、javascript-的数据类型有哪些" class="headerlink" title="1、javascript 的数据类型有哪些?"></a>1、javascript 的数据类型有哪些?</h3><p>JavaScript 的数据类型包括基本数据类型和引用数据类型。其中基本数据类型包括：数字（Number）、字符串（String）、布尔值（Boolean）、空（Null）、未定义（Undefined）；引用数据类型包括：对象（Object）、数组（Array）、函数（Function）等。</p><h4 id="2、javascript-有哪些引用类型"><a href="#2、javascript-有哪些引用类型" class="headerlink" title="2、javascript 有哪些引用类型?"></a>2、javascript 有哪些引用类型?</h4><ol><li>Object 对象类型</li><li>Array 数组类型</li><li>Date 日期类型</li><li>RegExp 正则表达式类型</li><li>Function 函数类型</li><li>Map、Set、WeakMap、WeakSet 集合类型</li><li>Promise 异步编程类型</li><li>Symbol 唯一标识类型</li></ol><h3 id="3、如何判断-javascript-的数据类型"><a href="#3、如何判断-javascript-的数据类型" class="headerlink" title="3、如何判断 javascript 的数据类型?"></a>3、如何判断 javascript 的数据类型?</h3><p>可以使用 typeof 运算符来判断 JavaScript 的数据类型，它返回一个字符串，表示操作数的数据类型。例如，typeof ‘hello’ 返回 ‘string’，typeof 123 返回 ‘number’，typeof true 返回 ‘boolean’，typeof undefined 返回 ‘undefined’，typeof null 返回 ‘object’，typeof {} 返回 ‘object’，typeof [] 返回 ‘object’，typeof function(){} 返回 ‘function’。需要注意的是，typeof null 返回 ‘object’ 是一个历史遗留问题。</p><h3 id="4、怎么判断两个对象相等-如何判断空对象"><a href="#4、怎么判断两个对象相等-如何判断空对象" class="headerlink" title="4、怎么判断两个对象相等?如何判断空对象?"></a>4、怎么判断两个对象相等?如何判断空对象?</h3><p>判断两个对象相等可以使用 <code>Object.is()</code> 方法，该方法会比较两个值是否相等，包括 <code>NaN</code> 和 <code>+0/-0</code> 的情况。判断空对象可以使用 <code>Object.keys()</code> 方法，该方法会返回对象的所有属性名组成的数组，如果数组长度为 0，则说明该对象为空对象。</p><h3 id="5、0-1-0-2-为什么不等于-0-3-解释原理"><a href="#5、0-1-0-2-为什么不等于-0-3-解释原理" class="headerlink" title="5、0.1 + 0.2 为什么不等于 0.3 ? (解释原理)"></a>5、0.1 + 0.2 为什么不等于 0.3 ? (解释原理)</h3><p>这是因为在 JavaScript 中，数字都是以 IEEE 754 标准的双精度浮点数来表示的。而在这种表示方法中，0.1 和 0.2 都无法被精确表示，它们会被近似为最接近它们的双精度浮点数。因此，0.1 + 0.2 的结果也是一个近似值，而不是精确的 0.3。这个问题可以通过使用 toFixed() 方法来解决，例如 (0.1 + 0.2).toFixed(1) 将返回字符串 “0.3”。</p><h3 id="6、强制类型转换、隐式类型转换分别是什么，列举场景说明"><a href="#6、强制类型转换、隐式类型转换分别是什么，列举场景说明" class="headerlink" title="6、强制类型转换、隐式类型转换分别是什么，列举场景说明."></a>6、强制类型转换、隐式类型转换分别是什么，列举场景说明.</h3><p>强制类型转换是指通过代码强制将一个数据类型转换为另一个数据类型，常见的有 Number()、String()、Boolean() 等函数。</p><p>隐式类型转换是指在代码执行过程中，由 JavaScript 引擎自动将一个数据类型转换为另一个数据类型，常见的有加号运算符、比较运算符等。</p><p>场景举例：</p><ol><li><p>强制类型转换：将字符串转换为数字，可以使用 Number() 函数，例如：Number(‘123’)，结果为 123。</p></li><li><p>隐式类型转换：在使用加号运算符时，如果其中一个操作数为字符串类型，那么另一个操作数也会被转换为字符串类型，例如：’1’ + 2，结果为 ‘12’。</p></li><li><p>强制类型转换：将布尔值转换为数字，可以使用 Number() 函数，例如：Number(true)，结果为 1。</p></li><li><p>隐式类型转换：在使用比较运算符时，如果两个操作数的数据类型不同，JavaScript 引擎会自动将它们转换为同一种数据类型再进行比较，例如：’1’ == 1，结果为 true。</p></li></ol><h3 id="7、创建函数的几种方式"><a href="#7、创建函数的几种方式" class="headerlink" title="7、创建函数的几种方式?"></a>7、创建函数的几种方式?</h3><p>创建函数的几种方式包括：</p><ol><li><p>函数声明：使用 function 关键字声明一个函数，可以在任何地方调用。</p></li><li><p>函数表达式：将一个函数赋值给一个变量或常量，可以通过变量或常量名调用。</p></li><li><p>匿名函数：没有函数名的函数，可以通过变量或常量名调用。</p></li><li><p>箭头函数：ES6 新增的一种函数声明方式，可以简化函数声明的语法，可以通过变量或常量名调用。</p></li><li><p>构造函数：使用 new 关键字创建一个函数，可以通过实例化后的对象调用。</p></li><li><p>方法：将一个函数作为对象的属性，可以通过对象名调用。</p></li><li><p>自执行函数：定义后立即执行的函数，可以通过函数名调用。</p></li></ol><h3 id="8、javascript-创建对象的几种方式"><a href="#8、javascript-创建对象的几种方式" class="headerlink" title="8、javascript 创建对象的几种方式?"></a>8、javascript 创建对象的几种方式?</h3><p>JavaScript 创建对象的几种方式包括：</p><ol><li><p>对象字面量：使用大括号 {} 来创建对象，可以直接在大括号中添加属性和方法。</p></li><li><p>构造函数：使用函数来定义对象的属性和方法，然后使用 new 关键字来创建对象。</p></li><li><p>Object.create() 方法：使用 Object.create() 方法可以创建一个新对象，并将其原型设置为现有对象。</p></li><li><p>ES6 的 class 关键字：使用 class 关键字可以定义一个类，然后使用 new 关键字来创建对象。</p></li><li><p>工厂函数：使用一个函数来创建并返回一个新对象，可以在函数中定义对象的属性和方法。</p></li></ol><p>以上这些方式都可以用来创建对象，每种方式都有其适用的场景和优缺点。</p><h3 id="9、列举宿主对象、内置对象、原生对象并说明其定义。"><a href="#9、列举宿主对象、内置对象、原生对象并说明其定义。" class="headerlink" title="9、列举宿主对象、内置对象、原生对象并说明其定义。"></a>9、列举宿主对象、内置对象、原生对象并说明其定义。</h3><p>宿主对象是指由宿主环境（如浏览器）提供的对象，比如 window、document 等。内置对象是指由 ECMAScript 规范定义的对象，比如 Object、Array、Function 等。原生对象是指由 ECMAScript 规范和宿主环境共同提供的对象，比如 Date、RegExp、DOM 中的 Element 等。</p><p>其中，宿主对象是在宿主环境中定义的，其行为和实现可能因宿主环境而异；内置对象是在 ECMAScript 规范中定义的，其行为和实现在所有 ECMAScript 实现中都是一致的；原生对象则是在 ECMAScript 规范和宿主环境共同定义的，其行为和实现可能因宿主环境而异，但在所有 ECMAScript 实现中都有一致的行为和实现。</p><p>需要注意的是，原生对象和内置对象的概念有时会被混淆。在某些文献中，原生对象也被称为内置对象。但在本题中，我们按照 ECMAScript 规范的定义，将原生对象和内置对象分别列举。</p><h3 id="10、-和-的区别"><a href="#10、-和-的区别" class="headerlink" title="10、===和 ==的区别?"></a>10、===和 ==的区别?</h3><p>===和==的区别在于，===是严格相等，不仅要求值相等，还要求类型相等；而==是相等，只要求值相等，不要求类型相等。例如，1===1和1==1都是true，但是1===’1’是false，而1==’1’是true。因此，在比较时，如果要求值和类型都相等，应该使用===；如果只要求值相等，可以使用==。</p><h3 id="11、null，undefined-的区别"><a href="#11、null，undefined-的区别" class="headerlink" title="11、null，undefined 的区别"></a>11、null，undefined 的区别</h3><p>null 和 undefined 都表示没有值，但是它们的含义略有不同。undefined 表示一个变量未定义或者一个属性不存在，而 null 表示一个变量已经定义但是值为空。在使用时，undefined 通常表示未定义或者缺失，而 null 表示空值或者无效值。</p><h3 id="12、什么情况下会返回-undefined-值"><a href="#12、什么情况下会返回-undefined-值" class="headerlink" title="12、什么情况下会返回 undefined 值?"></a>12、什么情况下会返回 undefined 值?</h3><p>在 JavaScript 中，当一个变量被声明但未被赋值时，它的值为 undefined。此外，如果一个函数没有返回值或者返回语句没有指定返回值，则该函数的返回值为 undefined。还有一种情况是当访问一个对象中不存在的属性时，会返回 undefined。</p><h3 id="13、如何区分数组和对象"><a href="#13、如何区分数组和对象" class="headerlink" title="13、如何区分数组和对象?"></a>13、如何区分数组和对象?</h3><p>在 JavaScript 中，可以通过 typeof 运算符来判断一个变量的类型。当 typeof 运算符作用于一个数组时，会返回字符串 “object”，而作用于一个对象时，会返回字符串 “object”。因此，我们可以通过 Array.isArray() 方法来判断一个变量是否为数组，如果是数组则返回 true，否则返回 false。</p><h3 id="14、多维数组如何降维"><a href="#14、多维数组如何降维" class="headerlink" title="14、多维数组如何降维?"></a>14、多维数组如何降维?</h3><p>在 JavaScript 中，可以使用数组的 flat() 方法将多维数组降维为一维数组。如果需要将多维数组完全降维为一维数组，可以使用 flat() 方法的参数 Infinity。例如，arr.flat(Infinity) 可以将多维数组 arr 降维为一维数组。</p><p>使用数组中的flat()方法可以将一个多维的数组降维；flat(param)方法可以传参指定递归深度；但是flat()方法会忽略空位；</p><p>const arr = [[1, 2], 5, “3”, [“”], 7, “”, 8, 9];</p><p>console.log(arr.flat(Infinity).map((x) =&gt; (x === undefined ? “” : x)));</p><h3 id="15、怎么获取当前日期-年-月-日-时-分-秒"><a href="#15、怎么获取当前日期-年-月-日-时-分-秒" class="headerlink" title="15、怎么获取当前日期 (年-月-日 时:分:秒) ?"></a>15、怎么获取当前日期 (年-月-日 时:分:秒) ?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">可以使用<span class="title class_">JavaScript</span>中的<span class="title class_">Date</span>对象来获取当前日期时间，具体方法如下：</span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">const</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">const</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> date = now.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">const</span> hour = now.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="keyword">const</span> minute = now.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="keyword">const</span> second = now.<span class="title function_">getSeconds</span>();</span><br><span class="line"><span class="keyword">const</span> currentTime = year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + date + <span class="string">&#x27; &#x27;</span> + hour + <span class="string">&#x27;:&#x27;</span> + minute + <span class="string">&#x27;:&#x27;</span> + second;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentTime);</span><br></pre></td></tr></table></figure><p>其中，getYear()方法获取的是当前年份减去1900，因此需要使用getFullYear()方法获取当前年份；getMonth()方法获取的是0-11的月份，因此需要加1；其他方法则直接获取即可。最后将获取到的年月日时分秒拼接成字符串即可。</p><h3 id="16、什么是类数组-伪数组-，如何将其转化为真实的数组？"><a href="#16、什么是类数组-伪数组-，如何将其转化为真实的数组？" class="headerlink" title="16、什么是类数组(伪数组)，如何将其转化为真实的数组？"></a>16、什么是类数组(伪数组)，如何将其转化为真实的数组？</h3><p>类数组是一种类似数组的对象，它具有类似数组的特性，例如可以通过索引访问元素，但它并不是真正的数组，因为它没有数组的方法和属性。将类数组转化为真实的数组可以使用Array.from()方法或者Array.prototype.slice.call()方法，也可以使用ES6的展开运算符(…)。</p><h4 id="17、如何遍历对象的属性"><a href="#17、如何遍历对象的属性" class="headerlink" title="17、如何遍历对象的属性?"></a>17、如何遍历对象的属性?</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123; <span class="comment">// 对象的属性名为 key，属性值为 obj[key] &#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，for…in 循环会遍历对象自身及其原型链上的所有可枚举属性，因此需要使用 hasOwnProperty 方法来判断属性是否为对象自身的属性。</p><h3 id="18、如何给一个按钮绑定两个-onclick-事件"><a href="#18、如何给一个按钮绑定两个-onclick-事件" class="headerlink" title="18、如何给一个按钮绑定两个 onclick 事件?"></a>18、如何给一个按钮绑定两个 onclick 事件?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以使用addEventListener()方法来为按钮绑定多个事件处理函数，而不是使用onclick属性。例如：</span></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 第一个事件处理函数 &#125;); </span></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 第二个事件处理函数 &#125;);</span></span><br></pre></td></tr></table></figure><p>这样，当按钮被点击时，两个事件处理函数都会被执行。</p><h3 id="19、变量提升是什么-与函数提升的区别"><a href="#19、变量提升是什么-与函数提升的区别" class="headerlink" title="19、变量提升是什么?与函数提升的区别?"></a>19、变量提升是什么?与函数提升的区别?</h3><p>变量提升是指在JavaScript代码执行前，变量声明会被提升到作用域的顶部，但是变量的赋值不会被提升。函数提升是指函数声明会被提升到作用域的顶部，可以在函数声明之前调用函数。二者的区别在于变量提升只会提升变量的声明，而函数提升会提升整个函数的声明。</p><h3 id="20、什么是作用域链-如何延长"><a href="#20、什么是作用域链-如何延长" class="headerlink" title="20、什么是作用域链?如何延长?"></a>20、什么是作用域链?如何延长?</h3><p>作用域链是指在当前执行环境中，变量和函数的查找顺序。当访问一个变量时，会先从当前作用域查找，如果没有找到，就会沿着作用域链向上查找，直到找到该变量或者到达全局作用域。作用域链的延长可以通过函数作用域和with语句来实现。函数作用域可以通过在函数内部定义变量来延长作用域链，而with语句可以将一个对象添加到作用域链的前端。</p><h3 id="21、如何实现数组的随机排序"><a href="#21、如何实现数组的随机排序" class="headerlink" title="21、如何实现数组的随机排序?"></a>21、如何实现数组的随机排序?</h3><p>可以使用数组的 sort 方法结合 Math.random() 实现数组的随机排序。具体实现方式为：对数组进行排序时，每次比较两个元素时，通过 Math.random() 生成一个随机数，根据随机数的大小来决定两个元素的位置交换与否。代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22、dom-节点的-Attribute-和-Property-有何区别"><a href="#22、dom-节点的-Attribute-和-Property-有何区别" class="headerlink" title="22、dom 节点的 Attribute 和 Property 有何区别?"></a>22、dom 节点的 Attribute 和 Property 有何区别?</h3><p>Attribute 是 HTML 元素在文档中的属性，而 Property 是 DOM 元素对象的属性。Attribute 可以看作是 HTML 标签上的属性，而 Property 是 DOM 对象上的属性。Attribute 的值可以是字符串，而 Property 的值可以是任意 JavaScript 类型。在 HTML 中设置 Attribute 的值会随着 HTML 的解析而改变，而 Property 的值可以随时改变。当 Attribute 的值改变时，对应的 Property 的值也会改变，反之亦然。但是，有些 Attribute 和 Property 的值并不相同，比如 input 元素的 value 属性和 value Attribute。</p><h3 id="23、dom-结构操作怎样添加、移除、移动、复制、创建和查找节点"><a href="#23、dom-结构操作怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="23、dom 结构操作怎样添加、移除、移动、复制、创建和查找节点?"></a>23、dom 结构操作怎样添加、移除、移动、复制、创建和查找节点?</h3><p>添加节点可以使用 <code>appendChild()</code>、<code>insertBefore()</code> 和 <code>innerHTML</code> 等方法；</p><p>移除节点可以使用 <code>removeChild()</code> 方法；</p><p>移动节点可以使用 <code>insertBefore()</code> 和 <code>appendChild()</code> 方法；</p><p>复制节点可以使用 <code>cloneNode()</code> 方法；创建节点可以使用 <code>createElement()</code> 方法；</p><p>查找节点可以使用 <code>getElementById()</code>、<code>getElementsByClassName()</code>、<code>getElementsByTagName()</code> 和 <code>querySelector()</code> 等方法。</p><p>在进行 DOM 操作时，需要注意避免频繁操作 DOM，以及避免出现内存泄漏等问题。</p><ol><li>如何添加节点？</li></ol><p>可以使用 <code>appendChild()</code> 方法将一个节点添加到父节点的子节点列表的末尾，也可以使用 <code>insertBefore()</code> 方法将一个节点插入到指定节点之前。</p><ol><li>如何移除节点？</li></ol><p>可以使用 <code>removeChild()</code> 方法从父节点中删除一个子节点。</p><ol><li>如何移动节点？</li></ol><p>可以使用 <code>appendChild()</code> 方法将一个节点从一个父节点移动到另一个父节点。</p><ol><li>如何复制节点？</li></ol><p>可以使用 <code>cloneNode()</code> 方法复制一个节点，如果传入参数 <code>true</code>，则会连同子节点一起复制。</p><ol><li>如何创建节点？</li></ol><p>可以使用 <code>createElement()</code> 方法创建一个元素节点，使用 <code>createTextNode()</code> 方法创建一个文本节点。</p><ol><li>如何查找节点？</li></ol><p>可以使用 <code>getElementById()</code> 方法根据 id 查找节点，使用 <code>getElementsByTagName()</code> 方法根据标签名查找节点，使用 <code>getElementsByClassName()</code> 方法根据类名查找节点，使用 <code>querySelector()</code> 和 <code>querySelectorAll()</code> 方法根据选择器查找节点。</p><h3 id="24、什么是事件冒泡，它是如何工作的-如何阻止事件冒泡"><a href="#24、什么是事件冒泡，它是如何工作的-如何阻止事件冒泡" class="headerlink" title="24、什么是事件冒泡，它是如何工作的?如何阻止事件冒泡?"></a>24、什么是事件冒泡，它是如何工作的?如何阻止事件冒泡?</h3><p>事件冒泡是指当一个元素触发某个事件时，该事件会从该元素开始向上冒泡，直到冒泡到文档根节点为止。在冒泡过程中，如果某个祖先元素也绑定了相同的事件，那么该事件也会被触发。</p><p>阻止事件冒泡可以使用事件对象的 stopPropagation() 方法。调用该方法可以阻止事件继续向上冒泡，从而避免其他元素的事件处理程序被触发。</p><h3 id="25、什么是事件捕获，它是如何工作的"><a href="#25、什么是事件捕获，它是如何工作的" class="headerlink" title="25、什么是事件捕获，它是如何工作的?"></a>25、什么是事件捕获，它是如何工作的?</h3><p>事件捕获是指从文档根节点开始，逐级向下传递事件，直到事件触发目标元素。与事件冒泡相反，事件捕获是从外向内传递事件。在事件捕获阶段，事件从最外层的元素开始传递，直到传递到事件的目标元素。事件捕获阶段是在事件冒泡阶段之前执行的。可以使用 addEventListener() 方法来绑定事件捕获。</p><h3 id="26、如何让事件先冒泡后捕获"><a href="#26、如何让事件先冒泡后捕获" class="headerlink" title="26、如何让事件先冒泡后捕获?"></a>26、如何让事件先冒泡后捕获?</h3><p>在添加事件监听器时，可以通过设置 <code>useCapture</code> 参数为 <code>true</code> 来启用事件捕获。如果设置为 <code>false</code> 或省略该参数，则默认使用事件冒泡。如果需要先进行事件冒泡再进行事件捕获，可以先设置 <code>useCapture</code> 参数为 <code>false</code>，然后在事件处理函数中手动调用 <code>event.stopPropagation()</code> 方法来阻止事件继续冒泡，最后再添加一个使用 <code>true</code> 参数的事件监听器来进行事件捕获。这样就可以实现先冒泡后捕获的效果。</p><h3 id="27、JavaScript-动画和-CSS3-动画有什么区别"><a href="#27、JavaScript-动画和-CSS3-动画有什么区别" class="headerlink" title="27、JavaScript 动画和 CSS3 动画有什么区别?"></a>27、JavaScript 动画和 CSS3 动画有什么区别?</h3><p>JavaScript 动画和 CSS3 动画的区别在于实现方式和性能。JavaScript 动画是通过改变元素的属性值来实现动画效果，而 CSS3 动画是通过 CSS3 的动画属性来实现动画效果。在性能方面，CSS3 动画通常比 JavaScript 动画更流畅，因为它们是由浏览器的 GPU 加速处理的。但是，JavaScript 动画更加灵活，可以实现更复杂的动画效果。</p><h3 id="28、dom-的事件模型"><a href="#28、dom-的事件模型" class="headerlink" title="28、dom 的事件模型 ?"></a>28、dom 的事件模型 ?</h3><p>DOM 的事件模型是一种处理 HTML、XML 或 XHTML 文档中发生的事件的方式。它包括三个阶段：捕获阶段、目标阶段和冒泡阶段。事件从最外层的元素开始捕获，然后到达目标元素，最后冒泡回最外层的元素。在每个阶段，可以注册事件监听器来处理事件。</p><h3 id="29、事件三要素是什么"><a href="#29、事件三要素是什么" class="headerlink" title="29、事件三要素是什么?"></a>29、事件三要素是什么?</h3><p>事件三要素是事件源、事件类型和事件处理程序。事件源是触发事件的对象，事件类型是事件的类型，例如 click、mouseover 等，事件处理程序是事件触发后执行的代码块。</p><h3 id="30、获取元素位置"><a href="#30、获取元素位置" class="headerlink" title="30、获取元素位置?"></a>30、获取元素位置?</h3><p>获取元素位置可以使用 DOM 元素的 <code>getBoundingClientRect()</code> 方法，该方法返回一个包含元素位置信息的对象，包括元素的左、上、右、下、宽度和高度等属性。也可以使用 <code>offsetLeft</code>、<code>offsetTop</code>、<code>offsetWidth</code> 和 <code>offsetHeight</code> 等属性获取元素相对于其定位父元素的位置和尺寸。此外，还可以使用 <code>scrollLeft</code> 和 <code>scrollTop</code> 属性获取元素的滚动位置。</p><h3 id="31、如何绑定事件，如何解除事件"><a href="#31、如何绑定事件，如何解除事件" class="headerlink" title="31、如何绑定事件，如何解除事件?"></a>31、如何绑定事件，如何解除事件?</h3><p>绑定事件可以使用addEventListener()方法，解除事件可以使用removeEventListener()方法。这两个方法都需要传入三个参数：事件类型、事件处理函数、是否在捕获阶段处理事件。</p><h3 id="32、对事件委托的理解"><a href="#32、对事件委托的理解" class="headerlink" title="32、对事件委托的理解"></a>32、对事件委托的理解</h3><p>事件委托是利用事件冒泡机制，将事件绑定在父元素上，通过判断事件源来执行相应的操作。相比直接绑定在子元素上，事件委托具有更好的性能和可维护性，尤其是在大量元素上绑定事件时。</p><h3 id="33、setTimeout-和-setInterval-的区别及用法是什么"><a href="#33、setTimeout-和-setInterval-的区别及用法是什么" class="headerlink" title="33、setTimeout 和 setInterval 的区别及用法是什么?"></a>33、setTimeout 和 setInterval 的区别及用法是什么?</h3><p>setTimeout 和 setInterval 都是 JavaScript 中的定时器函数，用于在指定的时间间隔后执行一次或多次函数。它们的区别在于：</p><ol><li>setTimeout 只会执行一次函数，而 setInterval 会重复执行函数。</li><li>setTimeout 的时间间隔是在函数执行后开始计算的，而 setInterval 的时间间隔是在函数执行前就开始计算的。</li><li>如果在 setTimeout 的时间间隔内再次调用 setTimeout，那么前一个定时器会被清除，而 setInterval 不会受到影响。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout 和 setInterval 的用法如下：</span></span><br><span class="line"><span class="comment">// setTimeout 用法</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval 用法</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> intervalId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，setTimeout 会在 1 秒后执行一次函数，而 setInterval 会每隔 1 秒执行一次函数，直到计数器 count 大于 10，然后清除定时器。</p><p>setTimeout 和 setInterval 都是 JavaScript 中用于延迟执行代码的函数，它们的区别在于：</p><ol><li>setTimeout 只执行一次，而 setInterval 会一直执行，直到被 clearInterval 停止。</li><li>setTimeout 的延迟时间是在代码执行完后开始计算的，而 setInterval 的延迟时间是在每次执行完后开始计算的。</li><li>setTimeout 和 setInterval 的返回值都是一个唯一的标识符，可以用于取消定时器。</li></ol><p>setTimeout 和 setInterval 的用法是：</p><ol><li>setTimeout(fn, delay)：延迟 delay 毫秒后执行一次 fn 函数。</li><li>setInterval(fn, delay)：每隔 delay 毫秒执行一次 fn 函数，直到被 clearInterval 停止。</li></ol><p>在实际应用中，setTimeout 和 setInterval 可以用于实现动画效果、定时刷新数据等功能。需要注意的是，过多的使用定时器可能会导致性能问题，应该谨慎使用。</p><h3 id="34、用-setTimeout-来实现-setInterval"><a href="#34、用-setTimeout-来实现-setInterval" class="headerlink" title="34、用 setTimeout 来实现 setInterval"></a>34、用 setTimeout 来实现 setInterval</h3><p>因为 setInterval 可能会出现一些问题，比如执行时间不准确、连续执行多次等。而使用 setTimeout 可以避免这些问题，因为它可以控制每次执行的时间间隔。具体实现方式是在 setTimeout 的回调函数中再次调用 setTimeout，以达到类似 setInterval 的效果。</p><p>你可以使用递归调用 setTimeout 来模拟 setInterval 的效果。在每次 setTimeout 的回调函数中，再次调用 setTimeout 来实现循环执行。需要注意的是，由于 setTimeout 的执行时间不是精确的，所以在每次回调函数中需要重新计算下一次 setTimeout 的延迟时间，以保证间隔时间的准确性。</p><h3 id="35-、document-write-和-innerHTML-的区别"><a href="#35-、document-write-和-innerHTML-的区别" class="headerlink" title="35 、document.write 和 innerHTML 的区别?"></a>35 、document.write 和 innerHTML 的区别?</h3><p>document.write 和 innerHTML 都可以用来向 HTML 文档中写入内容，但是它们的使用方式和效果不同。document.write 是直接向 HTML 文档中写入内容，如果在文档加载完成后使用 document.write，它会覆盖整个文档。而 innerHTML 是将内容插入到指定元素的内部，不会影响其他元素。此外，innerHTML 还可以用来获取元素的内容，而 document.write 不能。因此，一般情况下，我们更推荐使用 innerHTML 来操作 HTML 元素的内容。</p><p>document.write和innerHTML都可以用于向HTML文档中添加内容，但它们的实现方式不同。document.write是直接向HTML文档中写入内容，而innerHTML是将内容添加到指定元素的内部HTML中。因此，使用document.write会覆盖整个文档，而innerHTML只会影响指定元素的内容。此外，document.write只能在文档加载时使用，而innerHTML可以在任何时候使用。</p><h3 id="36-元素拖动如何实现，原理是怎样"><a href="#36-元素拖动如何实现，原理是怎样" class="headerlink" title="36.元素拖动如何实现，原理是怎样?"></a>36.元素拖动如何实现，原理是怎样?</h3><ol><li><p>监听鼠标按下事件（mousedown），记录鼠标按下时的位置和需要拖动的元素的位置。</p></li><li><p>监听鼠标移动事件（mousemove），计算鼠标移动的距离，并将需要拖动的元素的位置设置为鼠标移动的距离加上鼠标按下时元素的位置。</p></li><li><p>监听鼠标松开事件（mouseup），停止拖动。</p></li></ol><p>原理是通过改变元素的位置来实现拖动效果。在鼠标移动时，计算鼠标移动的距离，并将需要拖动的元素的位置设置为鼠标移动的距离加上鼠标按下时元素的位置，从而实现元素的拖动。</p><h3 id="37、什么是重绘-repaint-什么是回流-reflow-如何最小化重绘和回流"><a href="#37、什么是重绘-repaint-什么是回流-reflow-如何最小化重绘和回流" class="headerlink" title="37、什么是重绘(repaint)? 什么是回流(reflow)? 如何最小化重绘和回流?"></a>37、什么是重绘(repaint)? 什么是回流(reflow)? 如何最小化重绘和回流?</h3><p>重绘是指当元素样式改变，但是不影响其布局时，浏览器会重新绘制该元素，这个过程叫做重绘。而回流是指当元素的尺寸、位置或者内容发生改变时，浏览器会重新计算元素的几何属性和布局，然后再将计算结果绘制出来，这个过程叫做回流。</p><p>为了最小化重绘和回流，我们可以采取以下措施：</p><ol><li><p>避免频繁操作样式，可以将多次操作合并为一次，或者使用 CSS class 来一次性修改样式。</p></li><li><p>将需要多次操作的元素，先脱离文档流，操作完成后再放回文档流，这样可以减少回流次数。</p></li><li><p>使用文档片段(document fragment)来操作 DOM，可以减少回流次数。</p></li><li><p>将复杂的动画效果应用到 position 属性为 fixed 或 absolute 的元素上，这样可以减少其他元素的回流次数。</p></li><li><p>尽量使用 CSS3 动画，避免使用 JavaScript 操作 DOM。</p></li></ol><h3 id="38、延迟加载的方式有哪些"><a href="#38、延迟加载的方式有哪些" class="headerlink" title="38、延迟加载的方式有哪些?"></a>38、延迟加载的方式有哪些?</h3><ol><li><p>懒加载：将页面分块，当用户滚动到某个区域时再加载该区域的内容，常用于图片和视频等资源的加载。</p></li><li><p>预加载：提前加载将要使用的资源，常用于图片和音视频等资源的加载。</p></li><li><p>按需加载：根据用户的操作或需求，动态加载所需的资源，常用于页面交互和异步加载数据等场景。</p></li><li><p>骨架屏：在页面加载过程中，先展示页面结构和基本布局，再逐步加载内容和样式，提高用户体验。</p></li></ol><h3 id="39、垃圾回收机制有哪些-具体怎么如何执行"><a href="#39、垃圾回收机制有哪些-具体怎么如何执行" class="headerlink" title="39、垃圾回收机制有哪些? 具体怎么如何执行?"></a>39、垃圾回收机制有哪些? 具体怎么如何执行?</h3><p>垃圾回收机制主要有标记清除、引用计数和增量标记三种。其中标记清除和引用计数是最常见的两种。标记清除是通过标记不再使用的对象，然后清除它们的内存空间。引用计数是通过记录每个对象被引用的次数，当引用次数为0时，就清除该对象的内存空间。增量标记是在标记清除的基础上，将标记和清除的过程分成多个小步骤，以减少对程序的影响。垃圾回收机制的具体执行方式和实现细节因浏览器而异，但一般都是在程序运行时自动执行的。</p><p>垃圾回收机制是指浏览器自动回收不再使用的内存空间的一种机制。常见的垃圾回收机制有标记清除、引用计数和增量垃圾回收等。其中，标记清除是最常用的垃圾回收机制，它通过标记不再使用的对象，然后回收这些对象所占用的内存空间。引用计数则是通过计算对象被引用的次数来判断是否需要回收。增量垃圾回收则是将垃圾回收的过程分成多个小步骤，以减少垃圾回收对程序的影响。</p><p>具体执行过程是，当浏览器需要回收内存时，会先暂停程序的执行，然后遍历内存中的对象，标记出所有不再使用的对象。接着，浏览器会将这些对象所占用的内存空间释放掉，以便其他对象可以使用。最后，浏览器会恢复程序的执行。</p><p>需要注意的是，垃圾回收机制是自动执行的，程序员无法手动触发。但是，程序员可以通过编写高效的代码和避免内存泄漏等方式来减少垃圾回收的次数，从而提高程序的性能。</p><h3 id="40、什么是内存泄漏"><a href="#40、什么是内存泄漏" class="headerlink" title="40、什么是内存泄漏 ?"></a>40、什么是内存泄漏 ?</h3><p>内存泄漏是指在程序运行过程中，由于某些原因导致已经不再使用的内存空间没有被及时释放，从而造成系统内存的浪费和程序运行速度的下降。</p><h3 id="41、数组遍历的方法有哪些，分别有什么特点，性能如何"><a href="#41、数组遍历的方法有哪些，分别有什么特点，性能如何" class="headerlink" title="41、数组遍历的方法有哪些，分别有什么特点，性能如何 ?"></a>41、数组遍历的方法有哪些，分别有什么特点，性能如何 ?</h3><ol><li>for循环：传统的遍历方式，性能较好，但代码量较大。</li><li>forEach：ES5新增的方法，语法简洁，但无法中途跳出循环。</li><li>map：ES5新增的方法，可以遍历数组并返回一个新的数组，常用于数据转换。</li><li>filter：ES5新增的方法，可以遍历数组并返回符合条件的元素组成的新数组。</li><li>reduce：ES5新增的方法，可以遍历数组并对数组元素进行累加、计算等操作。</li></ol><p>这些方法的性能差异不大，但在特定场景下可能会有所不同。一般来说，for循环的性能最好，而forEach的性能最差。但在实际开发中，应根据具体情况选择最适合的遍历方法。</p><h3 id="42、ES5-和-ES6-的区别，ES6-新增了什么"><a href="#42、ES5-和-ES6-的区别，ES6-新增了什么" class="headerlink" title="42、ES5 和 ES6 的区别，ES6 新增了什么?"></a>42、ES5 和 ES6 的区别，ES6 新增了什么?</h3><p>ES5和ES6是JavaScript的两个版本，ES6是ES5的升级版。ES6新增了许多新特性，包括箭头函数、模板字符串、解构赋值、let和const关键字、类和模块等。这些新特性使得JavaScript更加现代化、易读易写、可维护性更高。同时，ES6也提供了更好的支持异步编程的解决方案，如Promise和async/await。总的来说，ES6的新增特性使得JavaScript更加强大和灵活，让开发者能够更加高效地编写代码。</p><h3 id="43、ES6-的继承和-ES5-的继承有什么区别"><a href="#43、ES6-的继承和-ES5-的继承有什么区别" class="headerlink" title="43、ES6 的继承和 ES5 的继承有什么区别?"></a>43、ES6 的继承和 ES5 的继承有什么区别?</h3><p>ES6 的继承使用了 class 和 extends 关键字，更加简洁易懂，支持 super 关键字调用父类构造函数和方法，同时支持子类重写父类方法。而 ES5 的继承则是通过原型链实现，需要手动设置子类的原型对象指向父类的实例，语法较为繁琐，不够直观。</p><h3 id="44、var、let、const-之间的区别-暂时性死区如何理解"><a href="#44、var、let、const-之间的区别-暂时性死区如何理解" class="headerlink" title="44、var、let、const 之间的区别? 暂时性死区如何理解?"></a>44、var、let、const 之间的区别? 暂时性死区如何理解?</h3><p>暂时性死区是指在 let 或 const 声明变量之前，该变量是不可访问的。这是因为在块级作用域内，let 和 const 声明的变量在声明之前是不存在的，因此访问这些变量会导致 ReferenceError 错误。</p><h3 id="45、Class、extends-是什么，有什么作用"><a href="#45、Class、extends-是什么，有什么作用" class="headerlink" title="45、Class、extends 是什么，有什么作用?"></a>45、Class、extends 是什么，有什么作用?</h3><p>Class 是 ES6 中引入的一种新的语法，用于定义一个类。它可以看作是一个模板，用于创建对象的实例。extends 是 Class 中的一个关键字，用于实现继承。它可以让一个类继承另一个类的属性和方法，从而实现代码的复用和扩展。通过 Class 和 extends，我们可以更加方便地组织和管理代码，提高代码的可读性和可维护性。</p><h3 id="46、什么是-JS-闭包？"><a href="#46、什么是-JS-闭包？" class="headerlink" title="46、什么是 JS 闭包？"></a>46、什么是 JS 闭包？</h3><p>JS闭包是指一个函数能够访问并操作其外部函数作用域中的变量，即使外部函数已经执行完毕并返回。闭包可以用来创建私有变量和函数，以及实现高阶函数等功能。</p><h3 id="47-、说一下类的创建和继承，列举一下你所知道的继承方式"><a href="#47-、说一下类的创建和继承，列举一下你所知道的继承方式" class="headerlink" title="47 、说一下类的创建和继承，列举一下你所知道的继承方式"></a>47 、说一下类的创建和继承，列举一下你所知道的继承方式</h3><p>类的创建和继承是面向对象编程的基础，类是一种抽象的概念，用于描述一类具有相同属性和方法的对象。在 JavaScript 中，类的创建可以使用 class 关键字，继承可以使用 extends 关键字。常见的继承方式有原型链继承、构造函数继承、组合继承、寄生组合继承等。</p><h3 id="48、如何解决异步回调地狱-？"><a href="#48、如何解决异步回调地狱-？" class="headerlink" title="48、如何解决异步回调地狱 ？"></a>48、如何解决异步回调地狱 ？</h3><ol><li><p>使用 Promise：Promise 可以将异步操作转换为链式调用，避免回调嵌套。</p></li><li><p>使用 async/await：async/await 是基于 Promise 的语法糖，可以让异步代码看起来像同步代码，更易于阅读和维护。</p></li><li><p>使用事件发布/订阅模式：通过事件发布/订阅模式，可以将异步操作拆分为多个独立的事件，避免回调嵌套。</p></li><li><p>使用生成器函数：生成器函数可以暂停和恢复代码执行，可以将异步操作拆分为多个独立的步骤，避免回调嵌套。</p></li></ol><h3 id="49、说一下图片的懒加载和预加载"><a href="#49、说一下图片的懒加载和预加载" class="headerlink" title="49、说一下图片的懒加载和预加载"></a>49、说一下图片的懒加载和预加载</h3><p>图片的懒加载是指在页面加载时，只加载可视区域内的图片，当用户滚动页面时再加载其他图片，以提高页面加载速度和用户体验。</p><p>图片的预加载是指在页面加载时，提前加载所有图片，以确保用户在浏览时能够立即看到图片，避免等待加载的时间。预加载可以通过 JavaScript 的 Image 对象或者 CSS 的 background-image 属性来实现。</p><h3 id="50、mouseover-和-mouseenter-的区别"><a href="#50、mouseover-和-mouseenter-的区别" class="headerlink" title="50、mouseover 和 mouseenter 的区别"></a>50、mouseover 和 mouseenter 的区别</h3><p>mouseover 和 mouseenter 都是鼠标事件，但它们的区别在于，mouseover 会在鼠标进入元素和元素内部的子元素时触发，而 mouseenter 只会在鼠标进入元素时触发，不会在进入子元素时触发。此外，mouseenter 和 mouseleave 是成对出现的，而 mouseover 和 mouseout 也是成对出现的。</p><h3 id="51-、new-操作符做了哪些事情？"><a href="#51-、new-操作符做了哪些事情？" class="headerlink" title="51 、new 操作符做了哪些事情？"></a>51 、new 操作符做了哪些事情？</h3><p>new 操作符主要做了以下三件事情：</p><ol><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型指向构造函数的原型对象。</li><li>将构造函数的 this 指向这个空对象，并执行构造函数内部的代码，初始化对象的属性和方法。最后返回这个对象实例。</li></ol><h3 id="52、-改变函数内部-this-指针的指向函数-bind，apply，call-的区别-，内在分别是如何实现的"><a href="#52、-改变函数内部-this-指针的指向函数-bind，apply，call-的区别-，内在分别是如何实现的" class="headerlink" title="52、 改变函数内部 this 指针的指向函数 (bind，apply，call 的区别)，内在分别是如何实现的?"></a>52、 改变函数内部 this 指针的指向函数 (bind，apply，call 的区别)，内在分别是如何实现的?</h3><ol><li>改变函数内部 this 指针的指向函数有哪些？它们之间有什么区别？</li></ol><p>答：改变函数内部 this 指针的指向函数有 bind、apply 和 call。它们的区别在于传参方式不同：bind 是返回一个新函数，需要手动调用；apply 和 call 则是直接调用函数并传入参数，区别在于传参方式不同，apply 接收一个数组作为参数，而 call 则是一个一个传参。</p><ol><li>这些函数内部是如何实现改变 this 指针的？</li></ol><p>答：这些函数内部都是通过改变函数的执行上下文来实现改变 this 指针的。apply 和 call 是直接改变函数的执行上下文，而 bind 是返回一个新函数，新函数的执行上下文被绑定为 bind 的第一个参数。</p><h3 id="53、JS-的各种位置，比如-clientHeight-scrolHeight-offsetHeight-以及-scrolTop-offsetTop-clientTop-的区别"><a href="#53、JS-的各种位置，比如-clientHeight-scrolHeight-offsetHeight-以及-scrolTop-offsetTop-clientTop-的区别" class="headerlink" title="53、JS 的各种位置，比如 clientHeight, scrolHeight, offsetHeight ,以及 scrolTop, offsetTop, clientTop 的区别?"></a>53、JS 的各种位置，比如 clientHeight, scrolHeight, offsetHeight ,以及 scrolTop, offsetTop, clientTop 的区别?</h3><p>clientHeight、clientTop、scrollTop是针对可视区域的属性，而scrollHeight、offsetHeight、offsetTop是针对元素本身的属性。</p><ul><li>clientHeight：元素可视区域的高度，不包含border和滚动条。</li><li>scrollHeight：元素内容的高度，包含溢出部分的高度。</li><li>offsetHeight：元素自身的高度，包含border、padding和滚动条（如果存在）。</li><li>scrollTop：元素滚动条向下滚动的距离。</li><li>offsetTop：元素相对于offsetParent元素的顶部距离。</li><li>clientTop：元素上边框的宽度。</li></ul><p>其中，offsetParent是指离当前元素最近的已定位（position不为static）的祖先元素，如果没有则为body元素。</p><h3 id="54、异步加载JS的方法"><a href="#54、异步加载JS的方法" class="headerlink" title="54、异步加载JS的方法"></a>54、异步加载JS的方法</h3><p>异步加载JS的方法有两种：使用动态创建script标签和使用XMLHttpRequest对象。使用动态创建script标签的方法是在页面中创建一个script标签，然后设置其src属性为要加载的JS文件的URL，最后将该标签添加到页面中。使用XMLHttpRequest对象的方法是创建一个XMLHttpRequest对象，然后使用该对象的open方法打开要加载的JS文件的URL，最后使用该对象的send方法发送请求并接收响应。这两种方法都可以异步加载JS文件，提高页面加载速度和性能。</p><h3 id="55、Ajax-解决浏览器缓存问题"><a href="#55、Ajax-解决浏览器缓存问题" class="headerlink" title="55、Ajax 解决浏览器缓存问题"></a>55、Ajax 解决浏览器缓存问题</h3><p>Ajax 解决浏览器缓存问题的方法有两种：</p><ol><li><p>在 Ajax 请求中添加随机数或时间戳参数，使每次请求的 URL 都不同，从而避免浏览器缓存。</p></li><li><p>在服务器端设置响应头，禁止浏览器缓存 Ajax 请求的响应结果。可以通过设置 Cache-Control、Expires、Pragma 等响应头来实现。</p></li></ol><h3 id="56、节流和防抖"><a href="#56、节流和防抖" class="headerlink" title="56、节流和防抖"></a>56、节流和防抖</h3><p>节流和防抖是两种常用的优化前端性能的方法。节流是指在一定时间内只执行一次函数，防抖是指在一定时间内只执行最后一次函数。它们的作用是减少函数的执行次数，提高页面性能和用户体验。实现节流可以使用定时器和时间戳两种方式，实现防抖可以使用定时器方式。</p><h3 id="57、eval-是做什么的"><a href="#57、eval-是做什么的" class="headerlink" title="57、eval 是做什么的"></a>57、eval 是做什么的</h3><p>eval 是一个 JavaScript 函数，它可以将字符串作为代码来执行。它可以将字符串解析为 JavaScript 代码，并在当前作用域中执行。但是，由于它的不安全性和潜在的性能问题，eval 应该谨慎使用。</p><h3 id="58-、对象深拷贝的简单实现"><a href="#58-、对象深拷贝的简单实现" class="headerlink" title="58 、对象深拷贝的简单实现"></a>58 、对象深拷贝的简单实现</h3><p>当需要复制一个对象时，可以使用对象深拷贝来创建一个新的对象，该对象与原始对象具有相同的属性和值，但是它们是不同的对象，修改一个对象不会影响另一个对象。以下是一种简单的对象深拷贝实现方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      clone[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法使用递归来遍历对象的每个属性，并创建一个新的对象来存储它们的副本。如果属性是一个对象，则递归调用 <code>deepClone</code> 方法来创建该对象的副本。如果属性是一个基本类型，则直接将其复制到新对象中。最后，返回新对象。</p><h3 id="59、实现-JS-中所有对象的深度克隆-包装对象，Date-对象，正则对象"><a href="#59、实现-JS-中所有对象的深度克隆-包装对象，Date-对象，正则对象" class="headerlink" title="59、实现 JS 中所有对象的深度克隆 (包装对象，Date 对象，正则对象)"></a>59、实现 JS 中所有对象的深度克隆 (包装对象，Date 对象，正则对象)</h3><p>当需要对一个对象进行深度克隆时，可以使用递归的方式遍历对象的所有属性，并创建一个新的对象来保存原对象的属性值。对于包装对象、Date 对象和正则对象，可以使用相应的构造函数来创建新的对象。以下是一个简单的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(clone).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    clone[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    clone.<span class="property">length</span> = obj.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(clone);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj.<span class="title function_">getTime</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数首先检查传入的参数是否为 null 或非对象类型，如果是则直接返回该参数。否则，使用 Object.assign() 方法创建一个新的对象，并遍历原对象的所有属性，递归地调用 deepClone() 函数来克隆每个属性的值。对于数组、Date 对象和正则对象，分别使用 Array.from()、new Date() 和 new RegExp() 来创建新的对象。最后返回克隆后的对象。</p><h3 id="60、实现一个-once-函数，传入函数参数只执行一次"><a href="#60、实现一个-once-函数，传入函数参数只执行一次" class="headerlink" title="60、实现一个 once 函数，传入函数参数只执行一次"></a>60、实现一个 once 函数，传入函数参数只执行一次</h3><p>可以通过闭包来实现一个 once 函数，具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">once</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> executed = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!executed) &#123;</span><br><span class="line">      executed = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数接受一个函数参数 <code>fn</code>，并返回一个新的函数。新函数在第一次被调用时会执行 <code>fn</code>，并将 <code>executed</code> 标记为 <code>true</code>，以后再次调用时则不会再执行 <code>fn</code>。</p><h3 id="61、将原生的-ajax-封装成-promise"><a href="#61、将原生的-ajax-封装成-promise" class="headerlink" title="61、将原生的 ajax 封装成 promise"></a>61、将原生的 ajax 封装成 promise</h3><p>可以通过创建一个 Promise 对象，将原生的 ajax 封装成 promise。具体实现方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(xhr.<span class="property">statusText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(xhr.<span class="property">statusText</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用 Promise 的 then 和 catch 方法来处理 ajax 请求的成功和失败了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;https://example.com/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功：&#x27;</span> + response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败：&#x27;</span> + error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="62、JS-监听对象属性的改变"><a href="#62、JS-监听对象属性的改变" class="headerlink" title="62、JS 监听对象属性的改变"></a>62、JS 监听对象属性的改变</h3><p>可以使用 Object.defineProperty() 方法来监听对象属性的改变。该方法接受三个参数：要监听的对象、要监听的属性名和一个描述符对象。描述符对象中需要设置 get 和 set 方法，分别用于获取属性值和设置属性值。在 set 方法中可以添加属性改变时的回调函数，从而实现监听属性改变的功能。</p><h3 id="63、如何实现一个私有变量，用-get-可以访问，不能直接访问"><a href="#63、如何实现一个私有变量，用-get-可以访问，不能直接访问" class="headerlink" title="63、如何实现一个私有变量，用 get 可以访问，不能直接访问"></a>63、如何实现一个私有变量，用 get 可以访问，不能直接访问</h3><p>在 JavaScript 中，可以使用闭包来实现私有变量。具体实现方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> privateVar = <span class="string">&#x27;私有变量&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getPrivateVar</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> privateVar;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">privateVar</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getPrivateVar</span>()); <span class="comment">// 私有变量</span></span><br></pre></td></tr></table></figure><p>在上述代码中，私有变量 <code>privateVar</code> 被定义在构造函数 <code>MyClass</code> 内部，外部无法直接访问。通过在构造函数内部定义一个返回私有变量的方法 <code>getPrivateVar</code>，可以通过调用该方法来访问私有变量。由于该方法是在构造函数内部定义的，因此可以访问到私有变量 <code>privateVar</code>。</p><h3 id="64、怎么控制一次加载一张图片，加载完后再加载下一张"><a href="#64、怎么控制一次加载一张图片，加载完后再加载下一张" class="headerlink" title="64、怎么控制一次加载一张图片，加载完后再加载下一张"></a>64、怎么控制一次加载一张图片，加载完后再加载下一张</h3><p>可以使用递归函数和 Image 对象来实现一次只加载一张图片，等待加载完毕后再加载下一张图片的效果。具体实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImage</span>(<span class="params">urls, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urls.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">loadImage</span>(urls.<span class="title function_">slice</span>(<span class="number">1</span>), callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  img.<span class="property">src</span> = urls[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">loadImage</span>([<span class="string">&#x27;url1&#x27;</span>, <span class="string">&#x27;url2&#x27;</span>, <span class="string">&#x27;url3&#x27;</span>], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有图片加载完毕&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码中，loadImage 函数接受两个参数，第一个参数是一个图片 URL 数组，第二个参数是所有图片加载完毕后的回调函数。在 loadImage 函数内部，首先创建一个 Image 对象，然后将第一个 URL 赋值给它的 src 属性，这样就开始加载第一张图片了。当第一张图片加载完毕后，会触发 img 对象的 onload 事件，这时候判断 urls 数组中是否还有未加载的图片，如果有，则递归调用 loadImage 函数，传入剩余的图片 URL 数组和回调函数；如果没有，则说明所有图片都已经加载完毕，此时调用回调函数即可。</p><h3 id="65、如何在-JavaScript-中实现类似于-sleep-的效果，即暂停一段时间后再执行后续代码？可以给出-ES5-或-ES6-的实现方式。"><a href="#65、如何在-JavaScript-中实现类似于-sleep-的效果，即暂停一段时间后再执行后续代码？可以给出-ES5-或-ES6-的实现方式。" class="headerlink" title="65、如何在 JavaScript 中实现类似于 sleep 的效果，即暂停一段时间后再执行后续代码？可以给出 ES5 或 ES6 的实现方式。"></a>65、如何在 JavaScript 中实现类似于 sleep 的效果，即暂停一段时间后再执行后续代码？可以给出 ES5 或 ES6 的实现方式。</h3><p>可以使用 ES6 的 Promise 和 async/await 来实现 sleep 的效果，具体实现方式如下：</p><p>ES6 Promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 async/await：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - start &lt; ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，ES5 的实现方式会阻塞主线程，不建议在实际项目中使用。建议使用 Promise 或 async/await 的方式来实现。</p><h3 id="66、Function-proto-getPrototypeOf-是什么"><a href="#66、Function-proto-getPrototypeOf-是什么" class="headerlink" title="66、Function.proto(getPrototypeOf)是什么?"></a>66、Function.<em>proto</em>(getPrototypeOf)是什么?</h3><p>Function.prototype 是一个函数对象的原型，它是所有函数对象的祖先，包括自定义函数和内置函数。它定义了所有函数对象都可以访问的属性和方法，比如 call、apply、bind 等。</p><p>而 Object.getPrototypeOf 是一个用于获取对象原型的方法，它返回指定对象的原型。它可以用于获取任何对象的原型，包括函数对象的原型。</p><p>简单来说，Function.prototype 是函数对象的原型，而 Object.getPrototypeOf 则是获取任何对象的原型的方法。</p><h3 id="67、箭头函数中-this-指向"><a href="#67、箭头函数中-this-指向" class="headerlink" title="67、箭头函数中 this 指向"></a>67、箭头函数中 this 指向</h3><p>箭头函数中的 this 指向定义时所在的作用域，而不是调用时的作用域。这意味着箭头函数中的 this 不会被动态绑定，而是被静态绑定。通常情况下，箭头函数中的 this 指向的是其外层函数的 this，或者是全局对象（如果箭头函数没有外层函数）。因此，在箭头函数中使用 this 时需要注意上下文。</p><h3 id="68、-数组常用方法有哪些？"><a href="#68、-数组常用方法有哪些？" class="headerlink" title="68、 数组常用方法有哪些？"></a>68、 数组常用方法有哪些？</h3><p>数组常用方法包括 push、pop、shift、unshift、splice、slice、concat、join、reverse、sort、map、filter、reduce 等。</p><h3 id="69、-数组去重有哪些方法"><a href="#69、-数组去重有哪些方法" class="headerlink" title="69、 数组去重有哪些方法?"></a>69、 数组去重有哪些方法?</h3><ol><li><p>使用 Set 数据结构：将数组转换为 Set，再将 Set 转换为数组即可去重。</p></li><li><p>使用 filter 方法：遍历数组，将每个元素与其后面的元素进行比较，如果不重复则保留，否则过滤掉。</p></li><li><p>使用 reduce 方法：遍历数组，将每个元素与已有的元素进行比较，如果不重复则添加到已有元素中，最后返回已有元素。</p></li><li><p>使用 indexOf 方法：遍历数组，将每个元素与其前面的元素进行比较，如果不重复则保留，否则过滤掉。</p></li><li><p>使用 includes 方法：遍历数组，将每个元素与其前面的元素进行比较，如果不重复则保留，否则过滤掉。</p></li><li><p>使用 Map 数据结构：遍历数组，将每个元素作为 Map 的键，值可以随意设置，如果 Map 中已经存在该键，则说明重复，过滤掉即可。</p></li></ol><h3 id="70、如何去除字符串首尾空格"><a href="#70、如何去除字符串首尾空格" class="headerlink" title="70、如何去除字符串首尾空格"></a>70、如何去除字符串首尾空格</h3><p>可以使用JavaScript中的trim()方法来去除字符串首尾空格。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; hello world &quot;</span>; </span><br><span class="line"><span class="keyword">let</span> trimmedStr = str.<span class="title function_">trim</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimmedStr); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>此外，还可以使用正则表达式来去除字符串中的所有空格，包括首尾空格。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; hello world &quot;</span>; </span><br><span class="line"><span class="keyword">let</span> trimmedStr = str.<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimmedStr); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>其中，正则表达式<code>/^\s+|\s+$/g</code>表示匹配字符串开头的一个或多个空格，或者字符串结尾的一个或多个空格，并将其替换为空字符串。</p><h3 id="71、说说你所知道的-JS-语言特性"><a href="#71、说说你所知道的-JS-语言特性" class="headerlink" title="71、说说你所知道的 JS 语言特性?"></a>71、说说你所知道的 JS 语言特性?</h3><p>JS 语言特性包括但不限于以下几点：</p><ol><li><p>动态类型：JS 是一种动态类型语言，变量的类型可以在运行时改变。</p></li><li><p>闭包：JS 支持闭包，可以在函数内部定义函数，并访问外部函数的变量。</p></li><li><p>原型继承：JS 的继承是通过原型链实现的，每个对象都有一个原型对象，可以从中继承属性和方法。</p></li><li><p>函数是一等公民：JS 中的函数可以像变量一样被传递、赋值和返回。</p></li><li><p>弱类型转换：JS 中的弱类型转换会自动将变量的类型转换为需要的类型。</p></li><li><p>事件驱动编程：JS 支持事件驱动编程，可以通过事件监听和触发来实现异步编程。</p></li><li><p>面向对象编程：JS 支持面向对象编程，可以通过构造函数和原型来创建对象和继承。</p></li><li><p>作用域链：JS 中的作用域是通过作用域链实现的，可以访问外部函数的变量。</p></li><li><p>高阶函数：JS 支持高阶函数，可以将函数作为参数或返回值传递。</p></li><li><p>单线程：JS 是一种单线程语言，只能同时执行一个任务，但可以通过异步编程来实现并发。</p></li></ol><h3 id="72、如何判断一个变量是否为数组？"><a href="#72、如何判断一个变量是否为数组？" class="headerlink" title="72、如何判断一个变量是否为数组？"></a>72、如何判断一个变量是否为数组？</h3><p>可以使用 <code>Array.isArray()</code> 方法来判断一个变量是否为数组。该方法会返回一个布尔值，如果变量是数组则返回 <code>true</code>，否则返回 <code>false</code>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> notArr = <span class="string">&#x27;not an array&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(notArr)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="73、JS-的全排列"><a href="#73、JS-的全排列" class="headerlink" title="73、JS 的全排列"></a>73、JS 的全排列</h3><p>可以使用递归的方式实现数组的全排列，具体步骤如下：</p><ol><li><p>首先判断数组的长度，如果长度为 1，则直接返回该数组。</p></li><li><p>如果数组长度大于 1，则遍历数组，将每个元素与第一个元素交换位置，然后对剩余元素进行全排列。</p></li><li><p>递归调用上一步，直到数组长度为 1。</p></li><li><p>将每次递归得到的结果合并成一个新的数组，即为原数组的全排列。</p></li></ol><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permute</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [arr];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> first = arr[i];</span><br><span class="line">      <span class="keyword">let</span> rest = arr.<span class="title function_">slice</span>(<span class="number">0</span>, i).<span class="title function_">concat</span>(arr.<span class="title function_">slice</span>(i + <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">let</span> innerPermutations = <span class="title function_">permute</span>(rest);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; innerPermutations.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>([first].<span class="title function_">concat</span>(innerPermutations[j]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">permute</span>(arr)); <span class="comment">// [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span></span><br></pre></td></tr></table></figure><h3 id="74、谈谈你所理解的跨域，为什么会有这个问题-如何解决"><a href="#74、谈谈你所理解的跨域，为什么会有这个问题-如何解决" class="headerlink" title="74、谈谈你所理解的跨域，为什么会有这个问题?如何解决?"></a>74、谈谈你所理解的跨域，为什么会有这个问题?如何解决?</h3><p>跨域是指在浏览器中，当前网页所在的域名与目标网页的域名不一致，就会发生跨域问题。这是由于浏览器的同源策略所导致的。同源策略是浏览器的一种安全策略，它限制了一个域下的文档或脚本如何与另一个域进行交互。</p><p>跨域问题可以通过以下几种方式解决：</p><ol><li><p>JSONP：利用 script 标签的跨域特性，通过动态创建 script 标签，将需要获取的数据作为参数传递给服务器，服务器返回一段调用指定函数的 JavaScript 代码，浏览器执行该代码，从而实现跨域请求。</p></li><li><p>CORS：CORS 是一种跨域资源共享的机制，它通过在服务器端设置响应头来允许跨域请求。服务器端设置 Access-Control-Allow-Origin 头部，指定允许跨域的域名，从而实现跨域请求。</p></li><li><p>代理：通过在同一域名下设置代理服务器，将跨域请求转发到目标服务器，从而实现跨域请求。</p></li><li><p>postMessage：通过在不同窗口之间传递消息，从而实现跨域通信。在当前窗口中使用 postMessage 方法向目标窗口发送消息，目标窗口通过监听 message 事件来接收消息。</p></li></ol><h3 id="75、null-undefined-输出什么-null-undefined-呢"><a href="#75、null-undefined-输出什么-null-undefined-呢" class="headerlink" title="75、null == undefined 输出什么? null === undefined 呢?"></a>75、null == undefined 输出什么? null === undefined 呢?</h3><p>null == undefined 输出 true，因为它们在相等比较时被认为是相等的。但是，null === undefined 输出 false，因为它们在严格比较时被认为是不同的类型。</p><h3 id="76、什么是按需加载"><a href="#76、什么是按需加载" class="headerlink" title="76、什么是按需加载"></a>76、什么是按需加载</h3><p>按需加载是一种优化网站性能的技术，它可以根据用户的需求，动态地加载所需的资源，而不是一次性加载所有资源。这样可以减少页面的加载时间和带宽的占用，提高用户的体验。常见的按需加载方式包括懒加载、分块加载、异步加载等。</p><h3 id="77、简单介绍一下-symbol"><a href="#77、简单介绍一下-symbol" class="headerlink" title="77、简单介绍一下 symbol"></a>77、简单介绍一下 symbol</h3><p>Symbol 是 ES6 中新增的一种基本数据类型，它是一种原始数据类型，表示独一无二的值。Symbol 值通过 Symbol 函数生成，可以作为对象属性的标识符使用，避免了属性名冲突的问题。Symbol 值不能与其他类型的值进行运算，也不能被强制转换为其他类型的值。Symbol 值可以用于定义对象的私有属性或方法，以及实现迭代器等功能。</p><h3 id="78、介绍一下-promise，及其底层如何实现"><a href="#78、介绍一下-promise，及其底层如何实现" class="headerlink" title="78、介绍一下 promise，及其底层如何实现"></a>78、介绍一下 promise，及其底层如何实现</h3><p>Promise 是一种用于处理异步操作的对象，它可以让我们更方便地处理异步操作的结果。Promise 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。当 Promise 的状态从 pending 转换为 fulfilled 或 rejected 时，就称为 Promise 被“解决”（resolved）。</p><p>Promise 的基本用法是通过 new Promise() 创建一个 Promise 对象，然后使用 then() 方法来处理 Promise 的结果。then() 方法接收两个参数，第一个参数是 Promise 成功时的回调函数，第二个参数是 Promise 失败时的回调函数。</p><p>Promise 还有一些常见的方法，比如：</p><ul><li>Promise.all()：接收一个 Promise 数组，当所有 Promise 都成功时返回一个包含所有 Promise 结果的数组，否则返回第一个失败的 Promise 的错误信息。</li><li>Promise.race()：接收一个 Promise 数组，当其中任意一个 Promise 成功或失败时，返回该 Promise 的结果。</li><li>Promise.resolve()：将一个值或一个 Promise 对象转换为 Promise 对象。</li><li>Promise.reject()：将一个错误信息转换为 Promise 对象。</li></ul><p>Promise 的底层实现原理是通过回调函数和事件循环来实现的。当 Promise 被创建时，它的状态为 pending，当异步操作完成后，Promise 的状态会被改变为 fulfilled 或 rejected。then() 方法会将回调函数存储起来，当 Promise 被解决时，会依次执行这些回调函数。then() 方法的链式调用是通过返回一个新的 Promise 对象来实现的，这个新的 Promise 对象会在上一个 Promise 对象被解决后被解决。错误处理机制是通过 catch() 方法来实现的，当 Promise 被拒绝时，会依次执行 catch() 方法中的回调函数。</p><h3 id="79、JS-原型链，原型链的顶端是什么-0bject-的原型是什么-0bject-的原型的原型是什么"><a href="#79、JS-原型链，原型链的顶端是什么-0bject-的原型是什么-0bject-的原型的原型是什么" class="headerlink" title="79、JS 原型链，原型链的顶端是什么? 0bject 的原型是什么? 0bject 的原型的原型是什么?"></a>79、JS 原型链，原型链的顶端是什么? 0bject 的原型是什么? 0bject 的原型的原型是什么?</h3><p>JS 原型链是一种对象之间的关系模型，每个对象都有一个指向其原型的内部链接，形成了一个链式结构。当我们访问一个对象的属性时，如果该对象本身没有该属性，JS 引擎会沿着原型链向上查找，直到找到该属性或者到达原型链的顶端。</p><p>原型链的顶端是 Object.prototype，它是所有对象的原型，包括函数对象和普通对象。Object.prototype 的原型为 null，表示它没有原型。</p><p>Object 的原型是 Object.prototype，它包含了一些常用的方法和属性，如 toString、valueOf、hasOwnProperty 等。Object.prototype 的原型为 null，表示它没有原型。</p><h3 id="80、promise-Generator-Async-的使用"><a href="#80、promise-Generator-Async-的使用" class="headerlink" title="80、promise+Generator+Async 的使用"></a>80、promise+Generator+Async 的使用</h3><p>Promise、Generator 和 Async 都是 JavaScript 中用于处理异步编程的工具。</p><p>Promise 是一种用于处理异步操作的对象，它可以将异步操作转换为同步操作，使得代码更加简洁易读。Promise 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），并且可以通过 then 方法进行链式调用。</p><p>Generator 是一种函数，可以通过 yield 关键字将函数的执行暂停，并在需要时恢复执行。Generator 可以用于处理异步操作，但需要手动编写控制流程，代码可读性较差。</p><p>Async 是一种异步编程的语法糖，它基于 Generator 和 Promise 实现，使得异步代码的编写更加简单明了。Async 函数使用 async 关键字声明，内部可以使用 await 关键字等待 Promise 对象的返回值，从而实现异步操作的同步化。</p><p>它们之间的关系是：Async 函数是 Generator 函数的语法糖，内部使用 Promise 对象实现异步操作。Promise 和 Generator 可以结合使用，通过 yield 关键字等待 Promise 对象的返回值，从而实现异步操作的同步化。</p><p>它们的优缺点和适用性如下：</p><p>Promise 的优点是代码简洁易读，缺点是需要手动编写控制流程，代码可读性较差。适用于需要处理多个异步操作的场景。</p><p>Generator 的优点是可以将异步操作同步化，缺点是需要手动编写控制流程，代码可读性较差。适用于需要处理复杂异步操作的场景。</p><p>Async 的优点是代码简洁易读，缺点是需要使用 Promise 对象实现异步操作，有一定的学习成本。适用于需要处理多个异步操作的场景，且代码可读性要求较高的场景。</p><h3 id="81、JS-中-string-的-startwith-和-indexof-两种方法的区别"><a href="#81、JS-中-string-的-startwith-和-indexof-两种方法的区别" class="headerlink" title="81、JS 中 string 的 startwith 和 indexof 两种方法的区别"></a>81、JS 中 string 的 startwith 和 indexof 两种方法的区别</h3><p>startsWith 方法用于判断一个字符串是否以指定的字符串开头，返回布尔值 true 或 false。它接受两个参数，第一个参数是要匹配的字符串，第二个参数是可选的，表示从哪个位置开始匹配。</p><p>indexOf 方法用于返回一个字符串在另一个字符串中第一次出现的位置，如果没有找到则返回 -1。它也接受两个参数，第一个参数是要查找的字符串，第二个参数是可选的，表示从哪个位置开始查找。</p><p>两者的区别在于 startsWith 方法只能判断字符串是否以指定字符串开头，而 indexOf 方法可以查找字符串在另一个字符串中的任意位置。另外，startsWith 方法的第二个参数表示从哪个位置开始匹配，而 indexOf 方法的第二个参数表示从哪个位置开始查找。</p><h3 id="82、JS-字符串转数字的方法"><a href="#82、JS-字符串转数字的方法" class="headerlink" title="82、JS 字符串转数字的方法"></a>82、JS 字符串转数字的方法</h3><p>在 JavaScript 中，字符串转数字的方法有多种，其中比较常用的包括 parseInt、parseFloat 和 Number。</p><ol><li><p>parseInt：将字符串转为整数。它的语法为 parseInt(string, radix)，其中 string 表示要转换的字符串，radix 表示转换的基数，即进制数。如果省略 radix 参数，则默认按十进制进行转换。parseInt 方法会忽略字符串前面的空格，并从第一个非空字符开始转换，直到遇到非数字字符为止。如果第一个字符不是数字或正负号，则返回 NaN。parseInt 方法还可以用于将二进制、八进制和十六进制字符串转换为十进制数。</p></li><li><p>parseFloat：将字符串转为浮点数。它的语法为 parseFloat(string)，其中 string 表示要转换的字符串。parseFloat 方法会忽略字符串前面的空格，并从第一个非空字符开始转换，直到遇到非数字字符为止。如果第一个字符不是数字或正负号，则返回 NaN。parseFloat 方法只能用于将十进制字符串转换为浮点数。</p></li><li><p>Number：将字符串转为数字。它的语法为 Number(string)，其中 string 表示要转换的字符串。Number 方法会忽略字符串前面和后面的空格，并从第一个非空字符开始转换，直到遇到非数字字符为止。如果第一个字符不是数字或正负号，则返回 NaN。Number 方法还可以用于将 true 和 false 转换为 1 和 0，将 null 转换为 0，将 undefined 转换为 NaN。</p></li></ol><p>这三种方法的区别在于，parseInt 和 parseFloat 只能用于将字符串转换为数字，而 Number 方法可以将其他类型的值转换为数字。另外，parseInt 和 parseFloat 可以指定进制数进行转换，而 Number 只能将字符串转换为十进制数。在实际应用中，需要根据具体的需求选择合适的方法进行转换。</p><h3 id="83、平时是怎么调试JS-的"><a href="#83、平时是怎么调试JS-的" class="headerlink" title="83、平时是怎么调试JS 的"></a>83、平时是怎么调试JS 的</h3><p>在开发中，我们可以使用浏览器自带的调试工具来调试 JavaScript 代码，比如 Chrome 的开发者工具、Firefox 的 Firebug 等。这些工具可以帮助我们查看代码执行过程中的变量值、调用栈、网络请求等信息，以及进行代码断点调试、单步执行等操作。</p><p>除了浏览器自带的调试工具，还有一些第三方调试工具，比如 VS Code 的调试插件、WebStorm 等 IDE 工具，它们提供了更加强大的调试功能，可以在本地调试、远程调试等场景下使用。</p><p>另外，console 调试也是一种常用的调试方式，我们可以在代码中使用 console.log()、console.error()、console.warn() 等方法输出调试信息，帮助我们快速定位问题。</p><p>在实际开发中，我们可以结合以上多种调试方式，根据具体情况选择合适的调试工具和方法，快速定位和解决问题。同时，我们还可以使用一些调试技巧，比如利用断言、利用代码注释、利用代码重构等方式，提高调试效率和代码质量。</p><h3 id="84、-怎么获得对象上的属性"><a href="#84、-怎么获得对象上的属性" class="headerlink" title="84、 怎么获得对象上的属性"></a>84、 怎么获得对象上的属性</h3><p>获取 JavaScript 对象上的属性可以使用点操作符或方括号操作符。点操作符适用于属性名是一个合法的标识符的情况，而方括号操作符适用于属性名是一个字符串或表达式的情况。</p><p>例如，假设有一个对象 person，它有一个 name 属性，可以使用以下两种方式获取该属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用点操作符 </span></span><br><span class="line"><span class="keyword">const</span> name = person.<span class="property">name</span>; </span><br><span class="line"><span class="comment">// 使用方括号操作符 </span></span><br><span class="line"><span class="keyword">const</span> name = person[<span class="string">&#x27;name&#x27;</span>];</span><br></pre></td></tr></table></figure><p>需要注意的是，如果使用方括号操作符获取属性值，属性名必须是一个字符串或可以转换为字符串的表达式。此外，如果属性名中包含特殊字符，如空格或连字符，也必须使用方括号操作符获取属性值。</p><h3 id="85、async-和-await-具体该怎么用"><a href="#85、async-和-await-具体该怎么用" class="headerlink" title="85、async 和 await 具体该怎么用?"></a>85、async 和 await 具体该怎么用?</h3><p>async/await 是 ECMAScript 2017 中新增的语法，用于简化异步操作的代码。async/await 基于 Promise 实现，可以让异步代码看起来像同步代码，提高代码的可读性和可维护性。</p><p>async/await 的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">someAsyncOperation</span>();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，async 表示该函数是一个异步函数，返回一个 Promise 对象；await 表示等待异步操作完成，可以在异步操作完成后获取其返回值。</p><p>async/await 的使用场景包括：</p><ol><li>异步操作需要按照一定顺序执行，例如需要先获取用户信息，再根据用户信息获取其他数据。</li><li>需要处理异步操作的错误，例如需要捕获异步操作中的异常并进行处理。</li><li>需要等待多个异步操作完成后再进行下一步操作，例如需要等待多个接口数据返回后再进行页面渲染。</li></ol><p>async/await 的优点包括：</p><ol><li>简化异步代码的编写，让异步代码看起来像同步代码，提高代码的可读性和可维护性。</li><li>可以使用 try/catch 捕获异步操作中的异常，方便错误处理。</li><li>可以使用 Promise.all 等方法等待多个异步操作完成后再进行下一步操作。</li></ol><p>async/await 的缺点包括：</p><ol><li>不能在顶层作用域中使用，必须在异步函数中使用。</li><li>不能直接处理回调函数，需要将回调函数封装成 Promise 对象后再使用 async/await。</li></ol><p>在实际开发中，可以使用 async/await 来简化异步操作的代码，提高代码的可读性和可维护性。同时，需要注意避免出现死循环等问题，以及合理处理异步操作中的错误。</p><h3 id="86、知道哪些-ES6，ES7-的语法"><a href="#86、知道哪些-ES6，ES7-的语法" class="headerlink" title="86、知道哪些 ES6，ES7 的语法"></a>86、知道哪些 ES6，ES7 的语法</h3><p>ES6 和 ES7 中的一些常用语法包括：</p><ol><li><p>let/const：用于声明变量和常量，相比于 var，let/const 具有块级作用域，可以避免变量提升和全局污染等问题。</p></li><li><p>箭头函数：用于声明匿名函数，可以简化函数的书写，同时具有词法作用域和 this 绑定的特点。</p></li><li><p>模板字符串：用于声明字符串，可以使用变量和表达式，同时支持换行和多行字符串的书写。</p></li><li><p>解构赋值：用于从对象或数组中提取值，可以方便地获取需要的数据，同时可以避免冗长的代码。</p></li><li><p>Promise：用于处理异步操作，可以避免回调地狱和提高代码的可读性和可维护性。</p></li><li><p>async/await：用于处理异步操作，可以使用同步的方式书写异步代码，同时可以避免回调地狱和提高代码的可读性和可维护性。</p></li></ol><p>这些语法的优点包括：</p><ol><li><p>let/const 可以避免变量提升和全局污染等问题，提高代码的可维护性。</p></li><li><p>箭头函数可以简化函数的书写，同时具有词法作用域和 this 绑定的特点，提高代码的可读性和可维护性。</p></li><li><p>模板字符串可以使用变量和表达式，同时支持换行和多行字符串的书写，提高代码的可读性和可维护性。</p></li><li><p>解构赋值可以方便地获取需要的数据，同时可以避免冗长的代码，提高代码的可读性和可维护性。</p></li><li><p>Promise 和 async/await 可以避免回调地狱，提高代码的可读性和可维护性。</p></li></ol><p>这些语法的适用场景包括：</p><ol><li><p>let/const 可以用于任何需要声明变量或常量的场景。</p></li><li><p>箭头函数可以用于任何需要声明函数的场景，特别是需要使用词法作用域和 this 绑定的场景。</p></li><li><p>模板字符串可以用于任何需要声明字符串的场景，特别是需要使用变量和表达式的场景。</p></li><li><p>解构赋值可以用于任何需要从对象或数组中提取值的场景，特别是需要获取多个值的场景。</p></li><li><p>Promise 和 async/await 可以用于任何需要处理异步操作的场景，特别是需要避免回调地狱和提高代码可读性和可维护性的场景。</p></li></ol><h3 id="87、promise-和-await-async-的关系"><a href="#87、promise-和-await-async-的关系" class="headerlink" title="87、promise 和 await/async 的关系"></a>87、promise 和 await/async 的关系</h3><p>Promise 和 async/await 都是 JavaScript 中用于处理异步操作的方法。</p><p>Promise 是 ES6 中引入的一种处理异步操作的方式，它可以将异步操作封装成一个 Promise 对象，通过 then 方法来处理异步操作的结果。Promise 的优点是可以避免回调地狱，使代码更加清晰易懂，但是在处理复杂的异步操作时，仍然需要嵌套多个 then 方法，代码可读性不高。</p><p>async/await 是 ES7 中引入的一种处理异步操作的方式，它基于 Promise，可以更加方便地处理异步操作。async 函数返回一个 Promise 对象，await 关键字可以暂停 async 函数的执行，等待 Promise 对象的状态改变后再继续执行。async/await 的优点是代码结构清晰，可读性强，可以避免回调地狱，但是需要注意错误处理，避免出现未捕获的异常。</p><p>在实际开发中，可以根据具体情况选择使用 Promise 或 async/await。对于简单的异步操作，可以使用 Promise，对于复杂的异步操作，可以使用 async/await 来提高代码的可读性和可维护性。同时，需要注意错误处理，避免出现未捕获的异常。</p><h3 id="88、JS-加载过程阻塞，解决方法"><a href="#88、JS-加载过程阻塞，解决方法" class="headerlink" title="88、JS 加载过程阻塞，解决方法"></a>88、JS 加载过程阻塞，解决方法</h3><p>JavaScript 加载过程阻塞是指在浏览器解析 HTML 文档时，如果遇到 script 标签，会立即停止 HTML 文档的解析，转而加载和执行 JavaScript 代码，这会导致页面加载速度变慢，影响用户体验。</p><p>解决方法包括：</p><ol><li><p>异步加载：将 JavaScript 代码放在异步加载的脚本中，例如使用动态创建 script 标签或者使用 XMLHttpRequest 对象加载 JavaScript 代码。</p></li><li><p>defer 属性：将 script 标签的 defer 属性设置为 true，表示该脚本会在 HTML 文档解析完毕后再执行，不会阻塞 HTML 文档的解析。</p></li><li><p>async 属性：将 script 标签的 async 属性设置为 true，表示该脚本会在加载完成后立即执行，不会阻塞 HTML 文档的解析，但是执行顺序不确定。</p></li><li><p>代码优化：将 JavaScript 代码进行优化，例如压缩、合并、减少全局变量等，可以减少 JavaScript 代码的大小和执行时间，提高页面加载速度。</p></li></ol><p>在实际开发中，可以根据具体情况选择适合的解决方法，例如对于需要立即执行的 JavaScript 代码，可以使用 async 属性，对于需要在页面加载完毕后执行的 JavaScript 代码，可以使用 defer 属性。同时，可以通过代码优化来减少 JavaScript 代码的大小和执行时间，提高页面加载速度和用户体验。</p><h3 id="89、JS-对象类型，基本对象类型以及引用对象类型的区别"><a href="#89、JS-对象类型，基本对象类型以及引用对象类型的区别" class="headerlink" title="89、JS 对象类型，基本对象类型以及引用对象类型的区别"></a>89、JS 对象类型，基本对象类型以及引用对象类型的区别</h3><p>在 JavaScript 中，对象类型分为基本对象类型和引用对象类型。基本对象类型包括字符串、数字、布尔值、null 和 undefined，它们是不可变的，即一旦创建就无法修改。而引用对象类型包括对象、数组和函数等，它们是可变的，即可以添加、删除或修改属性和方法。</p><p>基本对象类型是按值传递的，即在将一个变量赋值给另一个变量时，会创建一个新的值，两个变量互不影响。而引用对象类型是按引用传递的，即在将一个变量赋值给另一个变量时，两个变量指向同一个对象，修改其中一个变量的属性或方法会影响另一个变量。</p><p>了解这些区别可以帮助我们更好地理解 JavaScript 中的数据类型和变量传递方式，从而编写更加高效和可靠的代码。</p><h3 id="90、轮播的实现原理-假如一个页面上有两个轮播，你会怎么实现"><a href="#90、轮播的实现原理-假如一个页面上有两个轮播，你会怎么实现" class="headerlink" title="90、轮播的实现原理?假如一个页面上有两个轮播，你会怎么实现?"></a>90、轮播的实现原理?假如一个页面上有两个轮播，你会怎么实现?</h3><p>轮播的实现原理是通过定时器或者动画实现图片或者内容的循环播放。一般来说，轮播可以通过 JavaScript 或者 CSS 实现。</p><p>如果一个页面上有两个轮播，可以通过以下几种方式实现：</p><ol><li><p>使用不同的类名或者 ID 区分不同的轮播，然后分别编写对应的 JavaScript 代码实现。</p></li><li><p>将轮播封装成一个组件，通过传递不同的参数来区分不同的轮播，然后在页面中引用不同的组件实现。</p></li><li><p>使用现成的轮播插件，通过配置不同的参数来实现不同的轮播效果。</p></li></ol><h3 id="91、解释一下JS-的事件循环"><a href="#91、解释一下JS-的事件循环" class="headerlink" title="91、解释一下JS 的事件循环"></a>91、解释一下JS 的事件循环</h3><p>JS 的事件循环是指 JS 引擎在执行代码时，会将任务分为两种：同步任务和异步任务。同步任务会在主线程上按照顺序执行，而异步任务则会被放入任务队列中等待执行。当主线程上的同步任务执行完毕后，JS 引擎会不断地从任务队列中取出异步任务并执行，这个过程就是事件循环。</p><p>事件循环的实现依赖于浏览器或 Node.js 环境提供的事件模型。在浏览器中，事件循环通常由浏览器提供的 Web API 和事件队列实现，而在 Node.js 中则是由 libuv 库提供的事件循环机制实现。</p><h3 id="92、Localstorage、sessionStorage、-cookie-的区别"><a href="#92、Localstorage、sessionStorage、-cookie-的区别" class="headerlink" title="92、Localstorage、sessionStorage、 cookie 的区别"></a>92、Localstorage、sessionStorage、 cookie 的区别</h3><p>Localstorage、sessionStorage、cookie 都是用于在浏览器端存储数据的方式，它们之间的区别如下：</p><ol><li><p>存储大小：cookie 的大小限制为 4KB，而 Localstorage 和 sessionStorage 的大小限制在 5MB 左右。</p></li><li><p>有效期：cookie 可以设置过期时间，而 Localstorage 和 sessionStorage 没有过期时间，除非手动清除。</p></li><li><p>存储位置：cookie 和 sessionStorage 存储在浏览器内存中，而 Localstorage 存储在硬盘上。</p></li><li><p>作用域：cookie 的作用域可以是整个域名下的所有页面，而 Localstorage 和 sessionStorage 只在当前页面有效。</p></li><li><p>与服务器的通信：cookie 在每次请求时都会发送到服务器端，而 Localstorage 和 sessionStorage 不会。</p></li></ol><p>在实际开发中，可以根据具体需求选择合适的存储方式。如果需要在客户端和服务器端之间传递数据，可以使用 cookie；如果需要在同一页面内共享数据，可以使用 Localstorage 或 sessionStorage。</p><h3 id="93、解释一下-HTML5-Drag-API"><a href="#93、解释一下-HTML5-Drag-API" class="headerlink" title="93、解释一下 HTML5 Drag API"></a>93、解释一下 HTML5 Drag API</h3><p>HTML5 Drag API 是一组用于实现拖放操作的浏览器 API。它允许用户通过鼠标或触摸屏幕将元素从一个位置拖动到另一个位置。通过使用 Drag API，开发人员可以创建自定义的拖放操作，例如拖动文件到 Web 应用程序中进行上传。Drag API 包括三个主要事件：dragstart、dragover 和 drop。其中，dragstart 事件在开始拖动元素时触发，dragover 事件在拖动元素时触发，drop 事件在元素被拖放到目标区域时触发。开发人员可以使用这些事件来实现自定义的拖放操作。</p><h3 id="94-、解释一下-webworker"><a href="#94-、解释一下-webworker" class="headerlink" title="94 、解释一下 webworker"></a>94 、解释一下 webworker</h3><p>Web Worker 是 HTML5 标准中提供的一种 JavaScript 多线程解决方案，可以在后台线程中运行 JavaScript 脚本，不会影响页面的性能和响应速度。Web Worker 可以通过 postMessage() 方法与主线程进行通信，实现数据的传输和共享。Web Worker 适用于一些计算密集型、耗时长的任务，如图像处理、音视频编解码等。但是，Web Worker 无法访问 DOM，也不能与主线程共享同一份内存，需要通过消息传递来实现数据的共享。</p><h3 id="95、-和-的-valueOf-和-toString-的结果是什么"><a href="#95、-和-的-valueOf-和-toString-的结果是什么" class="headerlink" title="95、{}和[]的 valueOf 和 toString 的结果是什么?"></a>95、{}和[]的 valueOf 和 toString 的结果是什么?</h3><p>{} 的 valueOf 和 toString 方法返回的都是 “[object Object]”，因为 {} 是一个对象，而对象的默认 toString 方法返回的就是 “[object Object]”。</p><p>[] 的 valueOf 方法返回的是空数组本身，而 toString 方法返回的是以逗号分隔的数组元素的字符串形式，例如 [1, 2, 3].toString() 的结果是 “1,2,3”。</p><h3 id="96、三种事件模型是什么"><a href="#96、三种事件模型是什么" class="headerlink" title="96、三种事件模型是什么?"></a>96、三种事件模型是什么?</h3><ol><li><p>冒泡型事件模型（Bubbling Event Model）：事件从最具体的元素开始触发，逐级向上传播到较为不具体的节点。</p></li><li><p>捕获型事件模型（Capturing Event Model）：事件从最不具体的节点开始触发，逐级向下传播到较为具体的节点。</p></li><li><p>DOM 标准事件模型（DOM Standard Event Model）：事件分为捕获阶段、目标阶段和冒泡阶段三个阶段，先进行捕获，然后到达目标元素，最后冒泡回去。</p></li></ol><h3 id="97、介绍一下-V8-隐藏类"><a href="#97、介绍一下-V8-隐藏类" class="headerlink" title="97、介绍一下 V8 隐藏类"></a>97、介绍一下 V8 隐藏类</h3><p>V8 引擎使用隐藏类来提高 JavaScript 对象的访问速度。隐藏类是一种将属性名映射到内部属性偏移量的数据结构，它定义了对象的属性布局。当对象的属性发生变化时，V8 引擎会创建新的隐藏类。如果两个对象具有相同的属性和属性顺序，则它们将共享相同的隐藏类。这种优化可以显著提高 JavaScript 对象的访问速度，特别是在处理大量对象时。</p><h3 id="98、AMD-和-CMD-规范的区别-说一下-CommonJS、AMD-和-CMD"><a href="#98、AMD-和-CMD-规范的区别-说一下-CommonJS、AMD-和-CMD" class="headerlink" title="98、AMD 和 CMD 规范的区别? 说一下 CommonJS、AMD 和 CMD?"></a>98、AMD 和 CMD 规范的区别? 说一下 CommonJS、AMD 和 CMD?</h3><p>AMD 和 CMD 规范是 JavaScript 模块化的两种方案。AMD 是 Asynchronous Module Definition（异步模块定义）的缩写，CMD 是 Common Module Definition（通用模块定义）的缩写。</p><p>CommonJS 是 Node.js 采用的模块化规范，它的特点是同步加载模块。在 Node.js 中，每个文件都被视为一个模块，每个模块内部的变量都是局部的，不会污染全局作用域。</p><p>AMD 和 CMD 都是浏览器端的模块化规范，它们的特点是异步加载模块。AMD 规范先定义所有模块的依赖，然后异步加载这些依赖，最后执行回调函数。CMD 规范则是在需要使用某个模块时再去加载它。</p><p>在使用 AMD 规范时，需要使用 require.js 这样的库来实现模块的异步加载。而在使用 CMD 规范时，需要使用 sea.js 这样的库来实现模块的异步加载。</p><h3 id="99、谈谈-JS-的运行机制"><a href="#99、谈谈-JS-的运行机制" class="headerlink" title="99、谈谈 JS 的运行机制"></a>99、谈谈 JS 的运行机制</h3><p>JS 的运行机制主要包括以下几个方面：</p><ol><li>解析器将 JS 代码解析成抽象语法树（AST）。</li><li>将 AST 转换成字节码，然后再转换成机器码执行。</li><li>执行过程中，遇到异步任务会被挂起，等待异步任务完成后再继续执行。</li><li>JS 引擎使用垃圾回收器自动管理内存，当变量不再被引用时，垃圾回收器会自动回收其占用的内存空间。</li></ol><p>其中，第三个步骤是 JS 运行机制中比较重要的一部分，因为它涉及到了事件循环的概念。JS 引擎会将异步任务放入任务队列中，等待执行。当主线程执行完同步任务后，会不断地从任务队列中取出任务执行，直到任务队列为空。这个过程就是事件循环。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 chatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023面试题前端框架遇上chatGPT</title>
      <link href="/post/230701.html"/>
      <url>/post/230701.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端高频面试题-2023版"><a href="#前端高频面试题-2023版" class="headerlink" title="前端高频面试题 - 2023版"></a>前端高频面试题 - 2023版</h1><h2 id="Vue生态"><a href="#Vue生态" class="headerlink" title="Vue生态"></a>Vue生态</h2><h3 id="1、说说你对-Vue-的理解，有何优缺点"><a href="#1、说说你对-Vue-的理解，有何优缺点" class="headerlink" title="1、说说你对 Vue 的理解，有何优缺点?"></a>1、说说你对 Vue 的理解，有何优缺点?</h3><p>Vue 是一款流行的前端框架，它采用了 MVVM 架构模式，具有轻量级、易学易用、高效、灵活等优点。Vue 的核心是响应式数据绑定和组件化开发，可以让开发者更加高效地构建复杂的单页应用。Vue 还提供了丰富的指令和插件，可以方便地实现各种功能。Vue 的缺点是在处理大型应用时，可能会出现性能问题，需要进行优化。同时，Vue 的生态系统相对于 React 来说还有一些不足，例如社区支持和第三方库的数量。</p><h3 id="2、Vue-和-React-有什么不同"><a href="#2、Vue-和-React-有什么不同" class="headerlink" title="2、Vue 和 React 有什么不同?"></a>2、Vue 和 React 有什么不同?</h3><p>Vue 和 React 都是流行的前端框架，它们的主要区别在于：</p><ol><li>Vue 更加易学易用，因为它的 API 设计更加直观和简单，而 React 则需要更多的学习和理解。</li><li>Vue 的模板语法更加直观易懂，而 React 则需要使用 JSX 语法来描述组件。</li><li>Vue 的性能优化更加容易，因为它内置了很多优化策略，而 React 则需要手动进行优化。</li><li>Vue 的生态系统相对较小，但是更加一致和稳定，而 React 的生态系统更加丰富和多样化，但是也更加分散和不稳定。</li><li>Vue 更加适合快速开发小型应用，而 React 更加适合开发大型应用和复杂的 UI 组件。</li></ol><h3 id="3、什么是虚拟-DOM"><a href="#3、什么是虚拟-DOM" class="headerlink" title="3、什么是虚拟 DOM?"></a>3、什么是虚拟 DOM?</h3><p>虚拟 DOM 是一种编程概念，它是一个轻量级的 javaScript 对象，用于描述真实 DOM 的层次结构和属性。虚拟 DOM 可以在每次数据变化时快速比较前后两个虚拟 DOM 的差异，并只更新需要更新的部分，从而提高页面渲染效率。Vue 和 React 都使用了虚拟 DOM 技术。</p><h3 id="4、描述下-vue-的生命周期有哪些-分别做了什么事情"><a href="#4、描述下-vue-的生命周期有哪些-分别做了什么事情" class="headerlink" title="4、描述下 vue 的生命周期有哪些? 分别做了什么事情?"></a>4、描述下 vue 的生命周期有哪些? 分别做了什么事情?</h3><ol><li><p>beforeCreate：实例刚被创建，数据观测和事件配置之前，此时无法访问到 data 和 methods 等属性。</p></li><li><p>created：实例已经创建完成，数据观测和事件配置完成，可以访问到 data 和 methods 等属性，但无法访问到 DOM。</p></li><li><p>beforeMount：模板编译/挂载之前调用，此时可以访问到 DOM，但还未开始渲染。</p></li><li><p>mounted：模板编译/挂载完成，此时可以访问到 DOM，并且已经开始渲染。</p></li><li><p>beforeUpdate：数据更新时调用，但此时 DOM 尚未更新。</p></li><li><p>updated：数据更新完成时调用，DOM 已经更新。</p></li><li><p>beforeDestroy：实例销毁之前调用，此时实例仍然可用。</p></li><li><p>destroyed：实例销毁之后调用，此时实例已经被完全清除，所有的事件监听器和子实例也都被销毁。</p></li></ol><p>在这些生命周期中，我们可以利用钩子函数来执行一些特定的操作，比如在 created 钩子函数中进行数据初始化，在 mounted 钩子函数中进行 DOM 操作等。</p><h3 id="5、watch-怎么深度监听对象变化"><a href="#5、watch-怎么深度监听对象变化" class="headerlink" title="5、watch 怎么深度监听对象变化"></a>5、watch 怎么深度监听对象变化</h3><p>可以通过设置 <code>deep</code> 属性为 <code>true</code> 来深度监听对象变化。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">handler</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="comment">// 对象发生变化时的回调函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当 <code>obj</code> 对象内部的属性发生变化时，也会触发回调函数。需要注意的是，深度监听对象变化会带来一定的性能开销，应该谨慎使用。</p><h3 id="6、删除数组用-delete-和-Vue-delete-有什么区别"><a href="#6、删除数组用-delete-和-Vue-delete-有什么区别" class="headerlink" title="6、删除数组用 delete 和 Vue.delete 有什么区别?"></a>6、删除数组用 delete 和 Vue.delete 有什么区别?</h3><p>使用 delete 删除数组元素时，数组的长度不会改变，而且删除元素后，数组的下标不会重新排序，会变成 undefined。而使用 Vue.delete 删除数组元素时，数组的长度会自动改变，而且删除元素后，数组的下标会重新排序，不会变成 undefined。因此，如果要删除 Vue 中的数组元素，应该使用 Vue.delete。</p><h3 id="7、watch-和-computed-有什么区别"><a href="#7、watch-和-computed-有什么区别" class="headerlink" title="7、watch 和 computed 有什么区别?"></a>7、watch 和 computed 有什么区别?</h3><p>watch 和 computed 都是 Vue 中的响应式数据处理方式，但是它们有以下区别：</p><ol><li><p>computed 是计算属性，依赖其他属性计算得出结果，只有在依赖的属性发生变化时才会重新计算；而 watch 是监听属性，当属性发生变化时会执行回调函数。</p></li><li><p>computed 会缓存计算结果，只有在依赖的属性发生变化时才会重新计算；而 watch 不会缓存计算结果，每次属性变化都会执行回调函数。</p></li><li><p>computed 适用于计算属性，可以简化模板中的复杂逻辑；而 watch 适用于监听某个属性的变化，执行一些复杂的业务逻辑。</p></li></ol><p>综上所述，computed 适用于计算属性，watch 适用于监听属性变化执行一些复杂的业务逻辑。</p><h3 id="8、v-for-没有-key-会发生什么问题"><a href="#8、v-for-没有-key-会发生什么问题" class="headerlink" title="8、v-for 没有 key 会发生什么问题?"></a>8、v-for 没有 key 会发生什么问题?</h3><p>如果 v-for 没有 key，Vue 会给出一个警告，同时会使用默认的 key，即数组中每个元素的索引。这样可能会导致一些问题，例如当数组中的元素顺序发生变化时，Vue 会认为这是新的元素，而不是原来的元素发生了变化，从而重新渲染整个列表，导致性能问题。因此，为每个列表项指定一个唯一的 key 是非常重要的。</p><h3 id="9、谈谈-Vue-双向绑定原理"><a href="#9、谈谈-Vue-双向绑定原理" class="headerlink" title="9、谈谈 Vue 双向绑定原理"></a>9、谈谈 Vue 双向绑定原理</h3><p>Vue 双向绑定的原理是通过数据劫持和发布-订阅模式实现的。当数据发生变化时，Vue 会通过 Object.defineProperty() 方法劫持数据的 setter 方法，在数据被修改时发布消息，通知订阅者进行更新。同时，Vue 还会通过模板编译器将模板中的指令和表达式转换成对应的渲染函数，实现视图的更新。当用户与视图进行交互时，Vue 会通过事件监听器监听用户的操作，然后更新数据，从而实现双向绑定。</p><h3 id="10、v-model-是什么-有什么用呢"><a href="#10、v-model-是什么-有什么用呢" class="headerlink" title="10、v-model 是什么? 有什么用呢?"></a>10、v-model 是什么? 有什么用呢?</h3><p>v-model 是 Vue 提供的一个指令，用于在表单元素和 Vue 实例的数据之间双向绑定。它可以方便地实现表单元素的数据绑定和更新，使得开发者不需要手动监听表单元素的输入事件和更新数据。v-model 可以应用在 input、select、textarea、checkbox、radio 等表单元素上，使得表单元素的值和 Vue 实例的数据保持同步。</p><h3 id="11、在-vue-项目中如何引入第三方库-有哪些具体操作方法"><a href="#11、在-vue-项目中如何引入第三方库-有哪些具体操作方法" class="headerlink" title="11、在 vue 项目中如何引入第三方库? 有哪些具体操作方法?"></a>11、在 vue 项目中如何引入第三方库? 有哪些具体操作方法?</h3><p>在 Vue 项目中引入第三方库可以通过以下几个步骤实现：</p><ol><li><p>使用 npm 或 yarn 安装需要的第三方库，例如：<code>npm install jquery</code>。</p></li><li><p>在需要使用该库的组件中，通过 <code>import</code> 或 <code>require</code> 引入该库，例如：<code>import $ from &#39;jquery&#39;</code>。</p></li><li><p>在组件中使用该库提供的功能，例如：<code>$(&#39;selector&#39;).method()</code>。</p></li></ol><p>需要注意的是，如果引入的第三方库是一个全局变量，例如 <code>lodash</code>，可以通过在 <code>main.js</code> 中引入并挂载到 Vue 实例上，使其在整个应用中都可用，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_</span> = _</span><br></pre></td></tr></table></figure><p>这样在组件中就可以通过 <code>this._.method()</code> 使用了。</p><h3 id="12、Vue3-0-里为什么要用-Proxy-API-替代-defineProperty-API"><a href="#12、Vue3-0-里为什么要用-Proxy-API-替代-defineProperty-API" class="headerlink" title="12、Vue3.0 里为什么要用 Proxy API 替代 defineProperty API?"></a>12、Vue3.0 里为什么要用 Proxy API 替代 defineProperty API?</h3><p>Vue3.0 中使用 Proxy API 替代 defineProperty API 的主要原因是 Proxy API 具有更好的性能和更多的功能。相比之下，defineProperty API 的缺点是它只能监听对象的属性，而不能监听整个对象，也不能监听属性的添加和删除。而 Proxy API 可以监听整个对象，包括属性的添加和删除，还可以拦截更多的操作，如函数调用、in 操作符等。此外，Proxy API 的性能也比 defineProperty API 更好，因为它不需要遍历整个对象来监听属性的变化。</p><h3 id="13、Vue3-0-编译做了哪些优化"><a href="#13、Vue3-0-编译做了哪些优化" class="headerlink" title="13、Vue3.0 编译做了哪些优化?"></a>13、Vue3.0 编译做了哪些优化?</h3><ol><li><p>使用了静态提升技术，将静态节点编译成常量，减少了渲染时的运算量。</p></li><li><p>使用了基于 Proxy 的响应式系统，替代了 Object.defineProperty，使得响应式系统更加高效。</p></li><li><p>优化了模板编译，使得编译后的代码更加简洁高效。</p></li><li><p>改进了虚拟 DOM 的实现，使得渲染性能更加出色。</p></li><li><p>改进了组件实例的初始化过程，使得初始化更加高效。</p></li><li><p>改进了组件的更新算法，使得更新更加高效。</p></li></ol><p>总之，Vue3.0 在编译方面做了很多优化，使得性能更加出色，同时也提高了开发效率。</p><h3 id="14、Vue3-0-新特性—-Composition-API-与-React-js-中-Hooks-的异同点"><a href="#14、Vue3-0-新特性—-Composition-API-与-React-js-中-Hooks-的异同点" class="headerlink" title="14、Vue3.0 新特性— Composition API 与 React.js 中 Hooks 的异同点"></a>14、Vue3.0 新特性— Composition API 与 React.js 中 Hooks 的异同点</h3><p>Vue3.0 中的 Composition API 和 React.js 中的 Hooks 都是用于更好地组织和重用组件逻辑的工具。它们的异同点如下：</p><p>相同点：</p><ol><li>都是用于解决组件逻辑复用的问题。</li><li>都是基于函数的 API，可以更好地组织和重用组件逻辑。</li><li>都可以在不使用 class 的情况下使用。</li></ol><p>不同点：</p><ol><li>Hooks 是 React.js 中的新特性，而 Composition API 是 Vue3.0 中的新特性。</li><li>Hooks 是基于函数的 API，而 Composition API 是基于对象的 API。</li><li>Hooks 可以在函数组件中使用，而 Composition API 可以在 Options API 和函数式组件中使用。</li><li>Hooks 是通过 useState、useEffect、useContext 等函数来实现的，而 Composition API 是通过 setup 函数和一系列的函数来实现的。</li><li>Hooks 可以在任何地方使用，而 Composition API 只能在 setup 函数中使用。</li><li>Hooks 可以使用自定义 Hooks，而 Composition API 可以使用自定义函数。</li></ol><p>总的来说，Hooks 和 Composition API 都是用于更好地组织和重用组件逻辑的工具，但是它们的实现方式和使用方式有所不同。</p><h3 id="15、Vue3-0-是如何变得更快的-dom-diff-算法有何优化"><a href="#15、Vue3-0-是如何变得更快的-dom-diff-算法有何优化" class="headerlink" title="15、Vue3.0 是如何变得更快的? dom diff 算法有何优化?"></a>15、Vue3.0 是如何变得更快的? dom diff 算法有何优化?</h3><p>Vue3.0 通过以下方式变得更快：</p><ol><li><p>使用了模板编译优化，将模板编译为更快的渲染函数。</p></li><li><p>使用了静态提升，将静态节点提升为常量，避免了重复渲染。</p></li><li><p>使用了源码重写的响应式系统，使用 Proxy 代替了 Object.defineProperty，减少了 getter 和 setter 的调用次数。</p></li><li><p>使用了优化后的虚拟 DOM，减少了不必要的 DOM 操作。</p></li><li><p>使用了 Tree shaking，减少了打包后的代码体积。</p></li></ol><p>在 dom diff 算法方面，Vue3.0 优化了以下几点：</p><ol><li><p>使用了静态标记，避免了对静态节点的重复比较。</p></li><li><p>使用了动态标记，避免了对不需要比较的节点的比较。</p></li><li><p>使用了事件缓存，避免了对相同事件的重复绑定。</p></li><li><p>使用了 Block tree，将相同的节点打包成块，减少了比较的次数。</p></li><li><p>使用了 Patch flag，标记节点的变化类型，避免了不必要的比较。</p></li></ol><h3 id="16、vue-要做权限管理该怎么做-如果控制到按钮级别的权限怎么做"><a href="#16、vue-要做权限管理该怎么做-如果控制到按钮级别的权限怎么做" class="headerlink" title="16、vue 要做权限管理该怎么做? 如果控制到按钮级别的权限怎么做?"></a>16、vue 要做权限管理该怎么做? 如果控制到按钮级别的权限怎么做?</h3><p>要做权限管理，可以通过路由守卫和动态组件来实现。在路由守卫中，可以根据用户的角色或权限来判断是否有访问该路由的权限，如果没有权限则跳转到其他页面或者提示用户没有权限。在动态组件中，可以根据用户的角色或权限来动态渲染组件，如果没有权限则不渲染该组件。</p><p>如果要控制到按钮级别的权限，可以在组件中通过 v-if 或者 v-show 来控制按钮的显示和隐藏。在组件中可以定义一个权限列表，根据用户的角色或权限来判断是否有访问该按钮的权限，如果没有权限则不显示该按钮。同时，也可以通过自定义指令来实现按钮级别的权限控制。</p><h3 id="17、vue-在-created-和-mounted-这两个生命周期中请求数据有什么区别呢"><a href="#17、vue-在-created-和-mounted-这两个生命周期中请求数据有什么区别呢" class="headerlink" title="17、vue 在 created 和 mounted 这两个生命周期中请求数据有什么区别呢?"></a>17、vue 在 created 和 mounted 这两个生命周期中请求数据有什么区别呢?</h3><p>在 Vue 的生命周期中，created 钩子函数是在实例被创建之后立即调用的，而 mounted 钩子函数则是在挂载元素之后调用的。因此，在 created 钩子函数中请求数据时，数据还没有被挂载到 DOM 上，因此无法操作 DOM。而在 mounted 钩子函数中请求数据时，数据已经被挂载到 DOM 上，可以对 DOM 进行操作。此外，如果在 created 钩子函数中请求数据，数据更新后不会触发组件的重新渲染，而在 mounted 钩子函数中请求数据，数据更新后会触发组件的重新渲染。</p><h3 id="18、说说你对-Proxy-的理解。"><a href="#18、说说你对-Proxy-的理解。" class="headerlink" title="18、说说你对 Proxy 的理解。"></a>18、说说你对 Proxy 的理解。</h3><p>Proxy 是 ES6 中新增的一个对象，可以用来代理另一个对象，从而实现对该对象的拦截和自定义操作。通过 Proxy，我们可以拦截并重写对象的默认操作，比如读取属性、设置属性、函数调用等，从而实现对对象的自定义操作。相比于 Object.defineProperty()，Proxy 更加强大和灵活，可以拦截更多的操作，并且可以直接监听整个对象而不是单个属性。在 Vue3.0 中，使用 Proxy 替代了 Object.defineProperty()，从而实现了更高效的响应式系统。</p><h3 id="19、Vue3-0性能提升主要是体现在哪些方面"><a href="#19、Vue3-0性能提升主要是体现在哪些方面" class="headerlink" title="19、Vue3.0性能提升主要是体现在哪些方面?"></a>19、Vue3.0性能提升主要是体现在哪些方面?</h3><p>Vue3.0 的性能提升主要体现在以下几个方面：</p><ol><li><p>响应式系统升级：Vue3.0 使用 Proxy 替代了 Object.defineProperty，可以监听到更多类型的数据变化，而且性能更高。</p></li><li><p>编译优化：Vue3.0 在编译阶段进行了优化，生成的代码更少，执行效率更高。</p></li><li><p>模板优化：Vue3.0 中的模板编译器对静态节点进行了优化，减少了不必要的更新操作。</p></li><li><p>组件实例缓存：Vue3.0 中对组件实例进行了缓存，减少了组件的创建和销毁次数，提高了性能。</p></li><li><p>指令优化：Vue3.0 中对指令进行了优化，可以更好地利用虚拟 DOM，减少了不必要的 DOM 操作，提高了性能。</p></li></ol><h3 id="20、vue3有哪些新的组件"><a href="#20、vue3有哪些新的组件" class="headerlink" title="20、vue3有哪些新的组件?"></a>20、vue3有哪些新的组件?</h3><p>Vue 3.0 中新增了两个组件：<code>&lt;teleport&gt;</code> 和 <code>&lt;suspense&gt;</code>。</p><p><code>&lt;teleport&gt;</code> 组件可以将组件的内容渲染到任意 DOM 节点中，而不仅仅是当前组件的父节点。这个功能在实现一些特殊效果时非常有用，比如模态框、下拉菜单等。</p><p><code>&lt;suspense&gt;</code> 组件可以在异步组件加载完成前，渲染出一个指定的“等待中”组件。这个功能可以让我们更好地控制异步组件的加载状态，提升用户体验。</p><h3 id="21、Vue2-0-和-Vue3-0-有什么区别"><a href="#21、Vue2-0-和-Vue3-0-有什么区别" class="headerlink" title="21、Vue2.0 和 Vue3.0 有什么区别?"></a>21、Vue2.0 和 Vue3.0 有什么区别?</h3><p>Vue2.0 和 Vue3.0 的区别主要有以下几点：</p><ol><li><p>性能提升：Vue3.0 在编译和渲染方面进行了优化，使用了更快的模板编译器和重写了虚拟 DOM 的实现，使得性能得到了大幅提升。</p></li><li><p>更好的 TypeScript 支持：Vue3.0 对 TypeScript 的支持更加友好，提供了完整的 TypeScript 类型定义文件。</p></li><li><p>Composition API：Vue3.0 引入了 Composition API，使得组件逻辑可以更加清晰地组织和复用。</p></li><li><p>更好的 Tree-shaking：Vue3.0 采用了静态标记和编译时优化，使得 Tree-shaking 效果更好，减小了打包体积。</p></li><li><p>更好的响应式系统：Vue3.0 引入了 Proxy 对象替代了 Object.defineProperty，使得响应式系统更加高效和灵活。</p></li><li><p>更好的 TypeScript 支持：Vue3.0 对 TypeScript 的支持更加友好，提供了完整的 TypeScript 类型定义文件。</p></li><li><p>移除了一些不常用的 API：Vue3.0 移除了一些不常用的 API，使得整个框架更加轻量化和易于维护。</p></li></ol><h3 id="22、Composition-Api-与-Options-Api-有什么不同"><a href="#22、Composition-Api-与-Options-Api-有什么不同" class="headerlink" title="22、Composition Api 与 Options Api 有什么不同?"></a>22、Composition Api 与 Options Api 有什么不同?</h3><p>Composition API 是 Vue 3.0 中新增的 API，与 Options API 不同之处在于，Composition API 更加灵活，可以将逻辑按照功能划分为多个函数，而不是像 Options API 那样将所有逻辑都放在一个对象中。Composition API 还可以更好地实现代码的复用和组合，使得代码更加清晰易懂。同时，Composition API 还可以更好地支持 TypeScript。</p><h3 id="23、对Vue项目你做过哪些性能优化"><a href="#23、对Vue项目你做过哪些性能优化" class="headerlink" title="23、对Vue项目你做过哪些性能优化?"></a>23、对Vue项目你做过哪些性能优化?</h3><p>对Vue项目的性能优化可以从以下几个方面入手：</p><ol><li><p>减少HTTP请求：合并文件、使用CDN、使用字体图标等方式可以减少HTTP请求次数，从而提高页面加载速度。</p></li><li><p>懒加载：对于图片、视频等资源，可以使用懒加载的方式，当用户滚动到相应位置时再加载，避免一次性加载过多资源导致页面卡顿。</p></li><li><p>代码优化：避免使用过多的计算属性和监听器，尽量使用v-if代替v-show，避免不必要的DOM操作等，从而减少页面的重绘和回流，提高页面性能。</p></li><li><p>使用异步组件：对于一些比较大的组件，可以使用异步组件的方式，当组件需要使用时再进行加载，避免一次性加载过多组件导致页面卡顿。</p></li><li><p>使用keep-alive：对于一些需要频繁切换的组件，可以使用keep-alive进行缓存，避免重复渲染和销毁组件，提高页面性能。</p></li><li><p>使用SSR：对于一些需要SEO的页面，可以使用SSR的方式进行渲染，提高页面的首屏加载速度和SEO效果。</p></li><li><p>使用Vue Devtools进行性能分析：使用Vue Devtools可以对页面进行性能分析，找出性能瓶颈，从而进行优化。</p></li></ol><h3 id="24、Vue组件通信的方式有哪些"><a href="#24、Vue组件通信的方式有哪些" class="headerlink" title="24、Vue组件通信的方式有哪些?"></a>24、Vue组件通信的方式有哪些?</h3><p>Vue组件通信的方式有以下几种：</p><ol><li><p>父子组件通信：父组件通过props向子组件传递数据，子组件通过$emit触发事件向父组件传递数据。</p></li><li><p>兄弟组件通信：可以通过一个空的Vue实例作为中央事件总线（Event Bus）来实现兄弟组件之间的通信。</p></li><li><p>跨级组件通信：可以通过provide/inject来实现跨级组件之间的通信。</p></li><li><p>Vuex：Vuex是Vue的状态管理库，可以实现组件之间的共享状态。</p></li><li><p>attrs/listeners：attrs可以将父组件中非prop特性绑定到子组件的根元素上，listeners可以将父组件中的事件监听器绑定到子组件的根元素上。</p></li><li><p>parent/children：parent可以访问父组件实例，children可以访问子组件实例。</p></li><li><p>ref：可以通过ref获取子组件实例，从而实现父组件调用子组件的方法或访问子组件的数据。</p></li></ol><h3 id="25、Vue常用的修饰符有哪些"><a href="#25、Vue常用的修饰符有哪些" class="headerlink" title="25、Vue常用的修饰符有哪些?"></a>25、Vue常用的修饰符有哪些?</h3><p>Vue常用的修饰符有以下几种：</p><ol><li>.prevent：阻止默认事件的发生</li><li>.stop：阻止事件冒泡</li><li>.capture：添加事件侦听器时使用事件捕获模式</li><li>.self：只当事件在该元素本身（而不是子元素）触发时触发回调</li><li>.once：事件只触发一次</li><li>.passive：滚动事件的默认行为 (即滚动行为) 将会立即触发，而不会等待 <code>onScroll</code> 完成。</li></ol><h3 id="26、Vue中的-nextTick有什么作用-底层如何实现"><a href="#26、Vue中的-nextTick有什么作用-底层如何实现" class="headerlink" title="26、Vue中的$nextTick有什么作用? 底层如何实现?"></a>26、Vue中的$nextTick有什么作用? 底层如何实现?</h3><p>Vue中的$nextTick方法用于在DOM更新后执行回调函数，确保在下次DOM更新循环结束之后执行其操作。它可以用于在更新后执行一些操作，例如获取更新后的DOM属性或在更新后触发某些操作。</p><p>底层实现上，Vue会将回调函数推入一个队列中，然后在下一个DOM更新循环结束时执行该队列中的所有回调函数。这样可以确保回调函数在DOM更新后执行，从而避免了在DOM更新期间对DOM进行操作的问题。</p><h3 id="27、v-show和v-if有什么区别"><a href="#27、v-show和v-if有什么区别" class="headerlink" title="27、v-show和v-if有什么区别?"></a>27、v-show和v-if有什么区别?</h3><p>v-show和v-if都是Vue中的条件渲染指令，但它们的实现方式不同。v-show通过控制元素的display属性来控制元素的显示和隐藏，而v-if是直接将元素从DOM树中添加或移除来控制元素的显示和隐藏。因此，当需要频繁切换元素的显示和隐藏时，使用v-show会比v-if更加高效。但是，当条件不满足时，v-if可以减少不必要的DOM元素的渲染，从而提高性能。因此，在选择使用v-show还是v-if时，需要根据具体情况进行权衡。</p><h3 id="28、有用过keep-alive吗-它有什么作用"><a href="#28、有用过keep-alive吗-它有什么作用" class="headerlink" title="28、有用过keep-alive吗? 它有什么作用?"></a>28、有用过keep-alive吗? 它有什么作用?</h3><p>是的，我使用过keep-alive。keep-alive是Vue内置组件，可以将组件缓存起来，避免多次渲染和销毁，提高页面性能。它可以在组件切换时保留组件状态和避免重新渲染，同时提供activated和deactivated生命周期钩子函数，可以在组件被激活和停用时执行相应的操作。</p><h3 id="29、如何实现一个虚拟DOM吗"><a href="#29、如何实现一个虚拟DOM吗" class="headerlink" title="29、如何实现一个虚拟DOM吗?"></a>29、如何实现一个虚拟DOM吗?</h3><p>实现虚拟DOM的基本思路是：用javaScript对象模拟真实DOM节点，然后通过比较新旧虚拟DOM的差异，最小化地更新真实DOM。</p><p>具体实现步骤如下：</p><ol><li><p>创建一个javaScript对象来表示DOM节点，包括节点类型、属性、子节点等信息。</p></li><li><p>将虚拟DOM转换成真实DOM并渲染到页面上。</p></li><li><p>当数据发生变化时，生成新的虚拟DOM，并与旧的虚拟DOM进行比较，找出差异。</p></li><li><p>根据差异更新真实DOM，完成页面的更新。</p></li></ol><p>实现虚拟DOM需要考虑的问题包括：如何表示DOM节点、如何比较差异、如何更新真实DOM等。常见的虚拟DOM实现包括React的Virtual DOM和Vue的Virtual DOM。</p><h3 id="30、为什么data属性是一个函数而不是一个对象，具体原因是什么"><a href="#30、为什么data属性是一个函数而不是一个对象，具体原因是什么" class="headerlink" title="30、为什么data属性是一个函数而不是一个对象，具体原因是什么?"></a>30、为什么data属性是一个函数而不是一个对象，具体原因是什么?</h3><p>在Vue中，组件实例的data属性必须是一个函数，而不是一个对象。这是因为组件实例在复用时，如果data属性是一个对象，那么它的状态将会被所有实例共享，这会导致状态污染和组件状态不可预测。而如果data属性是一个函数，每个组件实例都会返回一个新的data对象，从而保证了组件状态的独立性和可预测性。</p><h3 id="31、Vue2的初始化过程你有过了解吗，做了哪些事情"><a href="#31、Vue2的初始化过程你有过了解吗，做了哪些事情" class="headerlink" title="31、Vue2的初始化过程你有过了解吗，做了哪些事情?"></a>31、Vue2的初始化过程你有过了解吗，做了哪些事情?</h3><p>Vue2的初始化过程主要包括以下几个步骤：</p><ol><li><p>解析模板：将模板编译成渲染函数。</p></li><li><p>初始化实例：初始化Vue实例，包括合并配置项、初始化生命周期、事件、渲染等。</p></li><li><p>初始化响应式：对数据进行响应式处理，包括对data属性进行劫持，生成Watcher实例等。</p></li><li><p>初始化渲染：调用渲染函数，生成虚拟DOM，并将其挂载到真实DOM上。</p></li><li><p>创建Watcher实例：监听数据变化，当数据变化时重新调用渲染函数生成新的虚拟DOM，并更新到真实DOM上。</p></li><li><p>完成挂载：当虚拟DOM更新完成后，触发mounted钩子函数，表示组件已经挂载完成。</p></li></ol><p>总的来说，Vue2的初始化过程主要是将模板编译成渲染函数，然后通过响应式处理将数据与渲染函数关联起来，最终生成虚拟DOM并挂载到真实DOM上。</p><h3 id="32、Vue3初始化的一个大概流程"><a href="#32、Vue3初始化的一个大概流程" class="headerlink" title="32、Vue3初始化的一个大概流程?"></a>32、Vue3初始化的一个大概流程?</h3><p>Vue3的初始化流程大致如下：</p><ol><li>创建Vue实例时，会调用<code>createApp</code>函数，该函数返回一个应用实例。</li><li>应用实例会创建一个根组件实例，并将其挂载到指定的DOM元素上。</li><li>在根组件实例的<code>render</code>函数中，会通过<code>h</code>函数创建虚拟DOM。</li><li>Vue3使用<code>Proxy</code>对象来监听数据变化，当数据发生变化时，会触发更新函数。</li><li>更新函数会重新执行<code>render</code>函数，生成新的虚拟DOM。</li><li>Vue3使用<code>diff</code>算法对比新旧虚拟DOM的差异，并将差异应用到真实DOM上，完成页面更新。</li></ol><p>总的来说，Vue3相比Vue2在初始化过程中进行了很多优化，如使用<code>Proxy</code>对象代替<code>Object.defineProperty</code>实现数据响应式，使用<code>diff</code>算法优化页面更新等，提高了性能和开发效率。</p><h3 id="33、vue3响应式api如何编写"><a href="#33、vue3响应式api如何编写" class="headerlink" title="33、vue3响应式api如何编写?"></a>33、vue3响应式api如何编写?</h3><p>Vue3响应式API主要包括两个函数：<code>ref</code>和<code>reactive</code>。</p><ol><li><code>ref</code>函数：将基本类型数据转换为响应式对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 将0转换为响应式对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 访问响应式对象的值</span></span><br><span class="line">count.<span class="property">value</span>++ <span class="comment">// 修改响应式对象的值</span></span><br></pre></td></tr></table></figure><ol><li><p><code>reactive</code>函数：将对象转换为响应式对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;vue3&#x27;</span></span><br><span class="line">&#125;) <span class="comment">// 将对象转换为响应式对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) <span class="comment">// 访问响应式对象的值</span></span><br><span class="line">state.<span class="property">count</span>++ <span class="comment">// 修改响应式对象的值</span></span><br></pre></td></tr></table></figure></li></ol><p>在Vue3中，响应式对象的访问和修改都需要通过<code>.value</code>来进行，而响应式对象的创建则需要通过<code>ref</code>和`reactive</p><h3 id="34、在Vue项目中你是如何做的SSR渲染"><a href="#34、在Vue项目中你是如何做的SSR渲染" class="headerlink" title="34、在Vue项目中你是如何做的SSR渲染?"></a>34、在Vue项目中你是如何做的SSR渲染?</h3><p>在Vue中实现SSR渲染的步骤如下：</p><ol><li><p>创建一个Vue实例，并在其中定义好需要渲染的组件。</p></li><li><p>创建一个服务端入口文件，该文件需要导出一个函数，该函数会返回一个Promise对象。</p></li><li><p>在服务端入口文件中，使用createRenderer方法创建一个渲染器实例，并将其挂载到Vue实例上。</p></li><li><p>在服务端入口文件中，使用renderToString方法将Vue实例渲染成HTML字符串。</p></li><li><p>将渲染好的HTML字符串返回给客户端。</p></li><li><p>在客户端入口文件中，使用createApp方法创建一个Vue实例，并将其挂载到DOM节点上。</p></li><li><p>在客户端入口文件中，使用hydrate方法将服务端渲染好的HTML字符串和客户端生成的DOM节点进行比对，以达到复用DOM节点的目的。</p></li></ol><p>需要注意的是，在SSR渲染中，需要将一些只在客户端运行的代码进行特殊处理，以避免在服务端渲染时出现问题。例如，需要将window、document等全局变量进行特殊处理。</p><p>在Vue项目中实现SSR渲染，一般需要以下步骤：</p><ol><li>安装相关依赖，如vue-server-renderer、express等。</li><li>创建一个服务器入口文件，如server.js，用于创建一个express实例，并处理路由请求。</li><li>创建一个客户端入口文件，如entry-client.js，用于创建Vue实例，并挂载到DOM上。</li><li>创建一个服务端入口文件，如entry-server.js，用于创建Vue实例，并将其渲染成HTML字符串。</li><li>创建一个模板文件，如index.template.html，用于包含Vue实例渲染后的HTML字符串。</li><li>配置webpack，使其能够打包客户端和服务端的代码。</li><li>在服务器入口文件中，使用vue-server-renderer的createRenderer方法创建一个渲染器，并将其挂载到express实例上。</li><li>在路由处理函数中，使用渲染器的renderToString方法将Vue实例渲染成HTML字符串，并将其插入到模板文件中，最终返回给客户端。</li></ol><p>以上是一个简单的SSR渲染流程，具体实现还需要根据项目需求进行调整。</p><h2 id="React生态"><a href="#React生态" class="headerlink" title="React生态"></a>React生态</h2><h3 id="1、述说-React-和-Vue-的区别"><a href="#1、述说-React-和-Vue-的区别" class="headerlink" title="1、述说 React 和 Vue 的区别"></a>1、述说 React 和 Vue 的区别</h3><p>React 和 Vue 都是流行的前端框架，它们的主要区别在于设计哲学和语法风格。React 更加灵活，提供了更多的自由度和可扩展性，但需要更多的配置和自定义。Vue 更加简单易用，提供了更多的开箱即用的功能，但可能会限制一些高级用例。总的来说，React 更适合大型和复杂的应用程序，而 Vue 更适合小型和中型的应用程序。</p><h3 id="2、redux-主要解决什么问题-有什么优缺点"><a href="#2、redux-主要解决什么问题-有什么优缺点" class="headerlink" title="2、redux 主要解决什么问题? 有什么优缺点?"></a>2、redux 主要解决什么问题? 有什么优缺点?</h3><p>Redux主要解决的问题是应用程序的状态管理，它提供了一种可预测的状态管理方案，使得应用程序的状态变化变得可控和可追踪。Redux的优点是可以方便地进行状态管理，使得应用程序的状态变化更加可控和可追踪，同时也方便进行状态共享和状态持久化。缺点是需要编写大量的模板代码，使用起来相对复杂，同时也需要对React组件的生命周期有一定的了解。</p><h3 id="3、如何划分业务组件和技术组件"><a href="#3、如何划分业务组件和技术组件" class="headerlink" title="3、如何划分业务组件和技术组件?"></a>3、如何划分业务组件和技术组件?</h3><p>业务组件是指与业务相关的组件，例如登录组件、购物车组件等，它们通常是具有一定复杂度的，包含了业务逻辑的组件。而技术组件则是指与技术实现相关的组件，例如表单组件、弹窗组件等，它们通常是比较通用的，不包含具体业务逻辑的组件。</p><p>划分业务组件和技术组件的关键在于业务逻辑的抽象和复用。业务组件应该尽可能地抽象出通用的业务逻辑，以便在不同的业务场景中复用。而技术组件则应该尽可能地通用，以便在不同的业务场景中使用。这样可以提高代码的复用性和可维护性，同时也可以降低开发成本。</p><h3 id="4、React-生命周期函数"><a href="#4、React-生命周期函数" class="headerlink" title="4、React 生命周期函数"></a>4、React 生命周期函数</h3><p>React 生命周期指的是组件从创建到销毁的整个过程中，React 提供的一系列方法。这些方法可以让我们在组件的不同阶段执行一些操作，比如初始化状态、渲染组件、更新组件、卸载组件等。常用的生命周期方法包括：constructor、componentDidMount、shouldComponentUpdate、componentWillUnmount等。通过合理使用这些生命周期方法，可以优化组件的性能，提高用户体验。</p><h3 id="5、React-性能优化方案有哪些-和哪个周期函数关联性较大"><a href="#5、React-性能优化方案有哪些-和哪个周期函数关联性较大" class="headerlink" title="5、React 性能优化方案有哪些? 和哪个周期函数关联性较大?"></a>5、React 性能优化方案有哪些? 和哪个周期函数关联性较大?</h3><p>React 性能优化方案包括：</p><ol><li>使用 shouldComponentUpdate 或 PureComponent 避免不必要的渲染；</li><li>使用 React.memo 对组件进行记忆化处理，避免重复渲染；</li><li>使用虚拟列表或分页等技术，减少一次性渲染的数据量；</li><li>使用 React.lazy 和 Suspense 进行组件的懒加载，提高首屏加载速度；</li><li>使用 CDN 加速静态资源的加载；</li><li>使用 Webpack、Babel 等工具进行代码压缩和优化。</li></ol><p>其中，shouldComponentUpdate 或 PureComponent 与性能优化关联性较大，可以通过判断组件的 props 或 state 是否发生变化，来决定是否需要重新渲染组件。</p><h3 id="6、为什么虚拟-dom-会提高性能"><a href="#6、为什么虚拟-dom-会提高性能" class="headerlink" title="6、为什么虚拟 dom 会提高性能?"></a>6、为什么虚拟 dom 会提高性能?</h3><p>虚拟 DOM 可以提高性能的原因是它可以减少 DOM 操作的次数。在 React 中，当组件的状态发生变化时，React 会先生成一棵虚拟 DOM 树，然后通过比较新旧两棵虚拟 DOM 树的差异，找出需要更新的部分，最后只更新这些部分对应的真实 DOM 节点。这样做的好处是，可以避免频繁地操作真实 DOM，从而减少浏览器的重绘和回流，提高页面的性能。</p><h3 id="7、DOM-Diff-算法"><a href="#7、DOM-Diff-算法" class="headerlink" title="7、DOM Diff 算法?"></a>7、DOM Diff 算法?</h3><p>DOM Diff 算法是 React 中用于比较两个虚拟 DOM 树差异的算法。它通过对比新旧两个虚拟 DOM 树的节点，找出需要更新的节点，从而避免了不必要的 DOM 操作，提高了页面的渲染效率。在比较过程中，DOM Diff 算法会尽可能地复用已有的 DOM 节点，而不是直接删除和重新创建节点，从而减少了浏览器的重排和重绘。在 React 中，DOM Diff 算法主要与 shouldComponentUpdate 生命周期函数相关联，通过该函数的返回值来判断是否需要进行 DOM Diff 算法的比较。</p><h3 id="8、简述-flux-思想"><a href="#8、简述-flux-思想" class="headerlink" title="8、简述 flux 思想"></a>8、简述 flux 思想</h3><p>Flux 是一种前端架构思想，它强调单向数据流，将应用程序分为四个部分：视图、动作、调度器和存储器。视图层负责展示数据，动作层负责触发用户操作，调度器层负责协调动作和存储器之间的通信，存储器层负责存储和管理数据。这种架构思想可以提高应用程序的可维护性和可扩展性，同时也可以减少代码的复杂度和耦合度。</p><h3 id="9、React-项目用过什么脚手架"><a href="#9、React-项目用过什么脚手架" class="headerlink" title="9、React 项目用过什么脚手架?"></a>9、React 项目用过什么脚手架?</h3><p>我在React项目中使用过最常见的脚手架是create-react-app。它是一个官方支持的工具，可以快速搭建React项目的基础结构，同时也提供了许多有用的功能和工具，如热重载、代码分割、ESLint等。此外，我还使用过其他一些脚手架，如Next.js和Gatsby，它们都是基于React的高级框架，提供了更多的功能和工具，如服务器渲染、静态网站生成等。</p><h3 id="10、React-解决了什么问题"><a href="#10、React-解决了什么问题" class="headerlink" title="10、React 解决了什么问题?"></a>10、React 解决了什么问题?</h3><p>React 解决了传统前端开发中复杂 UI 组件的开发和维护问题，通过组件化开发和虚拟 DOM 技术提高了页面渲染性能，同时也提供了一种清晰的数据流管理方式（Flux 架构），使得前端开发更加高效和可维护。</p><h3 id="11、React-的工作原理"><a href="#11、React-的工作原理" class="headerlink" title="11、React 的工作原理?"></a>11、React 的工作原理?</h3><p>React 的工作原理是基于虚拟 DOM 的。当组件状态发生变化时，React 会重新计算虚拟 DOM 树，并将新旧虚拟 DOM 树进行比较，找出需要更新的部分，最后只更新需要更新的部分到真实 DOM 上，从而提高了性能和渲染效率。同时，React 还采用了单向数据流的思想，保证了组件之间的数据传递和状态管理的可控性。</p><h3 id="12、使用-React-有何优点"><a href="#12、使用-React-有何优点" class="headerlink" title="12、使用 React 有何优点?"></a>12、使用 React 有何优点?</h3><p>使用 React 的优点包括：</p><ol><li>组件化开发，提高代码复用性和可维护性；</li><li>虚拟 DOM 技术，提高页面渲染性能；</li><li>单向数据流，方便数据管理和状态控制；</li><li>生态丰富，社区活跃，有大量的第三方库和工具支持；</li><li>支持服务端渲染，提高首屏加载速度和 SEO 优化；</li><li>JSX 语法简洁易懂，提高开发效率。</li></ol><h3 id="13、展示组件-Presentational-component-和-容器组件-Container-component-之间有何不同"><a href="#13、展示组件-Presentational-component-和-容器组件-Container-component-之间有何不同" class="headerlink" title="13、展示组件(Presentational component)和 容器组件(Container component) 之间有何不同?"></a>13、展示组件(Presentational component)和 容器组件(Container component) 之间有何不同?</h3><p>展示组件(Presentational component)是负责展示UI的组件，通常只负责接收props并渲染UI，不涉及业务逻辑。容器组件(Container component)则是负责管理数据和业务逻辑的组件，通常会包含多个展示组件，并将数据和逻辑传递给它们。容器组件通常会与Redux等状态管理库结合使用，以便更好地管理应用程序的状态。因此，展示组件和容器组件的主要区别在于它们所关注的内容不同，展示组件关注UI的呈现，而容器组件关注数据和业务逻辑的管理。</p><h3 id="14、类组件-Class-component-和-函数式组件-Functional-component-之间有何不同"><a href="#14、类组件-Class-component-和-函数式组件-Functional-component-之间有何不同" class="headerlink" title="14、类组件(Class component) 和 函数式组件(Functional component)之间有何不同?"></a>14、类组件(Class component) 和 函数式组件(Functional component)之间有何不同?</h3><p>类组件是使用类定义的组件，可以使用state和生命周期方法，而函数式组件是使用函数定义的组件，不能使用state和生命周期方法。函数式组件通常比类组件更简洁，但在需要处理复杂逻辑或需要使用生命周期方法时，类组件更为适合。随着React Hooks的出现，函数式组件也可以使用state和生命周期方法，使得两种组件的差异变得更加模糊。</p><h3 id="15、状态-state-和-属性-props-之间有何不同"><a href="#15、状态-state-和-属性-props-之间有何不同" class="headerlink" title="15、状态(state)和 属性(props) 之间有何不同?"></a>15、状态(state)和 属性(props) 之间有何不同?</h3><p>状态(state)是组件内部的数据，可以通过setState()方法进行更新。而属性(props)是从父组件传递给子组件的数据，子组件不能直接修改props，只能通过父组件传递新的props来更新。</p><h3 id="16、应该在-React-组件的何处发起-Ajax-请求"><a href="#16、应该在-React-组件的何处发起-Ajax-请求" class="headerlink" title="16、应该在 React 组件的何处发起 Ajax 请求?"></a>16、应该在 React 组件的何处发起 Ajax 请求?</h3><p>最好在 React 组件的 componentDidMount() 生命周期方法中发起 Ajax 请求。这是因为 componentDidMount() 方法在组件挂载后立即调用，因此可以确保组件已经准备好接收数据。此外，如果在组件挂载之前发起 Ajax 请求，可能会导致数据在组件挂载后才到达，从而导致组件无法正确渲染。</p><h3 id="17、在-React-中，refs-的作用是什么"><a href="#17、在-React-中，refs-的作用是什么" class="headerlink" title="17、在 React 中，refs 的作用是什么?"></a>17、在 React 中，refs 的作用是什么?</h3><p>在 React 中，refs 的作用是为了获取组件或者 DOM 元素的引用。通过 refs，我们可以在组件中直接访问到 DOM 元素，从而可以对其进行操作，比如获取输入框的值、设置焦点等。除此之外，refs 还可以用于在父组件中调用子组件的方法，从而实现组件之间的通信。需要注意的是，refs 应该尽量避免使用，因为它会破坏组件的封装性，增加代码的复杂度。</p><h3 id="18、何为高阶组件-higher-order-component"><a href="#18、何为高阶组件-higher-order-component" class="headerlink" title="18、何为高阶组件(higher order component)?"></a>18、何为高阶组件(higher order component)?</h3><p>高阶组件是一个函数，它接受一个组件并返回一个新的组件。它的目的是通过将通用的逻辑从组件中提取出来，使代码更加可重用和可维护。高阶组件可以用于添加新的功能、修改组件的行为或者将多个组件组合在一起。</p><h3 id="19、为什么建议传递给-setState-的参数是一个-callback-而不是一个对象"><a href="#19、为什么建议传递给-setState-的参数是一个-callback-而不是一个对象" class="headerlink" title="19、为什么建议传递给 setState 的参数是一个 callback 而不是一个对象?"></a>19、为什么建议传递给 setState 的参数是一个 callback 而不是一个对象?</h3><p>建议传递给 <code>setState</code> 的参数是一个 callback 而不是一个对象，因为 <code>setState</code> 是异步的，如果传递一个对象，那么在 <code>setState</code> 执行之前，该对象可能会被修改，导致状态更新不准确。而使用 callback 的方式，可以确保在 <code>setState</code> 执行时获取到最新的状态值，从而避免了这个问题。此外，使用 callback 的方式还可以确保多个 <code>setState</code> 调用按照预期顺序执行。</p><h3 id="20、除了在构造函数中绑定-this，还有其它方式吗"><a href="#20、除了在构造函数中绑定-this，还有其它方式吗" class="headerlink" title="20、除了在构造函数中绑定 this，还有其它方式吗?"></a>20、除了在构造函数中绑定 this，还有其它方式吗?</h3><p>是的，还有其他方式可以绑定 this。其中一种方式是使用箭头函数，因为箭头函数会自动绑定当前上下文的 this。另一种方式是使用 Function.prototype.bind() 方法，该方法可以将函数绑定到指定的上下文中。例如，可以使用以下代码将 handleClick 方法绑定到当前组件的上下文中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，可以使用以下代码使用箭头函数来定义 handleClick 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21、怎么阻止组件的演染"><a href="#21、怎么阻止组件的演染" class="headerlink" title="21、怎么阻止组件的演染?"></a>21、怎么阻止组件的演染?</h3><p>可以使用 shouldComponentUpdate 方法来阻止组件的渲染。shouldComponentUpdate 方法接收两个参数：nextProps 和 nextState，可以在该方法中对比当前的 props 和 state 与下一个 props 和 state 是否相同，如果相同则返回 false，否则返回 true，从而控制组件是否需要重新渲染。另外，React 还提供了 PureComponent 组件，它会自动帮我们实现 shouldComponentUpdate 方法，对于一些简单的组件可以直接使用 PureComponent 来提高性能。</p><h3 id="22、当渲染一个列表时，何为-key-设置-key-的目的是什么"><a href="#22、当渲染一个列表时，何为-key-设置-key-的目的是什么" class="headerlink" title="22、当渲染一个列表时，何为 key? 设置 key 的目的是什么?"></a>22、当渲染一个列表时，何为 key? 设置 key 的目的是什么?</h3><p>在渲染一个列表时，key 是一个字符串或数字，用于标识列表中的每个元素。设置 key 的目的是帮助 React 识别哪些元素发生了变化，从而提高性能。当列表中的元素没有 key 时，React 会使用默认的算法进行比较，这可能会导致不必要的重新渲染。因此，为列表中的每个元素设置唯一的 key 是一个很好的实践。</p><h3 id="23、为什么要设计-React-hook，它-解决了什么问题"><a href="#23、为什么要设计-React-hook，它-解决了什么问题" class="headerlink" title="23、为什么要设计 React hook，它 解决了什么问题?"></a>23、为什么要设计 React hook，它 解决了什么问题?</h3><p>React Hook 是 React 16.8 引入的新特性，它可以让我们在不编写 class 组件的情况下使用 state 和其他 React 特性。React Hook 的设计目的是为了解决 React 在处理复杂组件时，代码可读性和复用性变得困难的问题。使用 Hook 可以将组件的逻辑拆分成更小的、可重用的部分，从而使代码更加清晰、简洁。此外，Hook 还可以解决 class 组件中 this 绑定的问题，使得代码更加易于维护。</p><h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><h3 id="1、echarts-的基本用法"><a href="#1、echarts-的基本用法" class="headerlink" title="1、echarts 的基本用法?"></a>1、echarts 的基本用法?</h3><p>Echarts 是一个基于 javaScript 的开源可视化库，用于构建交互式的图表和可视化数据。它提供了丰富的图表类型和灵活的配置选项，可以轻松地实现各种数据可视化需求。使用 Echarts 的基本步骤如下：</p><ol><li>引入 Echarts 库和相关主题和插件。</li><li>创建一个 DOM 容器，用于渲染图表。</li><li>初始化一个 Echarts 实例，并配置相关参数。</li><li>调用实例的 setOption 方法，设置图表的数据和样式。</li><li>可选地，监听图表的事件，实现交互和动态更新。</li></ol><p>例如，创建一个简单的柱状图可以按照以下步骤：</p><ol><li>引入 Echarts 库和主题：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/echarts/dist/theme/macarons.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建一个 DOM 容器：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>3.初始化 Echarts 实例</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chart&#x27;</span>), <span class="string">&#x27;macarons&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>配置图表参数：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;柱状图示例&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>设置图表数据和样式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chart.<span class="title function_">setOption</span>(option);</span><br></pre></td></tr></table></figure><p>例如，创建一个简单的柱状图可以按照以下步骤：</p><h3 id="2、如何在-vue-中引入"><a href="#2、如何在-vue-中引入" class="headerlink" title="2、如何在 vue 中引入 ?"></a>2、如何在 vue 中引入 ?</h3><p>在 Vue 中引入 echarts，可以通过以下步骤：</p><ol><li><p>安装 echarts：使用 npm 或 yarn 安装 echarts。</p></li><li><p>引入 echarts：在需要使用 echarts 的组件中，使用 import 引入 echarts。</p></li><li><p>使用 echarts：在组件中使用 echarts 的 API 进行图表的绘制。</p></li></ol><p>示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 echarts</span></span><br><span class="line">npm install echarts --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中引入 echarts</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中使用 echarts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化图表</span></span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myChart&#x27;</span>))</span><br><span class="line">    <span class="comment">// 绘制图表</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">      <span class="comment">// 图表配置项</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、如何绘制条形图"><a href="#3、如何绘制条形图" class="headerlink" title="3、如何绘制条形图?"></a>3、如何绘制条形图?</h3><p>使用 echarts 绘制条形图，需要先引入 echarts 库，然后在 HTML 页面中创建一个容器元素，如 div，设置其宽高和样式。接着，在 javaScript 中创建一个 echarts 实例，指定容器元素的 ID，然后配置图表的属性，包括 x 轴和 y 轴的数据、颜色、图例等。最后调用实例的 setOption 方法，将配置项传入即可绘制出条形图。具体代码实现可以参考 echarts 官方文档中的示例。</p><h3 id="4、切换时卡顿如何解决"><a href="#4、切换时卡顿如何解决" class="headerlink" title="4、切换时卡顿如何解决?"></a>4、切换时卡顿如何解决?</h3><p>可以尝试以下几种方法来解决echarts切换时卡顿的问题：</p><ol><li><p>减少数据量：如果数据量过大，可以考虑只显示部分数据或者进行分页加载。</p></li><li><p>使用Web Worker：将echarts的计算放在Web Worker中，可以避免主线程被占用而导致卡顿。</p></li><li><p>使用缓存：对于一些静态数据，可以将其缓存起来，避免每次切换都重新计算。</p></li><li><p>使用虚拟化技术：对于一些大数据量的图表，可以使用虚拟化技术，只渲染当前可见区域的数据，避免渲染全部数据导致卡顿。</p></li><li><p>优化代码：对于一些复杂的计算，可以优化代码，减少计算量，提高性能。</p></li></ol><h3 id="5、echarts-图表自适应-div-resize-问题"><a href="#5、echarts-图表自适应-div-resize-问题" class="headerlink" title="5、echarts 图表自适应 div resize 问题?"></a>5、echarts 图表自适应 div resize 问题?</h3><p>可以使用 echarts 的 resize 方法来解决图表自适应 div resize 问题。在 div 的 resize 事件中调用 resize 方法即可。具体实现可以参考以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 div 元素</span></span><br><span class="line"><span class="keyword">var</span> chartDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chart&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化图表</span></span><br><span class="line"><span class="keyword">var</span> chart = echarts.<span class="title function_">init</span>(chartDiv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 div 的 resize 事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 调用 resize 方法</span></span><br><span class="line">  chart.<span class="title function_">resize</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="代码编程"><a href="#代码编程" class="headerlink" title="代码编程"></a>代码编程</h2><h3 id="1、this-指向哪里"><a href="#1、this-指向哪里" class="headerlink" title="1、this 指向哪里?"></a>1、this 指向哪里?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="2、如何判断对象为空"><a href="#2、如何判断对象为空" class="headerlink" title="2、如何判断对象为空"></a>2、如何判断对象为空</h3><p>可以使用 <code>Object.keys()</code> 方法判断对象是否为空，如果返回的数组长度为0，则说明对象为空。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmptyObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmptyObject</span>(obj1)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmptyObject</span>(obj2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="3、事件循环，下面题目输出什么，为什么"><a href="#3、事件循环，下面题目输出什么，为什么" class="headerlink" title="3、事件循环，下面题目输出什么，为什么?"></a>3、事件循环，下面题目输出什么，为什么?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：1 7 2 5 4 6 3。</p><p>解释：</p><ol><li>首先输出 1 和 7，因为它们是同步代码，按照顺序执行。</li><li>接着输出 2 和 5，因为它们是 Promise 的微任务，会在主线程任务执行完后立即执行。</li><li>然后输出 4，因为它是定时器的宏任务，会在主线程任务执行完后进入任务队列等待执行。</li><li>接着输出 6，因为它是 Promise 的微任务，会在 5 执行完后立即执行。</li><li>最后输出 3，因为它是定时器的宏任务，会在 4 执行完后进入任务队列等待执行。</li></ol><h3 id="4、当-a-，下面条件成立"><a href="#4、当-a-，下面条件成立" class="headerlink" title="4、当 a = ? ，下面条件成立"></a>4、当 a = ? ，下面条件成立</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&#x27;);</span></span><br></pre></td></tr></table></figure><p>这是一个经典的面试题，考察的是对 JavaScript 类型转换和隐式类型转换的理解。答案是可以通过自定义对象的 toString() 方法来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">i</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 a 是一个对象，它有一个 i 属性和一个 toString() 方法。当 a 被转换为字符串时，会调用 toString() 方法，每次返回 a.i 的值并将其加 1。因此，当 a 被比较为数字 1、2、3 时，它们都会返回 true，从而触发 if 语句中的代码。</p><h3 id="5、函数科里化-，实现一个add-函数，能满足以下能力"><a href="#5、函数科里化-，实现一个add-函数，能满足以下能力" class="headerlink" title="5、函数科里化 ，实现一个add 函数，能满足以下能力:"></a>5、函数科里化 ，实现一个add 函数，能满足以下能力:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)() =&gt;输出<span class="number">6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)() =&gt; 输出<span class="number">6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)(<span class="number">7</span>,<span class="number">8</span>)() =&gt; 输出 <span class="number">36</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)() =&gt; 输出 <span class="number">21</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>函数科里化是将一个接受多个参数的函数转化为接受单一参数（第一个参数）的函数，并返回一个新的函数，该新函数接受余下的参数并返回结果。实现一个add函数的科里化可以使用闭包和递归的方式，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">// 将参数转化为数组</span></span><br><span class="line">  <span class="keyword">let</span> sum = args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b); <span class="comment">// 计算参数的和</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> innerArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); <span class="comment">// 将内部参数转化为数组</span></span><br><span class="line">    <span class="keyword">if</span> (innerArgs.<span class="property">length</span> === <span class="number">0</span>) &#123; <span class="comment">// 如果没有内部参数，则返回计算结果</span></span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则将内部参数与外部参数合并并递归调用inner函数</span></span><br><span class="line">      args = args.<span class="title function_">concat</span>(innerArgs);</span><br><span class="line">      sum = args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">      <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner; <span class="comment">// 返回inner函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、假设前端需要发-n-个请求-n很大-，写一个方法同时只并发10个请求，直到-n-个请求完成"><a href="#6、假设前端需要发-n-个请求-n很大-，写一个方法同时只并发10个请求，直到-n-个请求完成" class="headerlink" title="6、假设前端需要发 n 个请求(n很大)，写一个方法同时只并发10个请求，直到 n 个请求完成"></a>6、假设前端需要发 n 个请求(n很大)，写一个方法同时只并发10个请求，直到 n 个请求完成</h3><p>可以使用Promise.all()和async/await来实现。将所有请求的Promise对象存储在一个数组中，然后使用for循环遍历数组，每次取出10个Promise对象，使用Promise.all()并发执行这10个请求，等待这10个请求全部完成后再继续取出下一个10个Promise对象执行，直到所有请求都完成。代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendRequests</span>(<span class="params">requests</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> len = requests.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; len) &#123;</span><br><span class="line">    <span class="keyword">const</span> promises = requests.<span class="title function_">slice</span>(index, index + <span class="number">10</span>).<span class="title function_">map</span>(<span class="function"><span class="params">request</span> =&gt;</span> <span class="title function_">fetch</span>(request));</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">    index += <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All requests have been sent!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、实现转化下划线命名到驼峰命名"><a href="#7、实现转化下划线命名到驼峰命名" class="headerlink" title="7、实现转化下划线命名到驼峰命名"></a>7、实现转化下划线命名到驼峰命名</h3><p>可以使用正则表达式和replace方法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/_([a-z])/g</span>, <span class="keyword">function</span>(<span class="params">match, p1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> p1.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其中，正则表达式-a-z-g匹配下划线后面的小写字母，并使用replace方法将其替换为对应的大写字母。"><a href="#其中，正则表达式-a-z-g匹配下划线后面的小写字母，并使用replace方法将其替换为对应的大写字母。" class="headerlink" title="其中，正则表达式/_([a-z])/g匹配下划线后面的小写字母，并使用replace方法将其替换为对应的大写字母。"></a>其中，正则表达式<code>/_([a-z])/g</code>匹配下划线后面的小写字母，并使用replace方法将其替换为对应的大写字母。</h3><h3 id="8、实现对象深拷贝"><a href="#8、实现对象深拷贝" class="headerlink" title="8、实现对象深拷贝"></a>8、实现对象深拷贝</h3><p>可以使用 JSON.parse(JSON.stringify(obj)) 来实现对象的深拷贝，但是该方法有一些限制，例如无法拷贝函数、正则表达式等特殊类型的属性。如果需要拷贝这些特殊类型的属性，可以使用递归实现深拷贝，或者使用第三方库如 Lodash 的深拷贝方法。</p><h3 id="9、如果已经有三个-promise，A、B-和-C，想串行执行，该怎么写"><a href="#9、如果已经有三个-promise，A、B-和-C，想串行执行，该怎么写" class="headerlink" title="9、如果已经有三个 promise，A、B 和 C，想串行执行，该怎么写?"></a>9、如果已经有三个 promise，A、B 和 C，想串行执行，该怎么写?</h3><p>可以使用 Promise 的 then 方法来串行执行三个 promise，即在 A 的 then 方法中调用 B，在 B 的 then 方法中调用 C。代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">A</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">B</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">C</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 A、B、C 分别代表三个 promise。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 chatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2月份面试题总结</title>
      <link href="/post/17765.html"/>
      <url>/post/17765.html</url>
      
        <content type="html"><![CDATA[<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof返回一个表示数据类型的字符串，返回结果包括：number、boolean、string、symbol、object、undefined、function等7种数据类型，但不能判断null、array等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> array                  <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>;    <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span>;   <span class="comment">//fals</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a><strong>JS的数据类型</strong></h2><ul><li>基本数据类型：Undefined、Null、Boolean、Number、String、Symbol (ES6新增，表示独一无二的值)</li><li>引用数据类型统称为Object对象，主要包括对象、数组和函数。</li></ul><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a><strong>浅拷贝与深拷贝</strong></h2><ul><li>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</li></ul><blockquote><p><code>浅拷贝</code>的实现方式：<br>Object.assign()：需注意的是目标对象只有一层的时候，是深拷贝<br>Array.prototype.concat()<br>Array.prototype.slice()</p></blockquote><ul><li>深拷贝就是在拷贝数据的时候，将数据的所有引用结构都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。</li></ul><blockquote><p><code>深拷贝</code>的实现方式：<br>热门的函数库lodash，也有提供_.cloneDeep用来做深拷贝<br>jquery 提供一个$.extend可以用来做深拷贝<br>JSON.parse(JSON.stringify())<br>手写递归方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">origin,target</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> target=target||&#123;&#125;,</span><br><span class="line">        arrStr=<span class="string">&#x27;[Object Array]&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.<span class="title function_">hasOwnProperty</span>(prop))&#123;</span><br><span class="line">            <span class="keyword">if</span>(origin[prop]!==<span class="string">&#x27;null&#x27;</span>&amp;&amp;<span class="title function_">typeof</span>(origin[prop])==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">                target[prop]=<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(origin[prop]) == arrStr ? [] : &#123;&#125;;</span><br><span class="line">                <span class="title function_">deepClone</span>(origin[prop],target[prop]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[prop]=origin[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中4种"><a href="#垂直居中4种" class="headerlink" title="垂直居中4种"></a>垂直居中4种</h2><p>1.已知浮动元素的宽高<br>设定父元素为相对定位,浮动元素为绝对定位 top 和 left 为 50%,再设置浮动元素的 margin-left/top 值为浮动元素宽高一半的负值. </p><p>2.不知道浮动元素的宽高<br>设定父元素为相对定位,浮动元素为绝对定位.且 left/right/top/bottom 设置为 0,再给浮动元素设置 margin auto. 另:如何居中 div? 答:默认 div 有宽度,设置 margin:0 auto; </p><h2 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a><strong>居中布局</strong></h2><ul><li><p>水平居中</p><ul><li>行内元素: text-align:center</li><li>块级元素: margin:0 auto</li><li>绝对定位和移动: absolute + transform</li><li>绝对定位和负边距: absolute + margin</li><li>flex布局: flex + justify-content:center</li></ul></li><li><p>垂直居中</p><ul><li>子元素为单行文本: line-height:height</li><li>absolute + transform</li><li>flex + align-items:center</li><li>table: display:table-cell; vertical-align: middle</li><li>利用position和top和负margin</li></ul></li><li><p>水平垂直居中</p><ul><li>已知元素宽高:绝对定位+margin:auto:</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>已知元素宽高:  绝对定位+负margin</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>absolute+transform</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;    </span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex + justify-content + align-items</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">600px</span>;  </span><br><span class="line">     <span class="attribute">display</span>:flex;</span><br><span class="line">     <span class="attribute">justify-content</span>:center;  </span><br><span class="line">     <span class="attribute">align-items</span>:center;     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">background</span>: green;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="简介盒子模型"><a href="#简介盒子模型" class="headerlink" title="简介盒子模型."></a>简介盒子模型.</h2><p>CSS 的盒子模型有两种:IE 盒子模型、标准的 W3C 盒子模型模型. </p><p>内容(content)、填充(padding)、边框(border)、边界(margin)都是盒模型的基本属性.</p><p>区别: </p><p>标准的 W3C 盒子模型模型: 设置的 border 值只包括 content 和 padding.<br>IE 盒子模型:设置的 border 值包括 content,padding 和 border 值</p><h2 id="1-介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？"><a href="#1-介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？" class="headerlink" title="1. 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？"></a><strong>1. 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？</strong></h2><ul><li>标准盒子模型：宽度=内容的宽度（content）+ border + padding + margin</li><li>低版本IE盒子模型：宽度=内容宽度（content+border+padding）+ margin</li></ul><h2 id="2-box-sizing属性？"><a href="#2-box-sizing属性？" class="headerlink" title="2. box-sizing属性？"></a><strong>2. box-sizing属性？</strong></h2><ul><li>用来控制元素的盒子模型的解析模式，默认为content-box</li><li>context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽</li><li>border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽</li></ul><h2 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a><strong>页面导入样式时，使用link和@import有什么区别？</strong></h2><ul><li>相同的地方，都是外部引用CSS方式</li><li>区别：<ul><li>link是xhtml标签，除了加载css外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li><li>link引用CSS时候，页面载入时同时加载；@import需要在页面完全加载以后加载，而且@import被引用的CSS会等到引用它的CSS文件被加载完才加载。</li><li>link是xhtml标签，无兼容问题；@import是在css2.1提出来的，低版本的浏览器不支持。</li><li>link支持使用javascript控制去改变样式，而@import不支持。</li><li>link方式的样式的权重高于@import的权重。</li><li>import在html使用时候需要<code>&lt;style type=&quot;text/css&quot;&gt;</code>标签</li><li></li></ul></li></ul><h2 id="无样式内容闪烁（FOUC）Flash-of-Unstyle-Content"><a href="#无样式内容闪烁（FOUC）Flash-of-Unstyle-Content" class="headerlink" title="无样式内容闪烁（FOUC）Flash of Unstyle Content"></a><strong>无样式内容闪烁（FOUC）Flash of Unstyle Content</strong></h2><ul><li>@import导入CSS文件会等到文档加载完后再加载CSS样式表。因此，在页面DOM加载完成到CSS导入完成之间会有一段时间页面上的内容是没有样式的。</li><li>解决方法：使用link标签加载CSS样式文件。因为link是顺序加载的，这样页面会等到CSS下载完之后再下载HTML文件，这样先布局好，就不会出现FOUC问题。</li></ul><p>如何判断对象是否含有某key</p><h2 id="级联式组件"><a href="#级联式组件" class="headerlink" title="级联式组件"></a><a href="https://segmentfault.com/a/1190000020120998?sort=newest">级联式组件</a></h2><h3 id="三种js事件绑定方式"><a href="#三种js事件绑定方式" class="headerlink" title="三种js事件绑定方式"></a>三种js事件绑定方式</h3><ul><li>DOM里直接绑定事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM click......&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js代码里获取DOM元素进行事件绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;脚本 click......&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过监听处理相应的事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener click......&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, submit, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>在DOM结构如果绑定两个 “onclick” 事件，只会执行第一个</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit1()&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit2()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click1......&#x27;</span>); <span class="comment">// 执行这个</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click2......&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在脚本通过匿名函数的方式绑定的只会执行最后一个事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click1......&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click2......&#x27;</span>); <span class="comment">// 执行这个</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>用 <code>addeventlistener</code>可以绑定同一个事件多次，且都会执行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click1......&#x27;</span>); <span class="comment">// 先执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click2......&#x27;</span>); <span class="comment">// 后执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, submit1, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, submit2, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>三种事件同时绑定时，DOM结构绑定的事件会失效，只执行脚本和监听绑定的事件，且脚本事件的执行优先级高于监听事件的优先级</li></ul><p>注：脚本事件和DOM属性事件在本质上是一样的。因为元素属性事件是写在元素中的，所以它会首先触发，然后再触发JS中的事件（addEventListener事件、on事件）。当它们同时存在时，脚本事件会覆盖元素属性事件（本质相同、后面的脚本事件会覆盖前面的脚本事件）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit1()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM click......&#x27;</span>) <span class="comment">// 不执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">submit2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener click......&#x27;</span>); <span class="comment">// 后执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, submit2, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;脚本 click......&#x27;</span>); <span class="comment">// 先执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><h2 id="半像素"><a href="#半像素" class="headerlink" title="半像素"></a>半像素</h2><h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><h2 id="for…of-、-for…in-forEach、-map的区别"><a href="#for…of-、-for…in-forEach、-map的区别" class="headerlink" title="for…of 、 for…in , forEach、 map的区别"></a>for…of 、 for…in , forEach、 map的区别</h2><h4 id="1、for…of-for…in"><a href="#1、for…of-for…in" class="headerlink" title="1、for…of ,for…in"></a>1、for…of ,for…in</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">action</span>: &#123;</span><br><span class="line">    <span class="number">123</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="number">456</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125; <span class="comment">// 打印：0，1，2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125; <span class="comment">// 打印：name，age，action</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125; <span class="comment">// 打印：11，22，33</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(i)&#125; <span class="comment">// 报错：Uncaught TypeError: obj1 is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys() 获取keys的集合，返回值是一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))  <span class="comment">// 打印：[&quot;0&quot;,&quot;1&quot;,&quot;2&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)) <span class="comment">// 打印：[&quot;name&quot;,&quot;age&quot;,&quot;action&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure><p>使用for…in循环时，获得的是数组的下标；使用for…of循环时，获得的是数组的元素值。<br><code>for...in 循环对象可以是数组，也可以是对象</code><br><code>for...of 循环对象是数组</code></p><h4 id="2、forEach-和-map"><a href="#2、forEach-和-map" class="headerlink" title="2、forEach() 和 map()"></a>2、<a href="https://so.csdn.net/so/search?q=forEach&amp;spm=1001.2101.3001.7020">forEach</a>() 和 map()</h4><p>forEach 就是一个循环，操作对象是数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">currentValue,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>map也是一个循环，操作对象是数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">currentValue,index,arr</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 返回一个新数组</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>forEach()会修改原来的数组。<br>而map()方法返回一个新的数组，原本的数组不受到影响。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下方提供了一个数组，如果我们想将其中的每一个元素翻倍，我们可以使用map和forEach来达到目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[index] = num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果：arr = [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> doubled = arr.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果：doubled = [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="comment">// arr = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><p>注意，forEach是不会返回有意义的值的。</p><p>我们在回调函数中直接修改arr的值。</p><p>哪个更好呢？</p><p>取决于你想做什么。</p><blockquote><p>forEach适合于你并不打算改变数据的时候，而只是想用数据做一些事情 – 比如存入数据库或则打印出来。</p><p>map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)来玩出更多的花样。</p></blockquote><p>核心要点：<br>能用forEach()做到的，map()同样可以。反过来也是如此。</p><h3 id="为什么要分包"><a href="#为什么要分包" class="headerlink" title="为什么要分包"></a>为什么要分包</h3><blockquote><p>优化项目首次启动的下载时间;小程序默认就是整包(主包)下载,但这会导致整个项目只有在全部加载完毕后才会回显到用户眼前，这样虽然可以使用加载动画进行优化，但也会有部分可能导致用户流失；<br>防止项目超出小程序官方对小程序项目打包后的大小限制；<br>若不分包，整个程序最大限制不能超过2M，分包后，整个项目(包含主包+子包)最大不能超过16M,单个包不能超过2M (这样就规避了项目最大不得超过2m的限制)</p></blockquote><h2 id="如何去除两个行内块元素中间的间隙？"><a href="#如何去除两个行内块元素中间的间隙？" class="headerlink" title="如何去除两个行内块元素中间的间隙？"></a><strong>如何去除两个行内块元素中间的间隙？</strong></h2><p>(1).给父元素设置字体大小为font-size: 0px;子元素再重新设置字体大小。</p><p>(2).去掉在代码编写时的换行,把两个html元素标签挨着写。eg:<span>&lt;/span&gt;<span></span></p><p>(3).使用margin-right负值（不推荐）</p><p>(4).将其设置成浮动元素。</p><p><strong>注意：</strong></p><p>如以上代码，会出现第一个button下沉的情况。原因是文字的基线问题。</p><p>可以在每个button加上vertical-align:middle；</p><p>或者给其余两个button加上文字。</p><p>如果是浮动的话，自然也就不存在这个问题。</p><h2 id="css参数"><a href="#css参数" class="headerlink" title="css参数"></a>css参数</h2><h2 id="cookies，sessionStorage和localStorage的区别？"><a href="#cookies，sessionStorage和localStorage的区别？" class="headerlink" title="cookies，sessionStorage和localStorage的区别？"></a><strong>cookies，sessionStorage和localStorage的区别？</strong></h2><ul><li>共同点：都是保存在浏览器端，且是同源的。</li><li>区别：<ul><li>cookies是为了标识用户身份而存储在用户本地终端上的数据，始终在同源http请求中携带，即cookies在浏览器和服务器间来回传递，而sessionstorage和localstorage不会自动把数据发给服务器，仅在本地保存。</li><li>存储大小的限制不同。cookie保存的数据很小，不能超过4k，而sessionstorage和localstorage保存的数据大，可达到5M。</li><li>数据的有效期不同。cookie在设置的cookie过期时间之前一直有效，即使窗口或者浏览器关闭。sessionstorage仅在浏览器窗口关闭之前有效。localstorage始终有效，窗口和浏览器关闭也一直保存，用作长久数据保存。</li><li>作用域不同。cookie在所有的同源窗口都是共享；sessionstorage不在不同的浏览器共享，即使同一页面；localstorage在所有同源窗口都是共享</li></ul></li></ul><h2 id="position的值？"><a href="#position的值？" class="headerlink" title="position的值？"></a><strong>position的值？</strong></h2><ul><li>static（默认）：按照正常文档流进行排列；</li><li>relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定位；</li><li>absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right 定位；</li><li>fixed(固定定位)：所固定的参照对像是可视窗口。</li></ul><h2 id="get-和-post-有什么区别"><a href="#get-和-post-有什么区别" class="headerlink" title="get 和 post 有什么区别:"></a>get 和 post 有什么区别:</h2><ul><li>get和post都是数据提交的方式。</li><li>get的数据是通过网址问号后边拼接的字符串进行传递的。post是通过一个HTTP包体进行传递数据的。</li><li>get的传输量是有限制的，post是没有限制的。</li><li>get的安全性可能没有post高，所以我们一般用get来获取数据，post一般用来修改数据。</li></ul><h2 id="vue的两个核心："><a href="#vue的两个核心：" class="headerlink" title="vue的两个核心："></a>vue的两个核心：</h2><p>1、数据驱动：<br>在vue中，数据的改变会驱动视图的自动更新。传统的做法是需要手动改变DOM来使得视图更新，而vue只需要改变数据。</p><p>2、组件<br>组件化开发，优点很多，可以很好的降低数据之间的耦合度。将常用的代码封装成组件之后（vue组件封装方法），就能高度的复用，提高代码的可重用性。一个页面/模块可以由多个组件所组成。</p><h2 id="说一下v-if和v-show的区别"><a href="#说一下v-if和v-show的区别" class="headerlink" title="说一下v-if和v-show的区别"></a><strong>说一下v-if和v-show的区别</strong></h2><blockquote><p>当条件不成立时，v-if不会渲染DOM元素，v-show操作的是样式(display)，切换当前DOM的显示和隐</p></blockquote><h2 id="Vue2-x组件通信有哪些方式？"><a href="#Vue2-x组件通信有哪些方式？" class="headerlink" title="Vue2.x组件通信有哪些方式？"></a><strong>Vue2.x组件通信有哪些方式？</strong></h2><ul><li><p>父子组件通信</p><ul><li><p>父-&gt;子props，子-&gt;父 $on、$emit</p></li><li><p>获取父子组件实例 $parent、$children</p></li><li><p>Ref 获取实例的方式调用组件的属性或者方法</p></li><li><p>Provide、inject 官方不推荐使用，但是写组件库时很常用</p></li></ul></li><li><p>兄弟组件通信</p><ul><li><p>Event Bus 实现跨组件通信 Vue.prototype.$bus = new Vue</p></li><li><p>Vuex</p></li></ul></li><li><p>跨级组件通信</p><ul><li><p>Vuex</p></li><li><p>$attrs、$listeners</p></li><li><p>Provide、inject</p></li></ul></li></ul><h2 id="关于Vue数组，对象数据变化无法更新到视图问题"><a href="#关于Vue数组，对象数据变化无法更新到视图问题" class="headerlink" title="关于Vue数组，对象数据变化无法更新到视图问题"></a>关于Vue数组，对象数据变化无法更新到视图问题</h2><p>数组数据变动，使用某些方法操作数组，变动数据时，有些方法无法被vue监测<br>push()，pop()，splice()，sort()，reverse()可被vue检测到<br>filter(), concat(), slice()。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组</p><p>解决方法<br>一、使用官方推荐<br>this.s e t ( a r r ∣ o b j , i n d e x ∣ k e y , v a l u e ) t h i s . set( arr | obj , index | key, value ) this.set(arr∣obj,index∣key,value)this.delete(arr | obj , index | key)<br>二、vue多层循环，动态数据改变后渲染很慢或者不渲染<br>尝试在方法第一行加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$forceUpdate();</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>三、<br>尝试使用watch监听或者computed来处理<br>四、Object.assgin()操作对象可以<br>五、this.n e x t T i c k ( c a l l b a c k ) 这 个 函 数 可 以 获 取 D o m 更 新 后 的 数 据 ， 因 为 D o m 更 新 是 异 步 的 ， 异 步 函 数 执 行 完 成 之 后 就 会 调 用 nextTick(callback) 这个函数可以获取Dom更新后的数据，因为Dom更新是异步的，异步函数执行完成之后就会调用nextTick(callback)这个函数可以获取Dom更新后的数据，因为Dom更新是异步的，异步函数执行完成之后就会调用nextTick()</p><h2 id="说一下Vue的生命周期"><a href="#说一下Vue的生命周期" class="headerlink" title="说一下Vue的生命周期"></a><strong>说一下Vue的生命周期</strong></h2><ul><li><p>beforeCreate是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。</p></li><li><p>created在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</p></li><li><p>beforeMount发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</p></li><li><p>mounted在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p></li><li><p>beforeUpdate发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p></li><li><p>updated发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p></li><li><p>beforeDestroy发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p></li><li><p>destroyed发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p></li></ul><h2 id="再说一下Computed和Watch"><a href="#再说一下Computed和Watch" class="headerlink" title="再说一下Computed和Watch"></a><strong>再说一下Computed和Watch</strong></h2><ul><li><p>Computed本质是一个具备缓存的watcher，依赖的属性发生变化就会更新视图。 适用于计算比较消耗性能的计算场景。当表达式过于复杂时，在模板中放入过多逻辑会让模板难以维护，可以将复杂的逻辑放入计算属性中处理。</p></li><li><p>Watch没有缓存性，更多的是观察的作用，可以监听某些数据执行回调。当我们需要深度监听对象中的属性时，可以打开deep：true选项，这样便会对对象中的每一项进行监听。这样会带来性能问题，优化的话可以使用字符串形式监听，如果没有写到组件中，不要忘记使用unWatch手动注销哦。</p></li></ul><h2 id="组件中的data为什么是一个函数？"><a href="#组件中的data为什么是一个函数？" class="headerlink" title="组件中的data为什么是一个函数？"></a><strong>组件中的data为什么是一个函数？</strong></h2><blockquote><p>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</p></blockquote><h2 id="说一下v-model的原理"><a href="#说一下v-model的原理" class="headerlink" title="说一下v-model的原理"></a><strong>说一下v-model的原理</strong></h2><blockquote><p>v-model本质就是一个语法糖，可以看成是value + input方法的语法糖。 可以通过model属性的prop和event属性来进行自定义。原生的v-model，会根据标签的不同生成不同的事件和属性。</p></blockquote><h2 id="再说一下虚拟Dom以及key属性的作用"><a href="#再说一下虚拟Dom以及key属性的作用" class="headerlink" title="再说一下虚拟Dom以及key属性的作用"></a><strong>再说一下虚拟Dom以及key属性的作用</strong></h2><blockquote><p>由于在浏览器中操作DOM是很昂贵的。频繁的操作DOM，会产生一定的性能问题。这就是虚拟Dom的产生原因。</p><p>就是为了更好渲染，在数据变化后，虚拟dom会进行比对，没有key的话就会重新全部渲染，有的话，就单独对那个操作，其他不用重新渲染，就是提高复用</p><p>Vue2的Virtual DOM借鉴了开源库snabbdom的实现。</p><p>Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点。是对真实DOM的一层抽象</p><p>VirtualDOM映射到真实DOM要经历VNode的create、diff、patch等阶段</p><p>key的作用是尽可能的复用 DOM 元素。</p><blockquote><p>新旧 children 中的节点只有顺序是不同的时候，最佳的操作应该是通过移动元素的位置来达到更新的目的。<br>需要在新旧 children 的节点中保存映射关系，以便能够在旧 children 的节点中找到可复用的节点。key也就是children中节点的唯一标识。</p></blockquote></blockquote><h2 id="keep-alive了解吗"><a href="#keep-alive了解吗" class="headerlink" title="keep-alive了解吗"></a><strong>keep-alive了解吗</strong></h2><blockquote><p>keep-alive可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p>常用的两个属性include/exclude，允许组件有条件的进行缓存。</p><p>两个生命周期activated/deactivated，用来得知当前组件是否处于活跃状态。</p><p>keep-alive的中还运用了LRU(Least Recently Used)算法。</p></blockquote><h2 id="Vue中组件生命周期调用顺序说一下"><a href="#Vue中组件生命周期调用顺序说一下" class="headerlink" title="Vue中组件生命周期调用顺序说一下"></a><strong>Vue中组件生命周期调用顺序说一下</strong></h2><ul><li><p>组件的调用顺序都是先父后子,渲染完成的顺序是先子后父。</p></li><li><p>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</p></li></ul><blockquote><p>1.加载渲染过程:<br>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount- &gt;子mounted-&gt;父mounted  </p><p>2.子组件更新过程:<br>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated  </p><p>3.父组件更新过程:<br>父 beforeUpdate -&gt; 父 updated  </p><p>4.销毁过程:<br>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p></blockquote><h2 id="Vue2-x组件通信有哪些方式？-1"><a href="#Vue2-x组件通信有哪些方式？-1" class="headerlink" title="Vue2.x组件通信有哪些方式？"></a><strong>Vue2.x组件通信有哪些方式？</strong></h2><ul><li><p>父子组件通信</p><ul><li><p>父-&gt;子props，子-&gt;父 $on、$emit</p></li><li><p>获取父子组件实例 $parent、$children</p></li><li><p>Ref 获取实例的方式调用组件的属性或者方法</p></li><li><p>Provide、inject 官方不推荐使用，但是写组件库时很常用</p></li></ul></li><li><p>兄弟组件通信</p><ul><li><p>Event Bus 实现跨组件通信 Vue.prototype.$bus = new Vue</p></li><li><p>Vuex</p></li></ul></li><li><p>跨级组件通信</p><ul><li><p>Vuex</p></li><li><p>$attrs、$listeners</p></li><li><p>Provide、inject</p></li></ul></li></ul><h2 id="SSR了解吗？"><a href="#SSR了解吗？" class="headerlink" title="SSR了解吗？"></a><strong>SSR了解吗？</strong></h2><blockquote><p>SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端。</p><p>SSR有着更好的SEO、并且首屏加载速度更快等优点。不过它也有一些缺点，比如我们的开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境。还有就是服务器会有更大的负载需求。</p></blockquote><h2 id="什么是函数节流？介绍一下应用场景和原理？"><a href="#什么是函数节流？介绍一下应用场景和原理？" class="headerlink" title="什么是函数节流？介绍一下应用场景和原理？"></a>什么是函数节流？介绍一下应用场景和原理？</h2><p>  <strong>防抖的使用场景：</strong></p><ul><li>mousemove 鼠标滑动事件</li><li>input 输入事件</li></ul><p>​    <strong>节流的使用场景：</strong></p><ul><li>商品搜索列表、商品橱窗等</li><li>用户滑动时 定时 / 定滑动的高度 发送请求 </li></ul><p>防抖是关注于最后一次的事件触发，而节流则是在规定的时间里只执行一次。</p><blockquote><p>函数节流(throttle)是指阻止一个函数在很短时间间隔内连续调用。 只有当上一<br>次函数执行后达到规定的时间间隔，才能进行下一次调用。 但要保证一个累计<br>最小调用间隔（否则拖拽类的节流都将无连续效果）</p><blockquote><p>函数节流用于 onresize, onscroll 等短时间内会多次触发的事件</p><blockquote><p>函数节流的原理：使用定时器做时间节流。 当触发一个事件时，先用<br>setTimout 让这个事件延迟一小段时间再执行。 如果在这个时间间隔内又触发<br>了事件，就 clearTimeout 原来的定时器， 再 setTimeout 一个新的定时器重<br>复以上流程。</p><blockquote><p>函数节流简单实现：</p></blockquote></blockquote></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">method, context</span>) &#123;</span><br><span class="line"> <span class="built_in">clearTimeout</span>(methor.<span class="property">tId</span>);</span><br><span class="line"> method.<span class="property">tId</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> method.<span class="title function_">call</span>(context);</span><br><span class="line"> &#125;， <span class="number">100</span>); <span class="comment">// 两次调用至少间隔 100ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="title function_">throttle</span>(myFunc, <span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="那些操作会造成内存泄漏？"><a href="#那些操作会造成内存泄漏？" class="headerlink" title="那些操作会造成内存泄漏？"></a>那些操作会造成内存泄漏？</h2><blockquote><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</p><p> 垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收</p><p> setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏</p><p>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p></blockquote><h2 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="$route 和 $router 的区别"></a><strong>$route 和 $router 的区别</strong></h2><p>答：$router是VueRouter的实例，在script标签中想要导航到不同的URL,使用$router.push方法。返回上一个历史history用$router.to(-1)<br>$route为当前router跳转对象。里面可以获取当前路由的name,path,query,parmas等。</p><h2 id="vuex？"><a href="#vuex？" class="headerlink" title="vuex？"></a><strong>vuex？</strong></h2><p>答：vue框架中状态管理,有五种，分别是 State、 Getter、Mutation 、Action、 Module<br>state =&gt; 基本数据(数据源存放地)<br>getters =&gt; 从基本数据派生出来的数据<br>mutations =&gt; 提交更改数据的方法，同步！<br>actions =&gt; 像一个装饰器，包裹mutations，使之可以异步。<br>modules =&gt; 模块化Vuex</p><h2 id="hash路由和history路由实现原理说一下"><a href="#hash路由和history路由实现原理说一下" class="headerlink" title="hash路由和history路由实现原理说一下"></a><strong>hash路由和history路由实现原理说一下</strong></h2><ul><li><p>location.hash的值实际就是URL中#后面的东西。</p></li><li><p>history实际采用了HTML5中提供的API来实现，主要有history.pushState()和history.replaceState()。</p></li></ul><p>同步异步</p><p>去重</p><p>防抖节流</p><p>vue3</p><p>公司是否分中高低前端，怎么分级？分别的薪酬呢？</p><div class="table-container"><table><thead><tr><th>面试问题（包含笔试题）</th><th>问题分类</th><th>面试题考点 （技术点）</th></tr></thead><tbody><tr><td>display:none和visibility:hidde</td><td>HTML/CSS</td><td>css元素隐藏</td></tr><tr><td>CSS中 link 和@import 的区别是？</td><td>ES5/ES6</td><td>link和import</td></tr><tr><td>position的absolute与fixed共同点与不同点</td><td>HTML/CSS</td><td>absolute与fixed</td></tr><tr><td>介绍一下CSS的盒子模型？</td><td>HTML/CSS</td><td>盒子模型</td></tr><tr><td>watch和computed的差别</td><td>vue</td><td>watch和computed</td></tr><tr><td>vue中常用的指令</td><td>vue</td><td>vue指令</td></tr><tr><td>路由的两种模式的区别</td><td>vue</td><td>vue路由</td></tr><tr><td>判断js数据类型</td><td>JavaScript</td><td>js数据类型</td></tr><tr><td>ES6中的promise</td><td>ES5/ES6</td><td>promise</td></tr><tr><td>keep-alive</td><td>Vue</td><td>keep-alive</td></tr><tr><td>组件传值</td><td>Vue</td><td>组件传值</td></tr><tr><td>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</td><td>JavaScript</td><td>cookies/sessionStor age/ localStorage</td></tr><tr><td>请描述一下 GET 和 POST 的区别?</td><td>JavaScript</td><td>get和post</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023面试题总结</title>
      <link href="/post/16199.html"/>
      <url>/post/16199.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML(5)"></a>HTML(5)</h1><h2 id="1-Html5-新增那些标签"><a href="#1-Html5-新增那些标签" class="headerlink" title="1. Html5 新增那些标签?"></a>1. Html5 新增那些标签?</h2><p>布局标签:</p><p>header,section,footer,article,aside </p><p>表单标签: datalist,</p><p>input:type=’week|date|time|datetime|number|search|url|tel| color|email|range’ </p><p>多媒体标签: audio(音频), video(视频) 其他标签: progress(进度条),meter(度量器) </p><p>补充: </p><p>Html5 新 属 性 : hidden( 隐 藏 元 素 ),required( 必 填 ),minlength( 最 小 长 度),maxlength(最大长度),pattern(正则表达式),placeholder(提 示文本),autocomplete(自动填充),autofocus(自动获取焦点)</p><h2 id="2-行内元素和块级元素的具体区别是什么？"><a href="#2-行内元素和块级元素的具体区别是什么？" class="headerlink" title="2. 行内元素和块级元素的具体区别是什么？"></a>2. 行内元素和块级元素的具体区别是什么？</h2><p>块级元素独占一行页面空间, 不会和其他元素共享一行页面空间; </p><p>行内元素可以和其他非块级元素(行内,行内块)共享一行页面空间.</p><h2 id="3-列举几个块级标签和行内标签？"><a href="#3-列举几个块级标签和行内标签？" class="headerlink" title="3. 列举几个块级标签和行内标签？"></a>3. 列举几个块级标签和行内标签？</h2><p>块级标签:div,p,h1~h6,section,header,footer </p><p>行内标签:span,em(i),strong(b),u,em(i),a</p><h2 id="4-行内元素的-padding-和margin-可设置吗？"><a href="#4-行内元素的-padding-和margin-可设置吗？" class="headerlink" title="4. 行内元素的 padding 和margin 可设置吗？"></a>4. 行内元素的 padding 和margin 可设置吗？</h2><p>行内元素设置水平方向的padding 和margin 是可以生效,但是设置垂 直方向的padding 和margin 虽然看起来对标签起作用,但实际并没有 对周围元素产生任何影响, 所以行内元素设置垂直方向的 padding 和 margin 是无效的.</p><h2 id="5-简述-readyonly-与-disabled-的区别"><a href="#5-简述-readyonly-与-disabled-的区别" class="headerlink" title="5. 简述 readyonly 与 disabled 的区别"></a>5. 简述 readyonly 与 disabled 的区别</h2><p>readyonly 是设置表单元素为只读状态; </p><p>disabled 是设置表单元素为禁用状态.</p><h2 id="6-哪些标签都存在伪元素"><a href="#6-哪些标签都存在伪元素" class="headerlink" title="6. 哪些标签都存在伪元素?"></a>6. 哪些标签都存在伪元素?</h2><p>大部分容器标签(大部分双标签)都有伪元素, iframe 没有伪元素; </p><p>大部分单标签都没有伪元素, 但是 img 有伪元素</p><h2 id="7-伪元素可以使用-js-来操作吗"><a href="#7-伪元素可以使用-js-来操作吗" class="headerlink" title="7. 伪元素可以使用 js 来操作吗?"></a>7. 伪元素可以使用 js 来操作吗?</h2><p>js 不可以操作伪元素</p><h2 id="8-Html5-的网页为什么只需要写"><a href="#8-Html5-的网页为什么只需要写" class="headerlink" title="8. Html5 的网页为什么只需要写?"></a>8. Html5 的网页为什么只需要写?</h2><p>HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基 于 SGML。而 HTML 5 不基于 SGML，因此不需要对 DTD 进行引用， 但是需要 doctype 来规范浏览器的行为。其中，SGML 是标准通用标 记语言,简单的说，就是比 HTML,XML 更老的标准，这两者都是由 SGML 发展而来的, 而 HTML5 不是的。</p><h1 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS(3)"></a>CSS(3)</h1><h2 id="9-px-em-rem-这三中长度单位的区别？"><a href="#9-px-em-rem-这三中长度单位的区别？" class="headerlink" title="9.px em rem 这三中长度单位的区别？"></a>9.px em rem 这三中长度单位的区别？</h2><p>px 是一个绝对单位;em 和 rem 是一个相对单位, em 参考的是当前元 素的字体(font-size) 大小, rem参考的是页面根元素 html 的字体 (font-size)大小</p><h2 id="10-CSS3-新增伪类有那些？"><a href="#10-CSS3-新增伪类有那些？" class="headerlink" title="10. CSS3 新增伪类有那些？"></a>10. CSS3 新增伪类有那些？</h2><p>p:first-of-type 选择属于其父元素的首个<code>&lt;p&gt;</code>元素。 </p><p>p:last-of-type 选择属于其父元素的最后一个<code>&lt;p&gt;</code>元素。 </p><p>p:nth-child(2)选择属于其父元素的第二个子元素。 </p><p>p:nth-type-of(2)选择属于其父元素的第二个子元素 p。 </p><p>:enabled、:disabled 控制表单控件的禁用状态。 </p><p>:checked，单选框或复选框被选中。</p><h2 id="11-谈谈-css-选择器优先级顺序以及判定标准"><a href="#11-谈谈-css-选择器优先级顺序以及判定标准" class="headerlink" title="11.谈谈 css 选择器优先级顺序以及判定标准?"></a>11.谈谈 css 选择器优先级顺序以及判定标准?</h2><p>优先级从低到高: </p><p>通配符选择器&lt;标签选择器&lt;类选择器(属性选择器)&lt;ID 选择器; </p><p>行内样式&lt;使用!important 修饰的属性优先级最高; </p><p>如果两个选择器(属性完全相同)同时命中一个元素, 并且权重一样, 则书写顺序会影响优先级, 后一个选择器的属性会覆盖前一个选择器中相同的属性.</p><h2 id="12-position-几-个-属-性-的-作-用-？"><a href="#12-position-几-个-属-性-的-作-用-？" class="headerlink" title="12. position 几 个 属 性 的 作 用 ？"></a>12. position 几 个 属 性 的 作 用 ？</h2><p>position 的常见四个属性值： relative，absolute，fixed，static。一般都要配合”left”、”top”、”right”以及”bottom” 属性使用。 </p><p>1）static：默认位置，（static 元素会忽略任何 top、 bottom、 left 或 right 声明）。一般不常用。 </p><p>2）relative：位置被设置为 relative 的元素，偏移的 top，right， bottom，left 的值都以它原来的位置为基准偏移。注意 relative 移 动后的元素在原来的位置仍占据空间。</p><p>3）absolute：位置设置为 absolute 的元素，可定位于相对于包含 它的元素的指定坐标。意思就是如果它的父容器设置了 position 属 性，并且 position 的属性值为 absolute 或者 relative，那么就 会依据父容器进行偏移。如果其父容器没有设置 position 属性，那 么偏移是以 body 为依据。注意设置 absolute 属性的元素在标准流 [在此处键入] 中 不 占 位 置 。</p><p>4）fixed： 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐 标。不论窗口滚动与否，元素都会留在那个位置。它始终是以 body 为依据的。注意设置 fixed 属性的元素在标准流中不占位置。</p><h2 id="13-position-设-置-为-absolue-和-fixed-有-什-么-区-别"><a href="#13-position-设-置-为-absolue-和-fixed-有-什-么-区-别" class="headerlink" title="13. position 设 置 为 absolue 和 fixed 有 什 么 区 别 ?"></a>13. position 设 置 为 absolue 和 fixed 有 什 么 区 别 ?</h2><p>absolute 是绝对定位, 绝对定位参考的是有明确定位的父元素, 如果直接父元素没有明确定位会一直向上查找,如果父元素都没有明确定位 , 则参考 body 标 签 ; </p><p>fixed 是固定定位, 参考对象是浏览器.</p><h2 id="14-在一个页面中给多个元素设置相同的-id-会导致什么问题"><a href="#14-在一个页面中给多个元素设置相同的-id-会导致什么问题" class="headerlink" title="14.在一个页面中给多个元素设置相同的 id, 会导致什么问题?"></a>14.在一个页面中给多个元素设置相同的 id, 会导致什么问题?</h2><p>会导致通过 js 获取 dom 元素的时候, 只能获取到第一个元素, 后面 的元素都无法正常获取.</p><h2 id="15-用伪类实现一个上三角"><a href="#15-用伪类实现一个上三角" class="headerlink" title="15.用伪类实现一个上三角?"></a>15.用伪类实现一个上三角?</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">’triangle_border_up’</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.triangle_border_up&#123; </span><br><span class="line">border:20px solid red;</span><br><span class="line">border-top:0;</span><br><span class="line">border-left:20px solid transparent;</span><br><span class="line">border-right:20px solid transparent;</span><br><span class="line">width:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-怎么让一个不定宽高的-div，垂直水平居中？"><a href="#16-怎么让一个不定宽高的-div，垂直水平居中？" class="headerlink" title="16.怎么让一个不定宽高的 div，垂直水平居中？"></a>16.怎么让一个不定宽高的 div，垂直水平居中？</h2><p>方案一:transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#DDD</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二:flex 弹性布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#DDD</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案三:绝对定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#DDD</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-清除浮动有哪些常用的方式"><a href="#17-清除浮动有哪些常用的方式" class="headerlink" title="17.清除浮动有哪些常用的方式?"></a>17.清除浮动有哪些常用的方式?</h2><p>额外标签法: 在浮动元素的最后添加一个块级标签, 给其设置一个 clear:both 的属性 (缺点:会在页面上产生很多空白标签); </p><p>给浮动元素的父元素设置高度:(缺点:不太灵活); </p><p>给浮动元素的父元素设置 overflow:hidden; </p><p>使用伪元素法:(推荐使用)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123; </span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>; <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-让两个块级元素在一行显示有哪些做法"><a href="#18-让两个块级元素在一行显示有哪些做法" class="headerlink" title="18.让两个块级元素在一行显示有哪些做法?"></a>18.让两个块级元素在一行显示有哪些做法?</h2><p>设置显示模式:display:inline|inline-block; </p><p>flex 布局: 给父元素设置 display:flex; </p><p>使用浮动</p><h2 id="19-如何设置一个元素在垂直方向居中"><a href="#19-如何设置一个元素在垂直方向居中" class="headerlink" title="19.如何设置一个元素在垂直方向居中?"></a>19.如何设置一个元素在垂直方向居中?</h2><p>首先不考虑代码的灵活性, 可以使用 margin 外边距或者 padding 内 边距来实现元素在垂直方向居中显示.具体可以给父元素设置一个垂直方向的 padding 内边距; 也可以给需要垂直居中的子元素设置垂直方向的外 边距.其次如果这个需要垂直居中的元素是一个单行文本, 则可以使 用行高等于标签高度的方式来实现.也可以使用 css3 中的 flex 布局, 使用 align-items:center 设置元素在侧轴(垂直方向)居 中对齐.也可以使用绝对定位的方式, 设置元素在相对定位的父元素中 垂直对齐.</p><h2 id="20-说说图片懒加载的原理-实际开发中用过哪些图片懒加载的插件"><a href="#20-说说图片懒加载的原理-实际开发中用过哪些图片懒加载的插件" class="headerlink" title="20.说说图片懒加载的原理?实际开发中用过哪些图片懒加载的插件?"></a>20.说说图片懒加载的原理?实际开发中用过哪些图片懒加载的插件?</h2><p>img 标签在加载图片的时候, 是通过请求 src 属性所指向的文件来加 载图片的, 那如果 img 标签本身没有 src 属性的话, 那么 img 标签在 渲染的时候, 就不会加载图片.</p><p>所以图片懒加载的原理就是将 img 标签 的 src 属性给暂时先改成一个自定义的属性, 这样页面已加载就会 不去加载图片, 当 img 标签所在区域进入屏幕可视区域后, 从存放 图片路径的自定义属性中获取图片地址,并动态的设置给对应 img 标签的 src 属性, 这样浏览器就会自动帮助我们去请求对应的图片资源, 也就实现了所谓的图片懒加载.</p><p>图片懒加载的插件有很多, 大 部分是基于 jquery 的, 比如 jquery.lazyload. 当然 vue 的中也有 实现了图片懒加载的插件, 比如 vue-lazyload, vue 的组件库中也有图片懒加载的组件.</p><h2 id="21-css3-新增了那些新特性"><a href="#21-css3-新增了那些新特性" class="headerlink" title="21. css3 新增了那些新特性?"></a>21. css3 新增了那些新特性?</h2><p>媒体查询(@media); </p><p>transfrom 系列:translate 平移, scale 缩放,rotate 旋转 </p><p>动画(animate); </p><p>过渡效果(transition); </p><p>flex 弹性(伸缩)布局; </p><p>盒模型计算方式 box-sizing:border-box; </p><p>线性渐变(linear-gradient),径向渐变; </p><p>伪元素, 文字阴影(text-shadow), 边框阴影(box-shadow), 圆角 (border-radius)</p><h2 id="22-display-none-和visibility-hidden-的区别"><a href="#22-display-none-和visibility-hidden-的区别" class="headerlink" title="22. display:none 和visibility:hidden 的区别?"></a>22. display:none 和visibility:hidden 的区别?</h2><p>display:none 隐藏元素后,不占位; </p><p>visibility:hidden 隐藏元素后占位.</p><h2 id="23-Less-是什么"><a href="#23-Less-是什么" class="headerlink" title="23. Less 是什么?"></a>23. Less 是什么?</h2><p>Less 是一种 css 预处理语言, 在 less 中可以定义一些变量和表达式以及使用嵌套语法; </p><p>less 中使用@定义变量(@baseColor:pink); </p><p>后期可以通过一些编译工具(less)将 less 编译成浏览器能直接识别的 css 样式. </p><p>所以 less 只是在开发阶段使用的一种中间语言, 使用 less 的目的是提高开发效率以及提高代码的可维护性.</p><h2 id="24-Scss-是什么-sass"><a href="#24-Scss-是什么-sass" class="headerlink" title="24. Scss 是什么?(sass)"></a>24. Scss 是什么?(sass)</h2><p>scss 是一种 css 预处理语言, 在 scss 中可以定义一些变量和表达式 以及使用嵌套语法; </p><p>scss 中使用$定义变量($baseColor:pink); </p><p>后期可以通过一些编译工具(node-sass)将 scss 编译成浏览器能直接识别的 css 样式. </p><p>所以 scss 只是在开发阶段使用的一种中间语言, 使用 scss 的目的是提高开发效率以及提高代码的可维护性.</p><h2 id="25-Stylus-是什么-styl"><a href="#25-Stylus-是什么-styl" class="headerlink" title="25. Stylus 是什么?(.styl)"></a>25. Stylus 是什么?(.styl)</h2><p>stylus 是一种 css 预处理语言, 在 stylus 中可以定义一些变量和表达式以及使用嵌套语法(stylus 中是使用缩进的语法表示嵌套关系); </p><p>后期可以通过一些编译工具(stylus)将 stylus 编译成浏览器能直接识别的css 样式. 所以stylus 只是在开发阶段使用的一种中间语言, 使用 stylus 的目的是提高开发效率以及提高代码的可维护性.</p><h2 id="JavasSript-基础"><a href="#JavasSript-基础" class="headerlink" title="JavasSript 基础"></a>JavasSript 基础</h2><h2 id="26-js-中有哪些数据类型"><a href="#26-js-中有哪些数据类型" class="headerlink" title="26. js 中有哪些数据类型"></a>26. js 中有哪些数据类型</h2><p>int( 数 值 ), string( 字 符 串 ), boolean( 布 尔 ), null( 空 ), undefined(未定义), object(对象)</p><h2 id="27-typeof-typeof-和-instanceof-的区别"><a href="#27-typeof-typeof-和-instanceof-的区别" class="headerlink" title="27. typeof(typeof()) 和 instanceof 的区别?"></a>27. typeof(typeof()) 和 instanceof 的区别?</h2><p>typeof 可以判断变量的数据类型,返回值是字符串; </p><p>a instanceof b 是判断 b 是不是在 a 的原型链上, 也可以实现判断 数据类型, 返回值为布尔.</p><h2 id="28-怎么判断两个对象相等"><a href="#28-怎么判断两个对象相等" class="headerlink" title="28.怎么判断两个对象相等?"></a>28.怎么判断两个对象相等?</h2><p>先判断俩者是不是对象; </p><p>再判断俩个对象的所有 key 值是否相等相同; </p><p>最后判断俩个对象的相应的 key 对应的值是否相同.</p><h2 id="29-js-中函数有哪些定义方式"><a href="#29-js-中函数有哪些定义方式" class="headerlink" title="29. js 中函数有哪些定义方式"></a>29. js 中函数有哪些定义方式</h2><p>函数声明:function fn(){} </p><p>函数表达式:var fn=function(){} </p><p>构造函数:var fn=new Function(‘ 参数 1’,’ 参数 2’,’ 函数 体’)</p><h2 id="30-js-中函数有哪些调用形式"><a href="#30-js-中函数有哪些调用形式" class="headerlink" title="30. js 中函数有哪些调用形式?"></a>30. js 中函数有哪些调用形式?</h2><p>普通函数,对象的方法,事件处理函数,构造函数,回调函数.</p><h2 id="31-”-”-和-“-”-的区别？"><a href="#31-”-”-和-“-”-的区别？" class="headerlink" title="31.”==” 和 “===” 的区别？"></a>31.”==” 和 “===” 的区别？</h2><p>==只会对值进行比较,===不仅会对值进行比较,还会对数据类型进行比较.</p><h2 id="32-js-中的常用内置对象有哪些？并列举该对象的常用方法？"><a href="#32-js-中的常用内置对象有哪些？并列举该对象的常用方法？" class="headerlink" title="32.js 中的常用内置对象有哪些？并列举该对象的常用方法？"></a>32.js 中的常用内置对象有哪些？并列举该对象的常用方法？</h2><p>Math(数学相关);Date(日期相关);Array;Object.</p><h2 id="33-列举和数组操作相关的方法"><a href="#33-列举和数组操作相关的方法" class="headerlink" title="33.列举和数组操作相关的方法"></a>33.列举和数组操作相关的方法</h2><p>push:将元素添加到数组的末尾, 返回值是数组长度 </p><p>pop:将数组最后一个元素弹出, 返回值是被弹出的元素 </p><p>unshift:在数组的开头插入一个元素,返回值是数组的长度 </p><p>shift:将数组第一个元素弹出,返回值是被弹出的元素 </p><p>splice(index,len):删除数组中指定元素 </p><p>concat:连接数组 </p><p>reverse: 翻转数组</p><h2 id="34-列举和字符串操相关的方法"><a href="#34-列举和字符串操相关的方法" class="headerlink" title="34.列举和字符串操相关的方法"></a>34.列举和字符串操相关的方法</h2><p>substr(start,len)/substring(start,end): 截取字符串</p><p>slice:从数组会字符串中截取一段 </p><p>indexOf/lastIndexOf:查找某一个字符是否存在于另外一个字符串中, 存在则返回索引, 不存在则返回-1;</p><p>indexOf 是从前向后顺序查找; </p><p>lastIndexOf:是从后向前查找 </p><p>replace:替换字符串特定的字符 </p><p>toUpperCase:将字符串转成大写 </p><p>toLowerCase:将字符串转成小写 </p><p>charAt:获取字符串中指定索引的字符</p><h2 id="35-document-write-和-innerHTML-的区别"><a href="#35-document-write-和-innerHTML-的区别" class="headerlink" title="35.document.write 和 innerHTML 的区别?"></a>35.document.write 和 innerHTML 的区别?</h2><p>document.write 是指定在整个页面区域的内容, innerHTML 是指定某一个元素的内容.</p><h2 id="36-分别阐述-split-slice-splice-join-？"><a href="#36-分别阐述-split-slice-splice-join-？" class="headerlink" title="36.分别阐述 split(),slice(),splice(),join()？"></a>36.分别阐述 split(),slice(),splice(),join()？</h2><p>split 可以使用一个字符串切割另外一个字符串, 返回值是数组; </p><p>slice 可以从数组中截取一部分(字符串对象也有 slice 方法); </p><p>splice(index,len)可以删除指定的数组元素; </p><p>join 可以将数组元素使用特定的连接符拼接成字符串.</p><h2 id="37-例举-3-中强制类型转换和-2-中隐式类型转换？"><a href="#37-例举-3-中强制类型转换和-2-中隐式类型转换？" class="headerlink" title="37.例举 3 中强制类型转换和 2 中隐式类型转换？"></a>37.例举 3 中强制类型转换和 2 中隐式类型转换？</h2><p>强制转换:</p><p>转化成字符串 toString() String() 转换成数字 Number()、 parseInt()、 parseFloat(); </p><p>隐式转换: </p><p>转换成布尔类型 Boolean() 隐式拼接字符串 </p><p>例子 var str = “” + - / % ===</p><h2 id="38-如何判断一个变量-foo-是数组"><a href="#38-如何判断一个变量-foo-是数组" class="headerlink" title="38.如何判断一个变量 foo 是数组?"></a>38.如何判断一个变量 foo 是数组?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo <span class="keyword">instanceof</span> <span class="title class_">Array</span>;</span><br><span class="line">foo.<span class="property">constructor</span> == <span class="title class_">Array</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(foo)</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(foo)==<span class="string">&quot;[object Array]&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Javascript-高级"><a href="#Javascript-高级" class="headerlink" title="Javascript 高级"></a>Javascript 高级</h1><h2 id="39-什么是原型对象"><a href="#39-什么是原型对象" class="headerlink" title="39.什么是原型对象?"></a>39.什么是原型对象?</h2><p>每一个构造函数都有一个 prototype 的属性, 这个属性的值是一个对象, 这个对象就叫做构造函数的原型对象; </p><p>一般建议将构造函数的成员属性绑定在原型对象 prototype 上, 因为原型对象 prototype 身上的属性默认可以通过实例对象访问到;</p><p>这样做可以保证在每次通过 new 关键字创建实例对象的时候, 这些方法不会被重复在内存中创建.</p><h2 id="40-什么是原型链"><a href="#40-什么是原型链" class="headerlink" title="40.什么是原型链?"></a>40.什么是原型链?</h2><p>每个构造函数都有一个 prototype 属性, 即原型对象, 通过实例对象的 proto 属性也可访问原型对象;</p><p>而原型对象本质也是一个对象, 是对象就有自己的原型对象, 最终形成的链状的结构称为原型链.</p><h2 id="41-什么是构造函数"><a href="#41-什么是构造函数" class="headerlink" title="41.什么是构造函数?"></a>41.什么是构造函数?</h2><p>构造函数本质也是一个函数, 只不过这个函数在定义的时候首字母一般需要大写; </p><p>构造函数调用的时候,必须通过一个 new 关键字来调用; </p><p>我们一般不直接使用构造函数, 而是使用构造函数创建出来的实例对象. 构造函数是 js 面向对象的一个重要组成部分.</p><h2 id="42-js-中实现继承的方式"><a href="#42-js-中实现继承的方式" class="headerlink" title="42.js 中实现继承的方式?"></a>42.js 中实现继承的方式?</h2><p>ES6 之前官方并没有提供一种实现继承的语法, 所以大部分继承方式 都是程序员通过代码在模拟.常见的继承方式有以下几种: </p><p>原型继承; </p><p>借用构造函数继承; </p><p>组合继承;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,gender</span>)&#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span>=gender||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name,age,gender,score</span>)&#123;</span><br><span class="line">    <span class="comment">// 通过构造继承属性</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name,age,gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过原型继承,继承方法</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 修改 constructor 的指向</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>=<span class="title class_">Student</span>;</span><br><span class="line"><span class="comment">// 动态添加成员方法</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printScore</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my score is &#x27;</span>+<span class="variable language_">this</span>.<span class="property">score</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建 Student 实例对象</span></span><br><span class="line"><span class="keyword">var</span> s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;zs&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">90</span>);</span><br><span class="line">s1.<span class="title function_">sayHi</span>();</span><br><span class="line">s1.<span class="title function_">printScore</span>();</span><br></pre></td></tr></table></figure><p>ES6 之后使用 extends 关键字实现继承(class Student extends Person{})</p><h2 id="43-什么是闭包-有什么作用-使用的时候需要注意什么"><a href="#43-什么是闭包-有什么作用-使用的时候需要注意什么" class="headerlink" title="43.什么是闭包, 有什么作用, 使用的时候需要注意什么?"></a>43.什么是闭包, 有什么作用, 使用的时候需要注意什么?</h2><p>闭包是一个跟函数相关的概念,表现形式是一个父函数内部,嵌套了 一个子函数, 子函数直接或间接的被返回给外部作用域, 并且子函数中会使用到父函数局部作用域中的变量.</p><p>当我们在外部调用这个子函数的时候, 就会发生闭包现象. </p><p>闭包的作用:闭包可以延展一个函数的作用域 </p><p>注意事项:不能滥用闭包, 会导致内存泄漏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1=<span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure><h2 id="44-什么是内存泄漏-那些操作会引起内存泄漏"><a href="#44-什么是内存泄漏-那些操作会引起内存泄漏" class="headerlink" title="44.什么是内存泄漏, 那些操作会引起内存泄漏?"></a>44.什么是内存泄漏, 那些操作会引起内存泄漏?</h2><p>内存泄漏是指本应该被垃圾回收机制回收的内存空间由于某种特殊 原因没有及时被回收, 称之为内存泄漏. 滥用全局变量和滥用闭包都会导致内存泄漏.</p><h2 id="45-什么是预解析"><a href="#45-什么是预解析" class="headerlink" title="45.什么是预解析?"></a>45.什么是预解析?</h2><p>JS 代码在执行之前,解析引擎会对代码进行一个预先的检查, 主要会对变量和函数的声明进行提升, 将变量和函数的声明提到代码的最前面.变量只提升声明, 不提升赋值.</p><h2 id="46-说说你对-this-关键字的理解"><a href="#46-说说你对-this-关键字的理解" class="headerlink" title="46.说说你对 this 关键字的理解"></a>46.说说你对 this 关键字的理解</h2><p>this 在不同的场景下指向不太一样, 主要分为一下五种情况: </p><p>普通函数中指向全局 window; </p><p>对象的成员方法中指向该方法的宿主对象; </p><p>构造函数中指向 new 出来的实例对象; </p><p>事件处理函数中指向事件源; </p><p>回调函数中指向全局 window</p><h2 id="47-call-apply-bind-的区别"><a href="#47-call-apply-bind-的区别" class="headerlink" title="47. call/apply/bind 的区别"></a>47. call/apply/bind 的区别</h2><p>这三个方法都是函数这个特殊对象的方法,通过这三个方法都可以改变函数内部 this 的指向. 不同点:</p><p>call 和apply 会调用一次函数, 而 bind 不会调用函数, 只会在内存中创建一个函数的副本(修改过 this 指向的函数). </p><p>call 从第二个参数开始需要一个参数列表, </p><p>apply 第二个参数需要是一个数组</p><h2 id="48-caller-和callee-的区别是什么"><a href="#48-caller-和callee-的区别是什么" class="headerlink" title="48. caller 和callee 的区别是什么?"></a>48. caller 和callee 的区别是什么?</h2><p>函数 fun.caller 返回调用 fun 的函数对象，即 fun 的执行环境，如果 fun 的执行环境为 window 则返回 null; </p><p>Callee 是函数的 arguments 这个特殊对象的一个属性, 指向函数本身.</p><h2 id="49-new-操作符具体干了什么呢"><a href="#49-new-操作符具体干了什么呢" class="headerlink" title="49. new 操作符具体干了什么呢?"></a>49. new 操作符具体干了什么呢?</h2><p>第一步创建一个空对象; </p><p>第二步将 this 指向空对象; </p><p>第三步动态给刚创建的对象添加成员属性; </p><p>第四步隐式返回 this.</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="50-下面代码的执行结果是什么"><a href="#50-下面代码的执行结果是什么" class="headerlink" title="50. 下面代码的执行结果是什么?"></a>50. 下面代码的执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hellword=(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello one&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello two&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello three&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello four&#x27;</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>依次输出: hello one,hello four,hello three,hello two</p><h2 id="51-下面代码执行结果是什么"><a href="#51-下面代码执行结果是什么" class="headerlink" title="51. 下面代码执行结果是什么?"></a>51. 下面代码执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line"><span class="attr">id</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">b=a;</span><br><span class="line">b.<span class="property">id</span>=<span class="number">1</span>;</span><br><span class="line">b.<span class="property">name</span>=<span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>执行结果: </p><p>输出 {id: 1, name: “test”} </p><p>分析过程: </p><p>对象是一种引用数据类型, 简单的 b=a 只是把 a 在内存中的地址赋值 给了 b, 所以修改 b 会影响 a.</p><h2 id="52-下面代码执行结果是什么"><a href="#52-下面代码执行结果是什么" class="headerlink" title="52. 下面代码执行结果是什么?"></a>52. 下面代码执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123; </span><br><span class="line">    <span class="attr">length</span>:<span class="number">5</span>,</span><br><span class="line"><span class="attr">method</span>:<span class="keyword">function</span>(<span class="params">fn</span>)&#123; </span><br><span class="line">        <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">method</span>(fn,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>执行结果: </p><p>在控制台输出 10,2 </p><p>分析过程: </p><p>fn(); 此时 this 指向 window, 所以 this.length=10; arguments<code>[0]()</code>中的 this 永远指向 arguments, 而 arguments 本身有一 个 length 属性, 就是参数的个数.</p><h2 id="53-下面代码执行完毕-浏览器依次弹出什么"><a href="#53-下面代码执行完毕-浏览器依次弹出什么" class="headerlink" title="53. 下面代码执行完毕, 浏览器依次弹出什么?"></a>53. 下面代码执行完毕, 浏览器依次弹出什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span></span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> a=b=<span class="number">5</span>;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> b);</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure><p>执行结果: </p><p>依次弹出: number; number,undefined,number </p><p>分析过程: </p><p>自调用函数会开辟一个局部作用域, var a=b=5 这句代码 var 只会修饰a, 所以 a 是一个局部变量, b 是全局变量</p><h2 id="54-下面代码输出结果是什么-1-2-3-map-parseInt"><a href="#54-下面代码输出结果是什么-1-2-3-map-parseInt" class="headerlink" title="54. 下面代码输出结果是什么?[1,2,3].map(parseInt);"></a>54. 下面代码输出结果是什么?[1,2,3].map(parseInt);</h2><p>输出结果:[1,NaN,NaN]; </p><p>分析过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">    <span class="comment">// console.log(item,index);</span></span><br><span class="line">    <span class="comment">//parseInt(数值,进制)</span></span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="55-下面代码执行结果是什么"><a href="#55-下面代码执行结果是什么" class="headerlink" title="55. 下面代码执行结果是什么?"></a>55. 下面代码执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">square</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">var</span> square=<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果: </p><p>报错(Uncaught TypeError: square is not a function) </p><p>分析过程: </p><p>函数表达式方式声明的函数只提升声明, 不提升赋值, 所以不能再声明之前调用.</p><h2 id="56-下面代码执行结果是什么"><a href="#56-下面代码执行结果是什么" class="headerlink" title="56. 下面代码执行结果是什么?"></a>56. 下面代码执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2.0</span>==<span class="string">&#x27;2&#x27;</span>==<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)==<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行结果: 输出 true </p><p>分 析 过 程 : 2.0==’2’ 返 回 true; true==new Boolean(true) 返 回 true; true==’1’返回 true; 所以最终结果是 true.</p><h2 id="57-下面的代码会输出什么-怎么改动下面代码-使其依次输出-1-2-3-4-5"><a href="#57-下面的代码会输出什么-怎么改动下面代码-使其依次输出-1-2-3-4-5" class="headerlink" title="57. 下面的代码会输出什么? 怎么改动下面代码, 使其依次输出 1,2,3,4,5"></a>57. 下面的代码会输出什么? 怎么改动下面代码, 使其依次输出 1,2,3,4,5</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果: </p><p>在控制台输出:6,6,6,6,6 </p><p>改造后的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123; (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;, <span class="number">1000</span>*i)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="58-下面代码执行结果是什么"><a href="#58-下面代码执行结果是什么" class="headerlink" title="58. 下面代码执行结果是什么?"></a>58. 下面代码执行结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>();</span><br></pre></td></tr></table></figure><p>执行结果: 弹出 10 </p><p>分析过程: let 声明的变量有块级作用域, 所以 let 声明的 a 只在 if 条 件的花括号中生效, 所以会向上级作用域查找</p><h1 id="编码题"><a href="#编码题" class="headerlink" title="编码题"></a>编码题</h1><h2 id="59-使用-js-封装一个冒泡排序"><a href="#59-使用-js-封装一个冒泡排序" class="headerlink" title="59. 使用 js 封装一个冒泡排序"></a>59. 使用 js 封装一个冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortBubble</span>(<span class="params">arr</span>)&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">lengthi</span>;j++)&#123; </span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="60-封装一个方法实现去除数组中的重复元素"><a href="#60-封装一个方法实现去除数组中的重复元素" class="headerlink" title="60. 封装一个方法实现去除数组中的重复元素"></a>60. 封装一个方法实现去除数组中的重复元素</h2><p><code>方案一:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(arr[i])==-<span class="number">1</span>)&#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>方案二:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br></pre></td></tr></table></figure><p>分析过程: </p><p>Set 是es6 中新增的一种数据类型, 和数组很类似, 但是元素不能重复; Array.from 也是 es6 新增的方法, 可以将类数组对象(伪数组, set), 转 换成数组.</p><h2 id="61-已知数组-var-arr-‘This’-’is’-‘Woqu’-‘Company’-alert-出”This-is-Woqu-Company”"><a href="#61-已知数组-var-arr-‘This’-’is’-‘Woqu’-‘Company’-alert-出”This-is-Woqu-Company”" class="headerlink" title="61. 已知数组 var arr=[‘This’, ’is’, ‘Woqu’, ‘Company’], alert 出”This is Woqu Company”."></a>61. 已知数组 var arr=[‘This’, ’is’, ‘Woqu’, ‘Company’], alert 出”This is Woqu Company”.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="62-编写一个-js-函数-parseQueryString-它的用途是把-url-中的参数解-析为一个对象-如-var-url-”http-www-demo-cn-index-html-key1-val1-amp-key2-val2”"><a href="#62-编写一个-js-函数-parseQueryString-它的用途是把-url-中的参数解-析为一个对象-如-var-url-”http-www-demo-cn-index-html-key1-val1-amp-key2-val2”" class="headerlink" title="62. 编写一个 js 函数 parseQueryString, 它的用途是把 url 中的参数解 析为一个对象, 如 var url=”http://www.demo.cn/index.html?key1=val1&amp;key2-val2”"></a>62. 编写一个 js 函数 parseQueryString, 它的用途是把 url 中的参数解 析为一个对象, 如 var url=”<a href="http://www.demo.cn/index.html?key1=val1&amp;key2-val2”">http://www.demo.cn/index.html?key1=val1&amp;key2-val2”</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseQueryString</span>(<span class="params">argu</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> str = argu.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]; </span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> temp = str.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.<span class="property">length</span>; i++)&#123; </span><br><span class="line">        <span class="keyword">var</span> temp2 = temp[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">result[temp2[<span class="number">0</span>]] = temp2[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63-统计-str-”jhadfgskjfajhdewqe”字符串中出现最多的字母"><a href="#63-统计-str-”jhadfgskjfajhdewqe”字符串中出现最多的字母" class="headerlink" title="63. 统计 str=”jhadfgskjfajhdewqe”字符串中出现最多的字母?"></a>63. 统计 str=”jhadfgskjfajhdewqe”字符串中出现最多的字母?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countStr</span>(<span class="params">str</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 循环完毕后会得到一个对象,如&#123;a:0,b:1,c:2,d:3,e:4&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!json[str.<span class="title function_">charAt</span>(i)])&#123; </span><br><span class="line">        json[str.<span class="title function_">charAt</span>(i)] =<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123; </span><br><span class="line">        json[str.<span class="title function_">charAt</span>(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">var</span> iMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iIndex = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 查找出现次数做多的字符,和出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> json)&#123; </span><br><span class="line">        <span class="keyword">if</span> (json[i] &gt; iMax)&#123;</span><br><span class="line">            iMax = json[i];</span><br><span class="line">            iIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;iMax,iIndex&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="64-编码实现对象深拷贝"><a href="#64-编码实现对象深拷贝" class="headerlink" title="64. 编码实现对象深拷贝"></a>64. 编码实现对象深拷贝</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj) &#123;</span><br><span class="line">    if (obj instanceof Obejct) &#123;</span><br><span class="line">        let isArray = Array.isArray(obj)</span><br><span class="line">        let cloneObj = isArray ? [] : &#123;&#125;</span><br><span class="line">        for (let key in obj) &#123;</span><br><span class="line">            cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        throw new Error(&#x27;obj 不是一个对象！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">return cloneObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="65-有-Student-和-Person-两个类-Person-类有-name-属性和-sayName-方-法-Student-类继承自-Person-类-分别使用-ES5-和-ES6-的语法实现"><a href="#65-有-Student-和-Person-两个类-Person-类有-name-属性和-sayName-方-法-Student-类继承自-Person-类-分别使用-ES5-和-ES6-的语法实现" class="headerlink" title="65. 有 Student 和 Person 两个类, Person 类有 name 属性和 sayName 方 法, Student 类继承自 Person 类. 分别使用 ES5 和 ES6 的语法实现."></a>65. 有 Student 和 Person 两个类, Person 类有 name 属性和 sayName 方 法, Student 类继承自 Person 类. 分别使用 ES5 和 ES6 的语法实现.</h2><p>ES6 实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123; </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props); <span class="comment">//继承父类的属性要使用super </span></span><br><span class="line">        <span class="comment">// Person.call(this, props)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5 实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>)&#123; </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>)&#123; </span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="66-写一个左中右布局占满屏幕-其中左右两块固定宽度-200-中间自-适应-要求先加载中间块-请写出结构和样式"><a href="#66-写一个左中右布局占满屏幕-其中左右两块固定宽度-200-中间自-适应-要求先加载中间块-请写出结构和样式" class="headerlink" title="66. 写一个左中右布局占满屏幕, 其中左右两块固定宽度 200,中间自 适应,要求先加载中间块, 请写出结构和样式"></a>66. 写一个左中右布局占满屏幕, 其中左右两块固定宽度 200,中间自 适应,要求先加载中间块, 请写出结构和样式</h2><p>Css 样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1FA363</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#DC4C3F</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFCE44</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html 结构:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>思路分析: html 标签的加载顺序是自上而下, 所以要想让中间部分先加载, 只需要把中间部分的标签写在最前面即可.</p><h2 id="67-如何扩展-jquery-的静态方法-如-getName"><a href="#67-如何扩展-jquery-的静态方法-如-getName" class="headerlink" title="67. 如何扩展 jquery 的静态方法, 如$.getName();"></a>67. 如何扩展 jquery 的静态方法, 如$.getName();</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="68-使用-js-求-10000-以内的所有质数的和"><a href="#68-使用-js-求-10000-以内的所有质数的和" class="headerlink" title="68. 使用 js 求 10000 以内的所有质数的和."></a>68. 使用 js 求 10000 以内的所有质数的和.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getZs</span>(<span class="params">num</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;<span class="comment">//4</span></span><br><span class="line">        <span class="comment">//假设所有的数都是质数</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//通过嵌套循环找到 i 除了 1 和本身以外所有可能出现的因子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">//判断 i 是否为质数</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;<span class="comment">//能进到当前的分支 说明不是质数</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>)&#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="69-使用-js-打印出-1-10000-之间的所有对称数-如-121-1331"><a href="#69-使用-js-打印出-1-10000-之间的所有对称数-如-121-1331" class="headerlink" title="69. 使用 js 打印出 1-10000 之间的所有对称数(如 121, 1331)"></a>69. 使用 js 打印出 1-10000 之间的所有对称数(如 121, 1331)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isSymNum</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">    start = (start &lt;= <span class="number">11</span> ? <span class="number">11</span> : start);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> strI = +(i.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> (strI == i) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="70-二维数组根据-num-的值进行升序排序"><a href="#70-二维数组根据-num-的值进行升序排序" class="headerlink" title="70. 二维数组根据 num 的值进行升序排序:"></a>70. 二维数组根据 num 的值进行升序排序:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">32</span>, <span class="attr">num</span>: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">28</span>, <span class="attr">num</span>: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">23</span>, <span class="attr">num</span>: <span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>实现过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="property">num</span>-b.<span class="property">num</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="71-Js-中-eval-的功能是什么-缺点是什么"><a href="#71-Js-中-eval-的功能是什么-缺点是什么" class="headerlink" title="71. Js 中 eval 的功能是什么? 缺点是什么?"></a>71. Js 中 eval 的功能是什么? 缺点是什么?</h2><p>eval 函数的作用: 可以将一个字符串当做 js 代码执行. </p><p>缺点: 执行效率比较低, 不安全.</p><h2 id="72-有一个数列-0-1-1-2-3-5-8-13-21…-定义函数求数列第-n-项"><a href="#72-有一个数列-0-1-1-2-3-5-8-13-21…-定义函数求数列第-n-项" class="headerlink" title="72. 有一个数列(0,1,1,2,3,5,8,13,21…),定义函数求数列第 n 项"></a>72. 有一个数列(0,1,1,2,3,5,8,13,21…),定义函数求数列第 n 项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getFibo(n)&#123; </span><br><span class="line">    if(n==1) return 0;</span><br><span class="line">    if(n==2) return 1;</span><br><span class="line">    return getFibo(n-1)+getFibo(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="73-使用什么办法能让如下条件判断成立"><a href="#73-使用什么办法能让如下条件判断成立" class="headerlink" title="73. 使用什么办法能让如下条件判断成立?"></a>73. 使用什么办法能让如下条件判断成立?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>&amp;&amp;a==<span class="number">2</span>&amp;&amp;a==<span class="number">3</span>)&#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案一:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">toString</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.<span class="property">join</span> = a.<span class="property">shift</span>;</span><br></pre></td></tr></table></figure><p>思路分析:</p><p>数组本身有一个 join 方法, 在把数组当做简单数据类型调用的时候, 会自动调用 join; 而 shift 也是一个数组的方法, shift 是将数组的开头元素删除, 返回值就是删除的元素, a.join=a.shift 相当于在每一次调用 a 的时候都会调用 shift 方法. </p><p>方案三:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init=<span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> init++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="74-下面代码输出结果是什么"><a href="#74-下面代码输出结果是什么" class="headerlink" title="74. 下面代码输出结果是什么?"></a>74. 下面代码输出结果是什么?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeObjectProperty</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="comment">// 输出的是这个结果</span></span><br><span class="line">    o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.csser.com/&quot;</span>;</span><br><span class="line">    o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.popcg.com/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CSSer</span> = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">changeObjectProperty</span>( <span class="title class_">CSSer</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title class_">CSSer</span>.<span class="property">siteUrl</span> );</span><br></pre></td></tr></table></figure><p>输出结果: <code>http://www.csser.com/</code></p><h1 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h1><h2 id="75-列举-DOM-元素增删改查的-API"><a href="#75-列举-DOM-元素增删改查的-API" class="headerlink" title="75.列举 DOM 元素增删改查的 API"></a>75.列举 DOM 元素增删改查的 API</h2><p><code>创建 DOM</code>: document.createElement(); </p><p><code>查 找 DOM</code>: </p><p>document.getElementById(); </p><p>document.getElementsByClassName(); </p><p>document.getElementsByName(); </p><p>document.querySelectorAll(); </p><p>document.querySelector(); </p><p><code>追加 DOM</code>: parentDom.appendChild();</p><p><code>移除 DOM</code>: parentDom.removeChild();</p><h2 id="76-BOM-中有哪些常用的对象"><a href="#76-BOM-中有哪些常用的对象" class="headerlink" title="76.BOM 中有哪些常用的对象?"></a>76.BOM 中有哪些常用的对象?</h2><p><code>location:</code></p><p>location.href; 页面 url 地址 </p><p>location.hash; url 中#后的部分 </p><p>location.search; url 中?后的部分(查询字符串) </p><p>location.reload(); 刷新页面; </p><p><code>navigator:</code></p><p>navigator.userAgent: 浏览器的 userAgent 信息 </p><p><code>history:</code></p><p>history.go(1);前进 1 步 </p><p>history.go(-1);后退 1 步; </p><p>history.forward();前进 </p><p>history.back(); 后退 </p><p><code>screen:</code></p><p>screen.availWidth: 屏幕有效宽度 </p><p>screen.availHeight: 屏幕有效高度</p><h2 id="77-列举几个常见的浏览器兼容问题"><a href="#77-列举几个常见的浏览器兼容问题" class="headerlink" title="77.列举几个常见的浏览器兼容问题?"></a>77.列举几个常见的浏览器兼容问题?</h2><p>主流浏览器发送 ajax 使用 XMLHttpRequest 创建异步对象, IE 浏览器时候用 XActive 创建异步对象;</p><p><code>主流浏览器注册事件</code></p><p>addEventListener(“eventType”,”handler”,”true|false”); removeEventListner(“eventType”,”handler”,”true|false”);</p><p><code>IE 浏览器:</code></p><p>注册事件:attachEvent( “eventType”，”handler”) 移除事件:detachEvent(“eventType”，”handler” )</p><p><code>阻止事件冒泡:</code></p><p>主流浏览器:event.stopPropagation() </p><p>IE 浏览器:event.cancleBubble=true; </p><p><code>获取事件源:</code></p><p>主流浏览器: event.target </p><p>IE 浏览器:event.srcElement</p><h2 id="78-什么是事件委托"><a href="#78-什么是事件委托" class="headerlink" title="78.什么是事件委托?"></a>78.什么是事件委托?</h2><p>本应该注册给子元素的事件, 注册给父元素</p><h2 id="79-事件委托的原理是什么"><a href="#79-事件委托的原理是什么" class="headerlink" title="79.事件委托的原理是什么?"></a>79.事件委托的原理是什么?</h2><p>事件冒泡, 因为有事件冒泡的存在, 所以子元素的事件会向外冒泡, 触发父元素的相同事件, 根据事件对象可以找到真正触发事件的事 件源.</p><h2 id="80-Javscript-中有几种定时器-有什么区别"><a href="#80-Javscript-中有几种定时器-有什么区别" class="headerlink" title="80.Javscript 中有几种定时器, 有什么区别?"></a>80.Javscript 中有几种定时器, 有什么区别?</h2><p>setInterval: 间歇定时器, 间隔一定的事件就执行, 执行多次;</p><p>setTimeout: 延时定时器, 只执行一次</p><h2 id="81-如何实现多个标签页的通信"><a href="#81-如何实现多个标签页的通信" class="headerlink" title="81.如何实现多个标签页的通信?"></a>81.如何实现多个标签页的通信?</h2><p>localStorage 可以实现同一浏览器多个标签页之间通信的原理;</p><p>localStorage 是 Storage 对象的实例。对 Storage 对象进行任何修改，都会在文档上触发 storage 事件。当通过属性或者 setItem()方 法保存数据，使用 delete 操作符或 removeItem()删除数据，或者调用 clear()方法时，都会发生该事件。</p><p>A.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.οnlοad=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oInput=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    oBtn.οnclick=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> val=oInput.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;value&quot;</span>,val);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>B.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;storage&quot;</span>,<span class="keyword">function</span>(<span class="params">event</span>)&#123; conso</span></span><br><span class="line"><span class="language-javascript">le.<span class="title function_">log</span>(<span class="string">&quot;value is&quot;</span>+<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;value&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key is&quot;</span>+event.<span class="property">newValue</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h2 id="82-jquery-中的-each-和-selector-each-有什么不同"><a href="#82-jquery-中的-each-和-selector-each-有什么不同" class="headerlink" title="82. jquery 中的$.each 和$(selector).each()有什么不同?"></a>82. jquery 中的$.each 和$(selector).each()有什么不同?</h2><p><code>$.each</code> 可以循环任何数组, 包括普通数组和 jquery 对象组成的伪数组; </p><p><code>$(selector).each()</code>只能循环遍历 jquery 对象组成的伪数组</p><h2 id="83-Jquery-中-each-和原生-js-中的-forEach-方法有什么区别"><a href="#83-Jquery-中-each-和原生-js-中的-forEach-方法有什么区别" class="headerlink" title="83. Jquery 中$.each 和原生 js 中的 forEach 方法有什么区别?"></a>83. Jquery 中$.each 和原生 js 中的 forEach 方法有什么区别?</h2><p>Jquer 中的$.each 不仅可以循环遍历普通数组, 还可以循环遍历jquery 对象的伪数组, 原生 js 中的 forEach 只能循环遍历数组; 其次第二个 实参函数的参数顺序不一样, $.each(arr,function(索引,循环单项,数组 本身){}), arr.forEach(function(循环单项,索引,数组本身){})</p><h2 id="84-原生-JS-的-window-onload-与-Jquery-的-document-ready-function-，-function-有什么不同？"><a href="#84-原生-JS-的-window-onload-与-Jquery-的-document-ready-function-，-function-有什么不同？" class="headerlink" title="84. 原生 JS 的 window.onload 与 Jquery 的$(document).ready(function() {})，$(function () {})有什么不同？"></a>84. 原生 JS 的 window.onload 与 Jquery 的$(document).ready(function() {})，$(function () {})有什么不同？</h2><p>执行时机不一样, window.onload 会等待页面元素渲染完毕并且资源 文件加载完毕后才会执行;$(document).ready(function() {})是当页面元 素渲染完毕后就会执行, 所以执行时机先于 window.onload</p><h2 id="85-Jquery-实现连式编程的原理是什么"><a href="#85-Jquery-实现连式编程的原理是什么" class="headerlink" title="85. Jquery 实现连式编程的原理是什么?"></a>85. Jquery 实现连式编程的原理是什么?</h2><p>jquery 的方法中最后都会 return 一个 this, 这个 this 就是当前元素的 jquery 对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">parma</span>) &#123;</span><br><span class="line">    <span class="comment">//如果调用者传入的是一个函数, 则当做入口函数使用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (parma) == <span class="string">&#x27;function&#x27;</span>)&#123; </span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = parma</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果调用者传入的是一个选择器, 则返回一个对象</span></span><br><span class="line">        <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(parma)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="number">0</span>: dom,</span><br><span class="line">            <span class="comment">//&#123;color:&#x27;red&#x27;,border:&#x27;1px solid red&#x27;&#125;</span></span><br><span class="line">            <span class="attr">css</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> (obj) == <span class="string">&#x27;object&#x27;</span>)&#123; </span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123; </span><br><span class="line">                        dom.<span class="property">style</span>[key] =obj[key];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">click</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">                <span class="comment">// 注册点击事件</span></span><br><span class="line">                dom.<span class="property">onclick</span> = fn;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">hide</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123; </span><br><span class="line">                dom.<span class="property">style</span>.<span class="property">display</span> =<span class="string">&#x27;none&#x27;</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">show</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123; </span><br><span class="line">                dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123; </span><br><span class="line">                <span class="keyword">return</span> dom;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="86-Jquery-如何多次给同一个标签绑定同一个事件"><a href="#86-Jquery-如何多次给同一个标签绑定同一个事件" class="headerlink" title="86. Jquery 如何多次给同一个标签绑定同一个事件?"></a>86. Jquery 如何多次给同一个标签绑定同一个事件?</h2><p>使用 addEventListener(‘事件名’,function(){})注册的事件, 不会出现事 件覆盖, jquery 中也是这样做的.</p><h2 id="87-如何开发-jquery-插件"><a href="#87-如何开发-jquery-插件" class="headerlink" title="87. 如何开发 jquery 插件?"></a>87. 如何开发 jquery 插件?</h2><p>Jquery 提供了两种开发插件的方式: </p><p><code>$.fn</code>: 可以通过任意 jquery 对象来调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.fn.<span class="property">green</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,$(<span class="variable language_">this</span>));</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;<span class="attr">background</span>:<span class="string">&#x27;green&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用以后, div 的背景色会被设置成 green</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">green</span>();</span><br></pre></td></tr></table></figure><p><code>$.extend</code>: 开发的插件只能通过$顶级对象来调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">$.<span class="title function_">extend</span>(&#123;</span><br><span class="line"><span class="attr">alert</span>: <span class="keyword">function</span> (<span class="params">msg</span>)&#123; </span><br><span class="line"><span class="title function_">alert</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">$.<span class="title function_">alert</span>(<span class="string">&#x27;这是提示信息&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="88-Jquery-中那些方法不支持链式操作"><a href="#88-Jquery-中那些方法不支持链式操作" class="headerlink" title="88. Jquery 中那些方法不支持链式操作?"></a>88. Jquery 中那些方法不支持链式操作?</h2><p>$.trim(); </p><p>$.each();</p><p>$(selector).html(), </p><p>$(selector).text()</p><h1 id="H5-新特性"><a href="#H5-新特性" class="headerlink" title="H5 新特性"></a>H5 新特性</h1><h2 id="89-H5-都新增了那些新特性"><a href="#89-H5-都新增了那些新特性" class="headerlink" title="89. H5 都新增了那些新特性?"></a>89. H5 都新增了那些新特性?</h2><p>语义化的标签(header,nav,footer,aside,article,section)</p><p>本地存储 sessionStorage,localStorage;</p><p>拖拽释放(Drag and drop) API 音频、视频 API(audio,video)</p><p>画布(Canvas) API</p><p>地理(Geolocation) API</p><p>表单控件，calendar、date、time、email、url、search </p><p>新的技术 websocket</p><h2 id="90-sessionStorage-localStorage-和-cookie-三者有什么区别"><a href="#90-sessionStorage-localStorage-和-cookie-三者有什么区别" class="headerlink" title="90. sessionStorage,localStorage 和 cookie 三者有什么区别?"></a>90. sessionStorage,localStorage 和 cookie 三者有什么区别?</h2><p><code>共同点</code>:</p><p>它们三者都是浏览器端的存储介质, 可以存储一些数据. </p><p><code>不同点</code>:</p><p><code>sessionStorage</code> 是将数据存储在页面的内存中, 所以数据会跟随页面 的关闭而销毁, 存储数据相对较少(5M 左右), 只能存储字符串; localStorage 是将数据存储在电脑的磁盘上, 存储数据量大(20M 左右), 需要手动删除, 只能存储字符串;</p><p><code>cookie</code> 是http 协议的重要组成部分, 存储数据量相对比较少(4K 左右), 存储cookie 的时候可以设置过期时间, 到达过期时间后, 会自动销毁, 如果没有设置, 则跟随浏览器的关闭而销毁. <code>cookie</code> 中存储的数据会 伴随每一次http 请求被发送到服务端, 所以不建议在<code>cookie</code> 中存储大 量数据.</p><h1 id="数据交互-ajax"><a href="#数据交互-ajax" class="headerlink" title="数据交互(ajax)"></a>数据交互(ajax)</h1><h2 id="91-使用-jquery-写出一个简单的-ajax-的请求"><a href="#91-使用-jquery-写出一个简单的-ajax-的请求" class="headerlink" title="91. 使用 jquery 写出一个简单的$.ajax 的请求"></a>91. 使用 jquery 写出一个简单的$.ajax 的请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="92-常见-HTTP-状态码都有哪些？"><a href="#92-常见-HTTP-状态码都有哪些？" class="headerlink" title="92. 常见 HTTP 状态码都有哪些？"></a>92. 常见 HTTP 状态码都有哪些？</h2><p>100 =&gt; 正在初始化（一般是看不到的）</p><p>101 =&gt; 正在切换协议（websocket 浏览器提供的）</p><p>200 或者以 2 开头的两位数 =&gt; 都是代表响应主体的内容已经成功返回了</p><p>202 =&gt; 表示接受</p><p>301 =&gt; 永久重定向/永久转移</p><p>302 =&gt; 临时重定向/临时转移（一般用来做服务器负载均衡）</p><p>304 =&gt; 本次获取的内容是读取缓存中的数据，会每次去服务器校验</p><p>400 =&gt; 参数出现错误（客户端传递给服务器端的参数出现错误）</p><p>401 =&gt; 未认证，没有登录网站</p><p>403 =&gt; 禁止访问，没有权限</p><p>404 =&gt; 客户端访问的地址不存在</p><p>500 =&gt; 未知的服务器错误</p><p>503 =&gt; 服务器超负荷（假设一台服务器只能承受 10000 人，当第 10001 人访问的时候，如果服务器没有做负载均衡，那么这个人的网 络状态码就是 503）</p><h2 id="93-你知道的-HTTP-请求方式有几种？"><a href="#93-你知道的-HTTP-请求方式有几种？" class="headerlink" title="93. 你知道的 HTTP 请求方式有几种？"></a>93. 你知道的 HTTP 请求方式有几种？</h2><ol><li><p>GET 请求指定的页面信息，并返回实体主体。</p></li><li><p>HEAD 类似于 get 请求，只不过返回的响应中没有具体的内容， 用于获取报头</p></li><li><p>POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</p></li><li><p>PUT 从客户端向服务器传送的数据取代指定的文档的内容。</p></li><li><p>DELETE 请求服务器删除指定的页面。</p></li><li><p>CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</p></li><li><p>OPTIONS 允许客户端查看服务器的性能。</p></li><li><p>TRACE 回显服务器收到的请求，主要用于测试或诊断。</p></li><li><p>PATCH 实体中包含一个表，表中说明与该 URI 所表示的原内容 的区别。</p></li><li><p>MOVE 请求服务器将指定的页面移至另一个网络地址。</p></li><li><p>COPY 请求服务器将指定的页面拷贝至另一个网络地址。</p></li><li><p>LINK 请求服务器建立链接关系。</p></li><li><p>UNLINK 断开链接关系。</p></li><li><p>WRAPPED 允许客户端发送经过封装的请求。</p></li><li><p>LOCK 允许用户锁定资源，比如可以再编辑某个资源时将其锁定，以防别人同时对其进行编辑。</p></li><li><p>MKCOL 允许用户创建资源</p></li><li><p>Extension-mothed 在不改动协议的前提下，可增加另外的方法。</p></li></ol><h2 id="94-请尽可能详尽的解释-ajax-的工作原理"><a href="#94-请尽可能详尽的解释-ajax-的工作原理" class="headerlink" title="94. 请尽可能详尽的解释 ajax 的工作原理"></a>94. 请尽可能详尽的解释 ajax 的工作原理</h2><p>第一步:创建一部对象 var xhr=new XMLHttpRequest() </p><p>第二步:设置请求行 xhr.open(‘请求方式’,请求地址); </p><p>第三步:发送请求 Get 方式 xhr.send(null), 如果是 post 请求还要设置请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-form-urlencoded</span><br><span class="line">&#x27;);</span><br><span class="line">xhr.send(&quot;name=zs&amp;age=18&quot;);</span><br><span class="line">//第四步:监听服务端的响应</span><br><span class="line">xhr.onreadystatechange=function()&#123;</span><br><span class="line">    if(xhr.status==200&amp;&amp;xhr.readyState==4)&#123;</span><br><span class="line">        // 获取 json</span><br><span class="line">        var json=xhr.responseText&amp;&amp;JSON.parse(xhr.responseText)</span><br><span class="line">        // 获取 xml</span><br><span class="line">        var xml=xhr.responseXML;</span><br><span class="line">        console.log(json,xml)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="95-页面编码和被请求的资源编码如果不一致如何处理？"><a href="#95-页面编码和被请求的资源编码如果不一致如何处理？" class="headerlink" title="95. 页面编码和被请求的资源编码如果不一致如何处理？"></a>95. 页面编码和被请求的资源编码如果不一致如何处理？</h2><p>a.html 的编码是 gbk 或 gb2312 的。 而引入的 js 编码为 utf-8 的 ， 那就需要在引入的时候</p><p><code>&lt;script src=&quot;http://www.xxx.com/test.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></p><p>同理，如果你的页面是 utf-8 的，引入的 js 是 gbk 的，那么就需要加 上 charset=”gbk”.</p><h2 id="96-如何解决跨域问题"><a href="#96-如何解决跨域问题" class="headerlink" title="96. 如何解决跨域问题?"></a>96. 如何解决跨域问题?</h2><p>jsonp, 服务器代理, cors</p><h2 id="97-jsonp-跨域的原理是什么"><a href="#97-jsonp-跨域的原理是什么" class="headerlink" title="97. jsonp 跨域的原理是什么?"></a>97. jsonp 跨域的原理是什么?</h2><p>动态在页面中创建一个 script 标签, 使其 src 属性指向后端数据接口, 后 端 数 据 接 口 必 须 返 回 一 个 js 函 数 的 调 用 字 符 串 ( 如 cb(‘{“name”:”zs”,”age”:18}’)), 将要返回给前端的 json 数据作为函数的 实参, 当 script 标签加载完毕后会在浏览器中执行后端返回的函数调 用,所以前端必须事先对调用的函数进行声明. 因为函数是在 js 中声 明的, 所以可以在函数内部拿到服务端调用的时候传入的实参, 所以就间接实现了跨域请求数据.</p><h2 id="98-什么是同步和异步-那种执行方式更好"><a href="#98-什么是同步和异步-那种执行方式更好" class="headerlink" title="98. 什么是同步和异步, 那种执行方式更好?"></a>98. 什么是同步和异步, 那种执行方式更好?</h2><p>同步是指一个程序执行完了接着去执行另外一个程序, 异步是指多个程序同时执行. 所以异步效率更高, 因为异步不会出现阻塞现象, 前一 个程序的执行不会影响后一个程序的执行.</p><h2 id="99-GET-和POST-的区别，何时使用-POST？"><a href="#99-GET-和POST-的区别，何时使用-POST？" class="headerlink" title="99. GET 和POST 的区别，何时使用 POST？"></a>99. GET 和POST 的区别，何时使用 POST？</h2><p><code>get</code> 是将要传递的参数拼在 url 中进行传递,传递数据量少, 不安全</p><p><code>post</code> 是将传递的参数放在请求体里传递, 携带数据量大, 相对安全. 要提交一些敏感数据(比如登录密码),上传文件时, 必须使用 post 请求</p><h2 id="100-请解释一下-JavaScript-的同源策略"><a href="#100-请解释一下-JavaScript-的同源策略" class="headerlink" title="100. 请解释一下 JavaScript 的同源策略"></a>100. 请解释一下 JavaScript 的同源策略</h2><p>同源策略是浏览器的一项安全策略, 浏览器只允许 js 代码请求和当前所在服务器域名,端口,协议相同的数据接口上的数据,这就是同源策略.</p><h2 id="101-一个页面从输入-URL-到页面加载显示完成，这个过程中都发-生了什么？"><a href="#101-一个页面从输入-URL-到页面加载显示完成，这个过程中都发-生了什么？" class="headerlink" title="101. 一个页面从输入 URL 到页面加载显示完成，这个过程中都发 生了什么？"></a>101. 一个页面从输入 URL 到页面加载显示完成，这个过程中都发 生了什么？</h2><p>首先根据域名查询 DNS 服务器获取服务器 IP,然后拿着服务器 IP 和 域名请求对应的服务器, 请求成功后 web 服务器会根据一系列运算, 将 客户端需要的数据通过网络传输到客户端浏览器, 最终由浏览器解 析后呈现给终端用户.</p><h2 id="102-网站从-http-协议切换到-https-协议需要对代码做哪些处理"><a href="#102-网站从-http-协议切换到-https-协议需要对代码做哪些处理" class="headerlink" title="102. 网站从 http 协议切换到 https 协议需要对代码做哪些处理?"></a>102. 网站从 http 协议切换到 https 协议需要对代码做哪些处理?</h2><p>不需要对代码做任何处理, 只需要在 web 服务器中加入一个 ssl 的安 全认证模块即可</p><h2 id="103-什么是-RESTful-API"><a href="#103-什么是-RESTful-API" class="headerlink" title="103. 什么是 RESTful API?"></a>103. 什么是 RESTful API?</h2><p>RESTful 的核心思想就是使用 HTTP 请求方式配合资源对象的方式来 44 完成对服务端某个资源的操作(HTTP 动词+资源对象)。 比如，GET /articles 这个命令，GET 是 HTTP 动词，/articles 是资源对 象。</p><p>补充说明:</p><p>动词通常就是五种 HTTP 方法，对应 CRUD 操作:</p><p>GET：读取（Read） </p><p>POST：新建（Create） </p><p>PUT：更新（Update） </p><p>PATCH：更新（Update），通常是部分更新 </p><p>DELETE：删除（Delete）</p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="104-什么是渐进增强和优雅降级"><a href="#104-什么是渐进增强和优雅降级" class="headerlink" title="104. 什么是渐进增强和优雅降级?"></a>104. 什么是渐进增强和优雅降级?</h2><p><code>渐进增强</code>（progressive enhancement）：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等 改进和追加功能达到更好的用户体验。（从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能，向页面添加无害于基础浏览器的额外样式和功能。当浏览器支持时，它们会自动地呈现出来并发挥作用。）</p><p><code>优雅降级</code>（graceful degradation）：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。（Web 站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于 IE 独特的盒模型布局问题，针对不同版本的 IE 的 hack 实践过优雅降级了，为那些无法支持功能的浏览器增加候 选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。）</p><p><code>区别</code>：优雅降级是从复杂的现状开始，并试图减少用户体验的供给， 而渐进增强则是从一个非常基础的、能够起作用的版本开始，并不断扩充，以适应未来环境的需要。</p><h2 id="105-什么是页面的回流和重绘"><a href="#105-什么是页面的回流和重绘" class="headerlink" title="105. 什么是页面的回流和重绘?"></a>105. 什么是页面的回流和重绘?</h2><p><code>回流</code>是指当页面的结构或者标签的尺寸发生变化的时候, 浏览器需 要对页面进行重排, 并重新渲染; </p><p><code>重绘</code>是指当页面上的标签的外观(比如字体颜色,或背景颜色)发生改 变的时候, 浏览器需要重新对页面进行渲染. </p><p>所以回流一定会引起页面的重绘, 重绘不一定会引起回流. 要提高页面性能, 就要尽可能的减少页面的回流和重绘.</p><h2 id="106-针对页面性能优化-你有哪些优化方案"><a href="#106-针对页面性能优化-你有哪些优化方案" class="headerlink" title="106. 针对页面性能优化,你有哪些优化方案?"></a>106. 针对页面性能优化,你有哪些优化方案?</h2><p>资源加载方面:</p><p>减少 http 请求次数, 具体方案, 代码合并(合并 css,js), 使用精灵图; </p><p>减少 http 请求数据量, 代码压缩(css,js,html), 合理设置缓存;</p><p>启用 CDN 加速服务; </p><p>代码层面: 避免滥用全局变量, 减少作用域查找(能用局部变量就不要声明全局 变量), 不要滥用闭包; </p><p>减少 DOM 操作, 操作 DOM 的时候对已经查找到的 DOM 对象进行缓 存, 避免重复查找; </p><p>使用图片懒加载, 避免单次加载图片数量过多导致页面卡顿; </p><p>将 script 标签写在页面底部, 因为 js 的加载会阻塞页面的渲染; </p><p>不要在本地书写大量 cookie, 因为 cookie 会伴随每一次 http 请求;</p><h2 id="107-什么是-CDN-加速"><a href="#107-什么是-CDN-加速" class="headerlink" title="107. 什么是 CDN 加速?"></a>107. 什么是 CDN 加速?</h2><p>CDN(Content Delivery Network)全称内容分发网络, 是运营商所提供 的一项增值服务, 花钱就可以拥有这项加速服务. </p><p>CDN 主要是对网站 的静态资源进行加速, CDN 在全国会有很多节点服务器(每个城市都 有), 当你购买了一个 CDN 服务以后, CDN 服务器会对你的网站的静态 资源文件进行缓存处理, 当第二次有人访问的时候, 那么服务器就会 从就近的 CDN 节点服务器上获取网站所需的静态资源, 由于 CDN 服 务器的性能比较高, 并且距离客户端的物理距离比较近, 所以就可以 实现加速. 启用 CDN 服务只需要在运营提供商提供的后台进行配置 (配置要对那个域名启用 CDN 服务), 不需要对代码做任何修改.</p><h2 id="108-什么是-SEO"><a href="#108-什么是-SEO" class="headerlink" title="108. 什么是 SEO?"></a>108. 什么是 SEO?</h2><p>SEO(Search Engine Optimizing)搜索引擎优化, 就是让搜索引擎去抓取我们的网页. 为了让搜索引擎抓取我们的网页, 我们可以在书写代码 的时候做一些工作, 比如合理设置网页 title(标题), keywords(关键 字),description(描述); 因为搜索引擎在抓取到网页以后首先回去分析这几个关键信息.</p><h2 id="109-为什么利用多个域名来存储网站静态资源会更有效？"><a href="#109-为什么利用多个域名来存储网站静态资源会更有效？" class="headerlink" title="109. 为什么利用多个域名来存储网站静态资源会更有效？"></a>109. 为什么利用多个域名来存储网站静态资源会更有效？</h2><p>因为浏览器对请求静态资源文件有一个并发数量限制, 每次只能请求同一个域名下的若干个资源文件(根据浏览器的不同会有差异), 如果把资源文件存放在多个不同的域名下面就会突破浏览器的限制; 其次, 启用多个静态资源服务器,可以减轻主服务器的压力.</p><h2 id="110-移动端点击事件会有多少秒的延时-什么原因造成的-如何解决"><a href="#110-移动端点击事件会有多少秒的延时-什么原因造成的-如何解决" class="headerlink" title="110. 移动端点击事件会有多少秒的延时?什么原因造成的?如何解决?"></a>110. 移动端点击事件会有多少秒的延时?什么原因造成的?如何解决?</h2><p>移动端的点击事件会有 300ms 的延时;</p><p>是因为浏览器为了保留双击缩放的功能所造成的,早期浏览器都有一 个双击缩放的功能, 在用户点击一次以后, 浏览器会等待第二次点击, 如果用户在 300ms 内进行了第二次点击, 那么浏览器就会执行缩放的 功能, 如果 300ms 内没有再次点击, 则会当做单击事件处理;</p><p>解决方案:</p><p>使用touch 触摸事件来模拟点击事件;</p><p>使用fastclick 插件来解决;</p><p>静止页面缩放功能</p><h2 id="111-你了解到的网站攻击方式有哪些"><a href="#111-你了解到的网站攻击方式有哪些" class="headerlink" title="111. 你了解到的网站攻击方式有哪些?"></a>111. 你了解到的网站攻击方式有哪些?</h2><p>常见的网站攻击方式有 xss(跨站脚本攻击), csrf(跨站请求伪造)</p><h2 id="112-谈谈-js-中的垃圾回收机制"><a href="#112-谈谈-js-中的垃圾回收机制" class="headerlink" title="112. 谈谈 js 中的垃圾回收机制"></a>112. 谈谈 js 中的垃圾回收机制</h2><p>主要有以下两种方式：</p><p>(1)标记清除（mark and sweep）:</p><p>大部分浏览器以此方式进行垃圾回收，当变量进入执行环境（函数中 声明变量）的时候，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”，在离开环境之后还有的变量则是需要被删除的变量。标记方式不定，可以是某个特殊位的反转或维护一个列表等.垃圾收集器给内存中的所有变量 都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。在此之后再被加上的标记的变量即为需要回收的变量，因为环境中的变量已经无法访问到这些变量。</p><p>(2)引用计数(reference counting):</p><p>这种方式常常会引起内存泄漏，低版本的 IE 使用这种方式。机制就 是跟踪一个值的引用次数，当声明一个变量并将一个引用类型赋值给 该变量时该值引用次数加 1，当这个变量指向其他一个时该值的引用 次数便减一。当该值引用次数为 0 时就会被回收。</p><h2 id="113-Js-是单线程还是多线程"><a href="#113-Js-是单线程还是多线程" class="headerlink" title="113. Js 是单线程还是多线程?"></a>113. Js 是单线程还是多线程?</h2><p>单线程, 单位时间内只能处理一个进程</p><h2 id="114-Js-是如何实现异步操作的"><a href="#114-Js-是如何实现异步操作的" class="headerlink" title="114. Js 是如何实现异步操作的?"></a>114. Js 是如何实现异步操作的?</h2><p>Js 虽然是单线程的, 但是浏览器是多线程的, js 中的异步操作基本都 是由浏览器提供的子线程来完成的.</p><h2 id="115-分别介绍下-MVC-MVVM-MVP-这三种设计模式"><a href="#115-分别介绍下-MVC-MVVM-MVP-这三种设计模式" class="headerlink" title="115. 分别介绍下 MVC, MVVM, MVP 这三种设计模式?"></a>115. 分别介绍下 MVC, MVVM, MVP 这三种设计模式?</h2><p><code>MVC</code> 是后端语言的一种设计模式, 主要是实现对代码分层, M(model) 数据模型层, 主要负责操作数据库; V(view)视图层, 主要负责进行界面 展示, 可以认为前端的 html,css,js 充当的就是视图层; C(controller) 业务控制层, 主要负责控制具体的业务逻辑, 负责将 model 数据层的数据交给 view 视图层进行展示.</p><p><code>MVVM</code> 是前端的一种设计模式, vue 就是基于这种模式来设计的, 是从 MVC 演变过来的. M(model)数据层, 主要负责数据和方法的初始化; V(view)视图层, 可以认为 html,css 充当的就是视图层的角色; VM(view model)视图模型层, 负责连接数据层和视图层, 将数据层的数据交给 视图层展示, 将视图层的行为传递给数据层.</p><p><code>MVP</code> 也是从后端的 MVC 设置模式中演化过来的, 主要应用于安卓开 发中. M(model) 数据层, V(view) UI 逻辑; P(Presenter)业务逻辑</p><h1 id="ES6-7-8-新特性"><a href="#ES6-7-8-新特性" class="headerlink" title="ES6/7/8 新特性"></a>ES6/7/8 新特性</h1><h2 id="116-Es6-中新增了那些数据类型"><a href="#116-Es6-中新增了那些数据类型" class="headerlink" title="116. Es6 中新增了那些数据类型?"></a>116. Es6 中新增了那些数据类型?</h2><p>Symbol 类型（基本） </p><p>Set 类型（复杂） </p><p>Map 类型（复杂） </p><p>WeakSet 类型（复杂） </p><p>WeakMap 类型（复杂） </p><p>TypedArray 类型（复杂）</p><h2 id="117-ES6-新增了那些特性"><a href="#117-ES6-新增了那些特性" class="headerlink" title="117. ES6 新增了那些特性?"></a>117. ES6 新增了那些特性?</h2><p>const(声明常量), let(声明变量)关键字;</p><p>map 和 set 数据类型; </p><p>模板字符串;</p><p>对象数组解构赋值;</p><p>函数剩余参数;(…arg)</p><p>延展运算符;(…)</p><p>函数默认参数;fn(name=’zs’)</p><p>对象字面量的增强(属性名和属性值相同, 可缺省);</p><p>Promise 异步对象;</p><p>class 类的支持</p><h2 id="118-使用-let-声明的变量和-var-声明的变量有什么区别"><a href="#118-使用-let-声明的变量和-var-声明的变量有什么区别" class="headerlink" title="118. 使用 let 声明的变量和 var 声明的变量有什么区别?"></a>118. 使用 let 声明的变量和 var 声明的变量有什么区别?</h2><p>使用 let 声明的变量有块级作用域, 并且没有变量的声明提升( 使用 let 声明的变量在声明之前调用会报语法错误); 使用 var 声明的变量有声明提升(在声明之前调用会报 undefined), 没有块级作用域.</p><h2 id="119-谈谈-async-await-的使用方式和场景"><a href="#119-谈谈-async-await-的使用方式和场景" class="headerlink" title="119. 谈谈 async/await 的使用方式和场景"></a>119. 谈谈 async/await 的使用方式和场景</h2><p>async 是用来修饰函数的声明, 使用async 修饰的函数会变成一个异步函数. </p><p>await 用来修饰函数的调用, 被 await 修饰的函数必须返回一个 promise 异步对象, 使用 await 修饰后, 就会将 promise 异步对象转换成一个同步操作.</p><h2 id="120-箭头函数有什么作用及实际应用场景"><a href="#120-箭头函数有什么作用及实际应用场景" class="headerlink" title="120. 箭头函数有什么作用及实际应用场景?"></a>120. 箭头函数有什么作用及实际应用场景?</h2><p>箭头函数可以使函数内部的 this 指向和函数外部保持一致; 箭头函数之所以可以让函数内部的 this 指向和外部保持一致是因为箭头函数内部没有 this 指向. 可以在 ajax 的回调函数中使用箭头函数让回调函数中的 this 指向事件源; 可以在定时器的第二个参数中使用箭头函数, 避免函数内部的 this 指向全局 window.</p><h2 id="121-class-类的如何实现继承"><a href="#121-class-类的如何实现继承" class="headerlink" title="121. class 类的如何实现继承"></a>121. class 类的如何实现继承</h2><p>使用 extends 关键字实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=props.<span class="property">name</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=props.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Student 继承 Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span>=props.<span class="property">score</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="122-谈谈对-Promise-的理解"><a href="#122-谈谈对-Promise-的理解" class="headerlink" title="122. 谈谈对 Promise 的理解"></a>122. 谈谈对 Promise 的理解</h2><p>Promise 本身并没有提供任何的代码逻辑, 它可以帮助我们改造或优化传统的使用回调函数实现的异步操作, 让我们以一种更优雅的方式 来实现异步操作. 最显著的一个特点就是通过 Promise 可以解决传统的回调地狱. 代码层面 Promise 提供了一个构造函数, 在使用的时候 必须通过 new 创建一个实例对象, 在创建实对象的时候需要传递一个匿名函数, 这个匿名函数需要两个参数(resolve,reject), resolve 成功 处理函数, reject 失败处理函数. 什么时候触发成功处理函数和失败处理函数, 由具体的业务逻辑来决定. resolve 和 reject 需要通过 Promise 实例对象提供的 then 方法来传递.Promise 提供了两个静态方 法 all,race,all 可以一次执行多个 Promise 实例, 返回值是数组; race 也 可以一次执行多个 Promise 实例, 哪个实例最先执行完, 就返回哪个的执行结果.</p><h1 id="前端框架-Vue"><a href="#前端框架-Vue" class="headerlink" title="前端框架 Vue"></a>前端框架 Vue</h1><h2 id="123-vue-中如何封装一个组件"><a href="#123-vue-中如何封装一个组件" class="headerlink" title="123. vue 中如何封装一个组件"></a>123. vue 中如何封装一个组件</h2><p>首先定义一个后缀名为.vue 的文件. 文件内部还是三部分组成,template 模板部分, script 逻辑部分, style 样式部分. 这三部分是组件 的核心部分, 组件需要哪些结构, 在模板部分书写, 需要什么样的外 观样式, 通过 style 部分书写, 有哪些行为在 script 部分书写.一定要在 script 部分使用 es6 模块化的导出语法(export default{}), 进行导出. 然 后在需要调用组件的地方使用 es6 模块化导入语法导入即可, 组件需 要哪些参数, 直接在调用的部分进行传递即可.主要逻辑还是在组件中 完成.</p><h2 id="124-Vue-中-computed-和-watch-的区别"><a href="#124-Vue-中-computed-和-watch-的区别" class="headerlink" title="124. Vue 中 computed 和 watch 的区别?"></a>124. Vue 中 computed 和 watch 的区别?</h2><p>computed 是计算属性, 可以根据 data 中的数据成员,动态计算出一个 新的数据成员(这个数据成员在 data 中并不存在), 计算属性的函数必 须有返回值; watch 是监视器, 可以监视 data 中某一个数据成员的改 变或路由中的某些属性的改变, 可以根据这个改变, 做一些其他操作 (不仅仅局限于更新其他相关数据). </p><p>Watch 监听器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, </span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">        <span class="attr">fullName</span>: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>计算属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, </span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="125-谈谈对-vue-中插槽的理解"><a href="#125-谈谈对-vue-中插槽的理解" class="headerlink" title="125. 谈谈对 vue 中插槽的理解?"></a>125. 谈谈对 vue 中插槽的理解?</h2><p>Vue 中的插槽分为三种, 匿名插槽, 具名插槽, 作用域插槽. 通过插槽可以动态指定某一个组件模板部分的渲染, 我们在调用组件 的时候, 在组件的调用标签中间传递了什么样的标签结构, 那么该组 件就会把我们传递的标签结构放在他的模板部分进行渲染.</p><h2 id="126-v-show-和-v-if-在隐藏一个元素的时候有什么不同-应该如何-来选择"><a href="#126-v-show-和-v-if-在隐藏一个元素的时候有什么不同-应该如何-来选择" class="headerlink" title="126. v-show 和 v-if 在隐藏一个元素的时候有什么不同, 应该如何 来选择?"></a>126. v-show 和 v-if 在隐藏一个元素的时候有什么不同, 应该如何 来选择?</h2><p>v-show 是通过 css 的方式来隐藏元素, 而 v-if 是根据条件是否成立决定是否要创建元素. 如果某个元素需要频繁切换显示状态的话, 建议是使用 v-show, 因为频繁创建销毁 DOM 需要性能开销.</p><h2 id="127-什么是-Vuex-在那种场景下使用"><a href="#127-什么是-Vuex-在那种场景下使用" class="headerlink" title="127. 什么是 Vuex, 在那种场景下使用?"></a>127. 什么是 Vuex, 在那种场景下使用?</h2><p>Vuex 是针对 vue 的一个状态管理工具. 有几个核心的部分: </p><p>state 存储状态数据; </p><p>mutations: 更新数据的方法, </p><p>actions: 调用 mutations 中的方法, 更新 state 数据; </p><p>getters: 对 state 中的数据进行预处理 </p><p>当组件的关系比较复杂的时候, 可以使用 vuex 简化组件间的传值.</p><h2 id="128-说说-Vue-路由的使用步骤"><a href="#128-说说-Vue-路由的使用步骤" class="headerlink" title="128. 说说 Vue 路由的使用步骤?"></a>128. 说说 Vue 路由的使用步骤?</h2><p>第一步:下载路由模块 vue-router; </p><p>第二步:创建路由对象; </p><p>第三步:配置路由规则; </p><p>第四步:将路由对象注册为 vue 实例对象的成员属性</p><h2 id="129-你所了解到的常见-Vue-组件库有哪些"><a href="#129-你所了解到的常见-Vue-组件库有哪些" class="headerlink" title="129. 你所了解到的常见 Vue 组件库有哪些?"></a>129. 你所了解到的常见 Vue 组件库有哪些?</h2><p>PC 端组件库: element-ui, ant-design, iview</p><p>移动端: mint-ui, vant, vux</p><h2 id="130-谈谈对于-MVVM-的理解"><a href="#130-谈谈对于-MVVM-的理解" class="headerlink" title="130. 谈谈对于 MVVM 的理解?"></a>130. 谈谈对于 MVVM 的理解?</h2><p>MVVM 由三部分组成M(model 数据层), V(view 视图层),VM(view-model) 视图模型层. 是一种框架的设计思想, vue 就是基于 mvvm 来设计的. 其 中 M(model) 层 是 负 责 初 始 化 数 据 ,V(view) 只 负 责 页 面 展 示,VM(view-model)用来连接 view 层和 model 层, 将数据层的数据传递一个视图层进行展示, 将视图层的操作传递到数据层进行持久化.</p><h2 id="131-Vue-的生命周期"><a href="#131-Vue-的生命周期" class="headerlink" title="131. Vue 的生命周期?"></a>131. Vue 的生命周期?</h2><p>创建阶段: 只执行一次</p><p><code>beforeCreate</code>  (开始进行一些数据和方法的初始化的操作, data 中的数 据和 methods 中的方法还不能用),</p><p><code>created</code> (已经完成数据和方法的初始化, data 中的数据和 methods 中 的方法可以使用了),</p><p><code>beforeMount</code> (开始渲染虚拟 DOM),</p><p><code>mounted</code> (已经完成了虚拟 DOM 的渲染, 可以操作 DOM 了, 只执行一 次)</p><p>运行阶段: 执行多次</p><p><code>beforeUpdate</code> (data 中的数据即将被更新, 会执行多次)</p><p><code>updated</code> (data 中的数据已经更新完毕, 会执行多次)</p><p>销毁阶段: 只执行一次</p><p><code>beforeDestroy</code> (vue 实例即将销毁, 此时 data 中的数据和 methods 中的 方法依然处于可用状态)</p><p><code>destroyed</code> (vue 实例已经销毁, 此时 data 中的数据和 methods 中的方 法已经不可用)</p><h2 id="132-Vue-实现数据双向绑定的原理"><a href="#132-Vue-实现数据双向绑定的原理" class="headerlink" title="132. Vue 实现数据双向绑定的原理?"></a>132. Vue 实现数据双向绑定的原理?</h2><p>Vue 是使用数据劫持, 结合发布者订阅者模式实现双向数据绑定的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">var</span> data =&#123; </span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123; </span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, key,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;get 被触发了&#x27;);</span></span><br><span class="line">            <span class="keyword">return</span> data[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">input</span>) &#123;</span><br><span class="line">            <span class="comment">// do something: 如通知界面层更新</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(input, <span class="string">&#x27;假装在通知界面&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">title = <span class="string">&#x27;title 初始值&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(title);</span><br></pre></td></tr></table></figure><p>执行过程分析:</p><p>读取 title 或者 msg 的时候 get 方法会自动触发; 重新给 title 或 msg 赋值的时候,set 方法会被自动触发(可以在此处通知界面层更新)</p><p><img src= "/img/loading.gif" data-lazy-src="/img/mvvm.png" alt="1"></p><h2 id="133-Vue-创建组件的时候-data-为什么要使用匿名函数-return-一个"><a href="#133-Vue-创建组件的时候-data-为什么要使用匿名函数-return-一个" class="headerlink" title="133. Vue 创建组件的时候,data 为什么要使用匿名函数 return 一个"></a>133. Vue 创建组件的时候,data 为什么要使用匿名函数 return 一个</h2><p>因为对象是一种引用数据类型,在内存中只有一份. 如果 data 的值直接是一个对象的话, 那么后期组件在不同的地方多次调用的时候, 会相互产生影响, 因为每一次调用操作的 data 对象是一样的. 使用函数 的方式返回对象, 可以保证组件的每一次调用都会创建一个新对象, 这样组件的每一次调用不会相互产生影响.</p><h2 id="134-Vue-中实现父组件向子组件传递数据"><a href="#134-Vue-中实现父组件向子组件传递数据" class="headerlink" title="134. Vue 中实现父组件向子组件传递数据?"></a>134. Vue 中实现父组件向子组件传递数据?</h2><p>第一步: 在子组件的调用标签上声明一个自定义属性, 属性值来自父 组件的 data </p><p>第二步: 在子组件的定义部分声明一个属性 props, 值是一个数组, 将 自定义属性的名字在 props 中进行声明; 在子组件的模板部分可以使 用 props 中声明过的数据.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;parent&#x27;</span>,&#123; </span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;child :msgFromParent=&quot;msg&quot;&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;`</span>,</span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;父组件的标题&#x27;</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;这是传给子组件的值&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 子组件</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line"><span class="attr">child</span>:&#123;</span><br><span class="line">            <span class="comment">// 模板</span></span><br><span class="line">            <span class="attr">template</span>:<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;&#123;&#123;msgFromParent&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">            <span class="comment">// 数据模型</span></span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">title</span>:<span class="string">&#x27;子组件标题&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;,</span><br><span class="line">            <span class="comment">//获取父组件中传过来的值</span></span><br><span class="line">            <span class="attr">props</span>:[<span class="string">&#x27;msgFromParent&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="135-Vue-中如何实现子组件向父组件传递数据"><a href="#135-Vue-中如何实现子组件向父组件传递数据" class="headerlink" title="135. Vue 中如何实现子组件向父组件传递数据?"></a>135. Vue 中如何实现子组件向父组件传递数据?</h2><p>第一步: 在子组件的调用标签只上通过 v-on 动态绑定一个自定义事 件, 自定义事件的处理函数必须在父组件的 methods 中提前声明, 这 个函数需要一个形参, 来接收子组件传递过来的数据. </p><p>第二步: 在子组件中通过 this.$emit(自定义事件,数据)触发自定义事 件的执行, 此动作可以放在子组件的 created/mounted 生命周期中, 可以放在某个事件处理函数中.</p><h2 id="136-Vue-中实现兄弟组件间的传递数据"><a href="#136-Vue-中实现兄弟组件间的传递数据" class="headerlink" title="136. Vue 中实现兄弟组件间的传递数据?"></a>136. Vue 中实现兄弟组件间的传递数据?</h2><p>第一步: 声明一个空的 Vue 实例对象 comm, 作为事件中心的角色</p><p>第二步: 在 acom 组件中通过 comm.$emit(自定义事件,数据)的方式触发 事件(此操作可放在某个事件处理函数或者 acom 组件的生命周期函 数 created/mounted 中) </p><p>第三步: 在 bcom 组件中通过 comm.$on(自定义事件,function(data){})</p><p>监听自定义事件的执行( 操作可放在 bcom 组件的声明周期函数 created/mounted 中)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公共组件</span></span><br><span class="line"><span class="keyword">var</span> comm=<span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line"><span class="comment">// 兄弟组件 1</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;coma&#x27;</span>,&#123; </span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click=&quot;sendMsg&quot;&gt;发送&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;组件 A&#x27;</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;传给兄弟组件的值&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">sendMsg</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">            comm.$emit(<span class="string">&#x27;myevent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 注册自定义事件</span></span><br><span class="line">        comm.$emit(<span class="string">&#x27;myevent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册事件 OK&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 兄 弟 组 件 2</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;comb&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;组件 B&#x27;</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">        comm.$on(<span class="string">&#x27;myevent&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">msg</span>=data</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="137-Vue-中有几种路由模式"><a href="#137-Vue-中有几种路由模式" class="headerlink" title="137. Vue 中有几种路由模式?"></a>137. Vue 中有几种路由模式?</h3><p>Vue中的路由模式有两种:hash,history; 默认是hash模式; </p><p>可以在创建路由对象的时候, 使用 mode 属性来切换路由模式. </p><p>const router=new Router({mode:’history’})</p><h2 id="138-Vue-路由导航守卫是什么-以及应用场景"><a href="#138-Vue-路由导航守卫是什么-以及应用场景" class="headerlink" title="138. Vue 路由导航守卫是什么, 以及应用场景"></a>138. Vue 路由导航守卫是什么, 以及应用场景</h2><p>路由守卫是在页面进行路由跳转的时候做一些处理, 比如拦截. </p><p>vue-router 中提供了下面几种路由导航守卫:</p><p>全局前置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; ... &#125;)</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// from 从里来</span></span><br><span class="line"><span class="comment">// to 到哪里去</span></span><br><span class="line"><span class="comment">// next 是否要放行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局后置钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由独享守卫: 在声明路由的时候, 针对特定路由的钩子函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span></span><br><span class="line">    <span class="title class_">VueRouter</span>(&#123; <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">            <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="139-Vue-如何自定义一个过滤器？"><a href="#139-Vue-如何自定义一个过滤器？" class="headerlink" title="139. Vue 如何自定义一个过滤器？"></a>139. Vue 如何自定义一个过滤器？</h2><p>定义全局过滤器: </p><p>Vue.filter(‘过虑器名称’,function(input){ return input }); </p><p>定义局部过滤器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">filters</span>:&#123; </span><br><span class="line">    <span class="attr">dateFmt</span>:<span class="keyword">function</span>(<span class="params">input</span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;yyyy-mm-dd&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="140-Vue-如何自定义一个-vue-指令？"><a href="#140-Vue-如何自定义一个-vue-指令？" class="headerlink" title="140. Vue 如何自定义一个 vue 指令？"></a>140. Vue 如何自定义一个 vue 指令？</h2><p>定义全局指令:</p><p>Vue.directive(‘指令名’,function(el,binding){});</p><p>定义私有指令:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>:&#123; </span><br><span class="line">        <span class="attr">focus</span>:<span class="keyword">function</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="141-怎么定义-vue-router-的动态路由-怎么获取通过路由传过来-的参数"><a href="#141-怎么定义-vue-router-的动态路由-怎么获取通过路由传过来-的参数" class="headerlink" title="141. 怎么定义 vue-router 的动态路由? 怎么获取通过路由传过来 的参数?"></a>141. 怎么定义 vue-router 的动态路由? 怎么获取通过路由传过来 的参数?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router=<span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; </span><br><span class="line"><span class="attr">routes</span>:[&#123;<span class="attr">path</span>:<span class="string">&#x27;/product/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Product</span>&#125;]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获 取 参 数 :</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><h2 id="142-Vue-路由模块中-route-和-router-的区别"><a href="#142-Vue-路由模块中-route-和-router-的区别" class="headerlink" title="142. Vue 路由模块中$route 和$router 的区别?"></a>142. Vue 路由模块中$route 和$router 的区别?</h2><p><code>$route</code> 中存储的是跟路由相关的属性(如$route.params,$route.query) ; </p><p><code>$router</code> 中存储的是和路由相关的方法(如$router.push(),$router.go()),</p><h2 id="143-vue-中-v-for-指令循环遍历中-key-属性的作用？"><a href="#143-vue-中-v-for-指令循环遍历中-key-属性的作用？" class="headerlink" title="143. vue 中 v-for 指令循环遍历中 key 属性的作用？"></a>143. vue 中 v-for 指令循环遍历中 key 属性的作用？</h2><p>Key 属性的作用是在数据层和视图层之间建立一一对应关系, 方便后 期对页面进行局部更新. 如果某一条数据发生改变, 只更新当前数据 对应的 DOM 元素.</p><h2 id="144-Vue-和-react-有哪些不同的地方"><a href="#144-Vue-和-react-有哪些不同的地方" class="headerlink" title="144. Vue 和 react 有哪些不同的地方?"></a>144. Vue 和 react 有哪些不同的地方?</h2><p>Vue 实现了双向数据绑定(数据&lt;=&gt;界面);react 仅仅实现了单项数据流 (数据层=&gt;界面层); vue 中提供了指令, react 中没有指令的概念. vue 中 使用插值表达式在进行数据渲染, react 中使用 jsx 进行数据的渲染.</p><h2 id="145-Vue-有哪些常用的事件修饰符"><a href="#145-Vue-有哪些常用的事件修饰符" class="headerlink" title="145. Vue 有哪些常用的事件修饰符?"></a>145. Vue 有哪些常用的事件修饰符?</h2><p>.prevent: 阻止默认事件; </p><p>.stop: 阻止冒泡; </p><p>.once: 事件执行一次; </p><p>.self: 只当在 event.target 是当前元素自身时触发处理函数</p><h2 id="146-列举-Vue-中常用的指令"><a href="#146-列举-Vue-中常用的指令" class="headerlink" title="146. 列举 Vue 中常用的指令"></a>146. 列举 Vue 中常用的指令</h2><p>v-model:实现双向数据绑定; </p><p>v-bind: 绑定属性; v-on:注册事件; </p><p>v-html: 设置标签内容(允许内容 html) </p><p>v-text: 设置标签的内容(不允许包含 html) </p><p>v-clack: 解决插值表达式闪烁问题 </p><p>V-for: 循环遍历数组或对象</p><h2 id="147-Vue-中如何解决插值表达式闪烁问题"><a href="#147-Vue-中如何解决插值表达式闪烁问题" class="headerlink" title="147. Vue 中如何解决插值表达式闪烁问题?"></a>147. Vue 中如何解决插值表达式闪烁问题?</h2><p>使用 v-html 或 v-text 替代插值表达式;</p><p>使用 v-clack 解决插值表达式闪烁, 第一步:声明属性选择器[v-clack]{display:none} </p><p>第二步:在插值表达式所在标签添加属性 v-clack</p><h2 id="148-Vue-路由中如何实现通过锚点值的改变切换组件"><a href="#148-Vue-路由中如何实现通过锚点值的改变切换组件" class="headerlink" title="148. Vue 路由中如何实现通过锚点值的改变切换组件?"></a>148. Vue 路由中如何实现通过锚点值的改变切换组件?</h2><p>通过监听 hashchange 事件, 具体如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hash change&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="149-vue-中如何实现给样式添加作用域-说明其实现原理-vue-中要给样式添加作用域-只需要给-style-标签添加-scoped-属性即-可"><a href="#149-vue-中如何实现给样式添加作用域-说明其实现原理-vue-中要给样式添加作用域-只需要给-style-标签添加-scoped-属性即-可" class="headerlink" title="149. vue 中如何实现给样式添加作用域?说明其实现原理 vue 中要给样式添加作用域, 只需要给 style 标签添加 scoped 属性即 可."></a>149. vue 中如何实现给样式添加作用域?说明其实现原理 vue 中要给样式添加作用域, 只需要给 style 标签添加 scoped 属性即 可.</h2><p>实现原理:</p><p>添加了scoped 属性的style 标签内的样式会被改写成一个交集选择器, 会在原来类名的基础上添加一个随机属性(如.container[v-abcde]), 同 时 引 用 该 类 名 的 标 签 也 会 添 加 一 个 相 同 的 属 性 ( 如 </p><p>) , 这样的话, 这个类名就可以对引 用它的标签生效, 同时不会影响其他同类名的标签.</p><h2 id="150-Vue-中如何动态添加一个路由规则"><a href="#150-Vue-中如何动态添加一个路由规则" class="headerlink" title="150. Vue 中如何动态添加一个路由规则?"></a>150. Vue 中如何动态添加一个路由规则?</h2><p>使用 router.addRoutes([{path:’’,component:’’}])</p><h2 id="151-Vue-中有何优化页面的加载效率"><a href="#151-Vue-中有何优化页面的加载效率" class="headerlink" title="151. Vue 中有何优化页面的加载效率?"></a>151. Vue 中有何优化页面的加载效率?</h2><p>使用路由懒加载和组件懒加载;</p><p>不要打包一些公共的依赖(vue, 组件库); </p><p>使用 CDN 加载这些依赖文件</p><h2 id="152-什么是路由懒加载-路由懒加载有什么好处-如何实现路由-懒加载"><a href="#152-什么是路由懒加载-路由懒加载有什么好处-如何实现路由-懒加载" class="headerlink" title="152. 什么是路由懒加载? 路由懒加载有什么好处? 如何实现路由 懒加载?"></a>152. 什么是路由懒加载? 路由懒加载有什么好处? 如何实现路由 懒加载?</h2><p>路由懒加载是指通过异步的方式来加载对应的路由组件(默认情况是 将所有的组件全部加载并打包). </p><p>路由懒加载的好处: 可以提高页面的加载速度, 尤其是首页的加载速 度(因为使用了懒加载后, 加载首页的时候, 就不需要加载其他页面对 应的组件, 在需要的时候再加载) </p><p>具体实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">// 异步导入组件</span></span><br><span class="line"><span class="comment">// 异步加载方式一</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">List</span> = resolve =&gt; <span class="built_in">require</span>([<span class="string">&#x27;@/components/list&#x27;</span>], resolve);</span><br><span class="line"><span class="comment">// 异步加载方式二</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Detail</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;group-master&quot; */</span></span><br><span class="line"><span class="string">&#x27;@/components/detail&#x27;</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,<span class="attr">component</span>:<span class="title class_">List</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/detail&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Detail</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 路由模式: 默认 hash, 可选值 hash(如#/index)|history(/index)</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="153-Vue-中如何触发一个自定义事件"><a href="#153-Vue-中如何触发一个自定义事件" class="headerlink" title="153. Vue 中如何触发一个自定义事件?"></a>153. Vue 中如何触发一个自定义事件?</h2><p>通过 this.$emit(event, ’数据’) 可以触发自定义事件的执行.</p><h2 id="154-Vue-中如何监听自定义事件的执行"><a href="#154-Vue-中如何监听自定义事件的执行" class="headerlink" title="154. Vue 中如何监听自定义事件的执行?"></a>154. Vue 中如何监听自定义事件的执行?</h2><p>通过 this.$on(event,callback)可以监听自定义事件的执行.</p><h2 id="155-Vue-中如何移除自定义事件"><a href="#155-Vue-中如何移除自定义事件" class="headerlink" title="155. Vue 中如何移除自定义事件?"></a>155. Vue 中如何移除自定义事件?</h2><p>通过this.$off(event,callback)可以移除一个自定义事件; 如果某些特殊场景下 , 一个事件被触发一次后就需要将其移除, 可以使用 this.$once(event,callback)进行事件注册</p><h2 id="156-vm-mount-selector-方法的作用是什么"><a href="#156-vm-mount-selector-方法的作用是什么" class="headerlink" title="156. vm.$mount(selector)方法的作用是什么?"></a>156. vm.$mount(selector)方法的作用是什么?</h2><p>手动将一个 vue 实例挂载到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyComponent</span> =</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123; </span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;Hello!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建并挂载到 #app (会替换 #app)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyComponent</span>().$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyComponent</span>(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="157-Vue-中-keep-alive-组件的作用是什么"><a href="#157-Vue-中-keep-alive-组件的作用是什么" class="headerlink" title="157. Vue 中 keep-alive 组件的作用是什么?"></a>157. Vue 中 keep-alive 组件的作用是什么?</h2><p><code>keep-alive</code> 可以将被包裹的组件暂存在内存当中, 当页面切换的时候, 组件不会被重复的销毁和创建, 从而可以提高整体性能, 同时也可以 保存组件的一些状态.</p><h2 id="158-Vue-中如何手动销毁一个-vue-实例"><a href="#158-Vue-中如何手动销毁一个-vue-实例" class="headerlink" title="158. Vue 中如何手动销毁一个 vue 实例?"></a>158. Vue 中如何手动销毁一个 vue 实例?</h2><p>调用 vm.$destroy()可销毁一个 vue 实例(清理它与其它实例的连接， 解绑它的全部指令及事件监听器)</p><h2 id="159-Vue-中有哪些内置的组件"><a href="#159-Vue-中有哪些内置的组件" class="headerlink" title="159. Vue 中有哪些内置的组件?"></a>159. Vue 中有哪些内置的组件?</h2><p>component, slot, transition, transition-group, keep-alive</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--tansition 动画组件的使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="160-vue-实例中有哪些属性"><a href="#160-vue-实例中有哪些属性" class="headerlink" title="160. vue 实例中有哪些属性?"></a>160. vue 实例中有哪些属性?</h2><p>vm.$data 可以获取 vm 实例对象 data 中的数据; </p><p>vm.$props 可以获取 vm 组件接收到的 props 对象数据; </p><p>vm.$el 可以获取 vm 实例对象的根 dom 元素;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyComponent</span> =</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123; <span class="attr">template</span>:</span><br><span class="line">    <span class="string">&#x27;&lt;div&gt;Hello!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">MyComponent</span>().$mount()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="title function_">appendChild</span>(vm.<span class="property">$el</span>)</span><br></pre></td></tr></table></figure><p>vm.$refs 可以获取 vm 实例中注册过 ref 特性的所有 dom 元素和组件实例.</p><h2 id="161-Vue-use-plugin-的作用是什么-使用的时候需要注意什么问题"><a href="#161-Vue-use-plugin-的作用是什么-使用的时候需要注意什么问题" class="headerlink" title="161. Vue.use(plugin)的作用是什么, 使用的时候需要注意什么问题?"></a>161. Vue.use(plugin)的作用是什么, 使用的时候需要注意什么问题?</h2><p>Vue.use 的作用是安装一个 Vue 插件, 该方法需要在调用 new Vue() 之前被调用.</p><h2 id="162-vm-nextTick-fn-的作用是什么"><a href="#162-vm-nextTick-fn-的作用是什么" class="headerlink" title="162. vm.$nextTick(fn)的作用是什么?"></a>162. vm.$nextTick(fn)的作用是什么?</h2><p>延迟某个操作的执行, 直到 dom 更新以后在执行.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;h1 ref=&quot;h1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123; </span><br><span class="line">    el: &#x27;#app&#x27;, </span><br><span class="line">    data: &#123;</span><br><span class="line">title: &#x27;这是一个标题&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">created: function ()&#123; </span><br><span class="line">        this.$nextTick(() =&gt;&#123;</span><br><span class="line">            // 在 created 里直接操作 ref 会报错</span><br><span class="line">            this.$refs.h1.innerHTML = &#x27;这是更新以后的标题&#x27;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="163-vue-中的混入-mixin-有什么作用"><a href="#163-vue-中的混入-mixin-有什么作用" class="headerlink" title="163. vue 中的混入(mixin)有什么作用?"></a>163. vue 中的混入(mixin)有什么作用?</h2><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可 复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对 象时，所有混入对象的选项将被“混合”进入该组件本身的选项。 当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行 “合并”。比如，数据对象在内部会进行递归合并，并在发生冲突时以 组件数据优先。同名钩子函数将合并为一个数组，因此都将被调用。 另外，混入对象的钩子将在组件自身钩子之前调用。</p><h2 id="164-如何开发一个-vue-插件"><a href="#164-如何开发一个-vue-插件" class="headerlink" title="164. 如何开发一个 vue 插件?"></a>164. 如何开发一个 vue 插件?</h2><p>Vue.js 的插件应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义插件</span></span><br><span class="line"><span class="keyword">const</span> myPlugin=&#123; </span><br><span class="line">    <span class="attr">install</span>:<span class="function">(<span class="params">Vue,options</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 添加全局方法或属性</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">            bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">            <span class="comment">// 逻辑...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 3. 添加实例方法</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 注入组件选项(混入)</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 5. 注册全局组件</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;myCompent&#x27;</span>,&#123; </span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;&lt;h1&gt;loading...&lt;/h1&gt;&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myPlugin;</span><br><span class="line"><span class="comment">// 调用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(myPlugin,&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="165-什么是-ssr-如何实现-ssr"><a href="#165-什么是-ssr-如何实现-ssr" class="headerlink" title="165. 什么是 ssr? 如何实现 ssr?"></a>165. 什么是 ssr? 如何实现 ssr?</h2><p>ssr 是全拼(server side rendering) ,中文意思, 服务端渲染, 让页面的渲 染在服务端完成, 生产环境必须部署nodeJS 的环境, 因为服务端渲染 必须借助 nodeJS 来完成. vue 中可以使用 nuxt 框架实现服务端渲染.</p><h2 id="166-什么是-SPA"><a href="#166-什么是-SPA" class="headerlink" title="166. 什么是 SPA?"></a>166. 什么是 SPA?</h2><p>SPA(Single Page Application), 单页面应用程序, 使用vue, react, angular 创建的项目都属于 SPA. 因为整个项目只有一个页面, 其他页面都是 在该页面的基础上局部刷新而来的. 传统方式创建的项目都是 MPA(Mutilple Page Application)多页面应用 程序.</p><h2 id="167-使用-vue-react-angular-开发的-SPA-单页面应用有什么优缺点"><a href="#167-使用-vue-react-angular-开发的-SPA-单页面应用有什么优缺点" class="headerlink" title="167. 使用 vue,react,angular 开发的 SPA 单页面应用有什么优缺点?"></a>167. 使用 vue,react,angular 开发的 SPA 单页面应用有什么优缺点?</h2><p>单页面应用虽然性能方面得到了提升, 但是有一个致命的缺点就是不 利于 seo, 搜索引擎几乎不会抓取单页面应用.</p><h2 id="168-某某公司-vue-机试题"><a href="#168-某某公司-vue-机试题" class="headerlink" title="168. 某某公司 vue 机试题"></a>168. 某某公司 vue 机试题</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/vuetest.png" alt="2"></p><p>Html 部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phone1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getHandle&quot;</span>&gt;</span>get 测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;res1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phone2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;postHandle&quot;</span>&gt;</span>post 测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;res2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Js 部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">phone1</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">phone2</span>: <span class="number">456</span>,</span><br><span class="line">        <span class="attr">res1</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">res2</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">baseUrl</span>:<span class="string">&#x27;http://47.96.26.207:8099/api/Users&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123; </span><br><span class="line">        <span class="title function_">getHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/GetTest?phone=<span class="subst">$&#123;<span class="variable language_">this</span>.phone1&#125;</span>`</span>,).<span class="property">then</span></span><br><span class="line">            (<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">res1</span>=data.<span class="property">result</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">        <span class="title function_">postHandle</span>(<span class="params"></span>)&#123; </span><br><span class="line">            axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/PostTest`</span>,&#123;<span class="attr">phone</span>:<span class="variable language_">this</span>.<span class="property">phone2</span>&#125;).<span class="property">then</span></span><br><span class="line">        (<span class="function">(<span class="params">&#123;data&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">res2</span>=data.<span class="property">result</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前端框架-React"><a href="#前端框架-React" class="headerlink" title="前端框架 React"></a>前端框架 React</h1><h2 id="169-什么是虚拟-DOM-使用虚拟-DOM-有什么优势"><a href="#169-什么是虚拟-DOM-使用虚拟-DOM-有什么优势" class="headerlink" title="169. 什么是虚拟 DOM, 使用虚拟 DOM 有什么优势?"></a>169. 什么是虚拟 DOM, 使用虚拟 DOM 有什么优势?</h2><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个 真正的 DOM 树，插到文档当中,当状态变更的时候，重新构造一棵 新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新 了。</p><h2 id="170-简单介绍下-react-中的-diff-算法"><a href="#170-简单介绍下-react-中的-diff-算法" class="headerlink" title="170. 简单介绍下 react 中的 diff 算法?"></a>170. 简单介绍下 react 中的 diff 算法?</h2><p>把树形结构按照层级分解，只比较同级元素。</p><p>给列表结构的每个单元添加唯一的 key 属性，方便比较。React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名 字） 合并操作，调用 component 的 setState 方法的时候, React 将其标记 为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制. 选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对比函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params">vnode, newVnode</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> children = vnode.<span class="property">children</span> || []</span><br><span class="line"><span class="keyword">var</span> newChildren = newVnode.<span class="property">children</span> || []</span><br><span class="line">children.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">childrenVnode, index</span>) &#123;</span><br><span class="line">        <span class="comment">// 首先拿到对应新的节点</span></span><br><span class="line">        <span class="keyword">var</span> newChildVnode = newChildren[index]</span><br><span class="line">        <span class="comment">// 判断节点是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (childrenVnode.<span class="property">tag</span> === newChildVnode.<span class="property">tag</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果相同执行递归，深度对比节点</span></span><br><span class="line">            <span class="title function_">updateChilren</span>(childrenVnode, newChildVnode)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不同则将旧的节点替换成新的节点</span></span><br><span class="line">            <span class="title function_">repleaseNode</span>(childrenVnode, newChildVnode)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节点替换函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repleaseNode</span>(<span class="params">vnode, newVnode</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> elem = vnode.<span class="property">elem</span></span><br><span class="line"><span class="keyword">var</span> newEle = <span class="title function_">createElement</span>(newVnode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="171-什么是-Redux"><a href="#171-什么是-Redux" class="headerlink" title="171. 什么是 Redux?"></a>171. 什么是 Redux?</h2><p>Redux 是一个状态管理工具, 不仅可以在 react 中使用, 也可在其他框 架中使用, 甚至可以脱离框架本身使用. redux 中有几个核心的组成部分:</p><p>store 存储数据的对象,必须通过 createStore 方法来创建;</p><p>action 更新数据的规则, 必须有一个属性 state, 值必须是字符串;</p><p>reducer 更新数据的函数, 需要传入 state 状态数据和 action 更新规则.</p><p>在 react 中使用 redux 的时候, 一般会使用 react-redux 来简化使用步骤.</p><h2 id="172-React-有哪些常用的组件库"><a href="#172-React-有哪些常用的组件库" class="headerlink" title="172. React 有哪些常用的组件库?"></a>172. React 有哪些常用的组件库?</h2><p>PC 端组件库:</p><p>element-ui(饿了么推出的前端组件库), ant-design(阿里巴巴的前端组 件库, 几乎覆盖了三大框架); zent(有赞推出的 PC 端组件库)</p><h2 id="173-React-中如何操作-DOM"><a href="#173-React-中如何操作-DOM" class="headerlink" title="173. React 中如何操作 DOM?"></a>173. React 中如何操作 DOM?</h2><p>在需要进行 dom 操作的标签上设置一个 ref 属性, 保证值不要重复, 后期在js 部分可以通过”this.refs.属性名”来获取标签的虚拟dom 对象.</p><h2 id="174-什么是高阶组件-HOC"><a href="#174-什么是高阶组件-HOC" class="headerlink" title="174. 什么是高阶组件(HOC)?"></a>174. 什么是高阶组件(HOC)?</h2><p>函数的返回值是一个函数, 我们称之为高阶函数. 同理一个组件返回 值如果还是一个组件, 那么就称之为高阶组件. redux 中提供的 connect 就是一个高阶组件.</p><h2 id="175-React-中调用-setState-后发生了什么"><a href="#175-React-中调用-setState-后发生了什么" class="headerlink" title="175. React 中调用 setState 后发生了什么?"></a>175. React 中调用 setState 后发生了什么?</h2><p>在代码中调用 setState 函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过 调和过程，React 会以相对高效的方式根据新的状态构建 React 元素 树并且着手重新渲染整个 UI 界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p><h2 id="176-React-中状态-state-和属性-props-有什么不同"><a href="#176-React-中状态-state-和属性-props-有什么不同" class="headerlink" title="176. React 中状态 state 和属性 props 有什么不同?"></a>176. React 中状态 state 和属性 props 有什么不同?</h2><p>state 是组件的私有数据, 可读可写, props 是只读属性, 一般来自外部 (比如父组件)</p><h2 id="177-React-中有几种创建组件的方式"><a href="#177-React-中有几种创建组件的方式" class="headerlink" title="177. React 中有几种创建组件的方式?"></a>177. React 中有几种创建组件的方式?</h2><p>通过函数的方式创建组件, 此种方式创建的组件为无状态组件(不常 用);</p><p>React.createClass();</p><p>通过 class 类的方式创建组件(须继承 React.Component), 实际开发中 使用此种方式.</p><h2 id="178-React-中的组件按照职责不同-可以分为几种类型"><a href="#178-React-中的组件按照职责不同-可以分为几种类型" class="headerlink" title="178. React 中的组件按照职责不同, 可以分为几种类型?"></a>178. React 中的组件按照职责不同, 可以分为几种类型?</h2><p>根据组件的职责通常把组件分为 UI 组件和容器组件; </p><p>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑; </p><p>两者通过 React-Redux 提供 connect 方法联系起来.</p><h2 id="179-类组件-Class-component-和函数式组件-Functional-component-之间有何不同"><a href="#179-类组件-Class-component-和函数式组件-Functional-component-之间有何不同" class="headerlink" title="179. 类组件(Class component)和函数式组件(Functional component) 之间有何不同?"></a>179. 类组件(Class component)和函数式组件(Functional component) 之间有何不同?</h2><p>类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周 期钩子，也能使组件直接访问 store 并维持状态;当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 ‘无状态组件 (stateless component)’，可以使用一个纯函数来创建这样的组件。这 种组件也被称为哑组件(dumb components)或展示组件.</p><h2 id="180-说说-react-的生命周期函数"><a href="#180-说说-react-的生命周期函数" class="headerlink" title="180. 说说 react 的生命周期函数?"></a>180. 说说 react 的生命周期函数?</h2><p>初始化阶段：</p><p>getDefaultProps:获取实例的默认属性 </p><p>getInitialState:获取每个实例的初始化状态 </p><p>componentWillMount：组件即将被装载、渲染到页面上 </p><p>render:组件在这里生成虚拟的 DOM 节点 </p><p>componentDidMount:组件真正在被装载之后</p><p>运行中状态： </p><p>componentWillReceiveProps:组件将要接收到属性的时候调用 </p><p>shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以 返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会 被继续执行了） </p><p>componentWillUpdate:组件即将更新不能修改属性和状态 </p><p>render:组件重新描绘 </p><p>componentDidUpdate:组件已经更新</p><p>销毁阶段：</p><p>componentWillUnmount:组件即将销毁</p><h2 id="181-react-性能优化可以使用哪个生命周期函数？"><a href="#181-react-性能优化可以使用哪个生命周期函数？" class="headerlink" title="181. react 性能优化可以使用哪个生命周期函数？"></a>181. react 性能优化可以使用哪个生命周期函数？</h2><p>shouldComponentUpdate 这个方法用来判断是否需要调用 render 方 法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法， 可以极大的提高性能。</p><h2 id="182-应该在-React-组件的何处发起-Ajax-请求"><a href="#182-应该在-React-组件的何处发起-Ajax-请求" class="headerlink" title="182. 应该在 React 组件的何处发起 Ajax 请求?"></a>182. 应该在 React 组件的何处发起 Ajax 请求?</h2><p> 在React 组件中，应该在 componentDidMount 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命 周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件 上调用 setState，这将不起作用。在 componentDidMount 中发起网络请求将保证这有一个组件可以更新了。</p><h2 id="183-React-如何实现服务端渲染"><a href="#183-React-如何实现服务端渲染" class="headerlink" title="183. React 如何实现服务端渲染?"></a>183. React 如何实现服务端渲染?</h2><p>Next.js 是一个轻量级的 React 服务端渲染应用框架.</p><h2 id="184-自定义的-react-组件首字母为什必须要大写"><a href="#184-自定义的-react-组件首字母为什必须要大写" class="headerlink" title="184. 自定义的 react 组件首字母为什必须要大写?"></a>184. 自定义的 react 组件首字母为什必须要大写?</h2><p>Babel 在对 jsx 代码进行编译的时候, 如果首字母大写, 就把其当做 react 组件编译, 编译成 js 对象; 如果首字母小写,则认为是一个普通 的 html 标签, 会解析成普通字符串.</p><h2 id="185-setState-什么时候是同步-什么时候是异步"><a href="#185-setState-什么时候是同步-什么时候是异步" class="headerlink" title="185. setState 什么时候是同步,什么时候是异步?"></a>185. setState 什么时候是同步,什么时候是异步?</h2><p>这里的“异步”不是说异步代码实现. 而是说 react 会先收集变更,然后 再进行统一的更新. setState 在原生事件和 setTimeout 中都是同步的. 在合成事件和钩子函数中是异步的. 在 setState 中, 会根据一个 isBatchingUpdates 判断是直接更新还是稍后更新, 它的默认值是 false. 但 是 React 在 调 用 事 件 处 理 函 数 之 前 会 先 调 用 batchedUpdates 这 个 函 数 , batchedUpdates 函数会将  isBatchingUpdates 设置为 true. 因此, 由 react 控制的事件处理过程, 就变成了异步(批量更新).</p><h2 id="186-React-事件机制跟原生事件有什么区别"><a href="#186-React-事件机制跟原生事件有什么区别" class="headerlink" title="186. React 事件机制跟原生事件有什么区别?"></a>186. React 事件机制跟原生事件有什么区别?</h2><p>React 的事件使用驼峰命名, 跟原生的全部小写做区分.不能通过 return false 来阻止默认行为, 必须明确调用 preventDefault 去阻止浏览器的默认响应.</p><h2 id="187-React-事件中为什么要绑定-this-或者要用箭头函数"><a href="#187-React-事件中为什么要绑定-this-或者要用箭头函数" class="headerlink" title="187. React 事件中为什么要绑定 this 或者要用箭头函数?"></a>187. React 事件中为什么要绑定 this 或者要用箭头函数?</h2><p>事实上, 这并不算是 react 的问题, 而是 this 的问题. 但是也是 react 中 经常 出现 的问 题 . 因 此也 讲一 下Click Me这里的 this 是当事件被触 发时进行绑定的. this 的值会回退到默认绑定，即值为 undefined， 这是因为类声明和原型方法是以严格模式运行。我们可以使用 bind 绑定到组件实例上. 而不用担心它的上下文.因为箭头函数中的 this 指向的是定义时的 this，而不是执行时的 this. 所以箭头函数同样也 可以解决.</p><h2 id="188-谈谈-react-中的事件机制"><a href="#188-谈谈-react-中的事件机制" class="headerlink" title="188. 谈谈 react 中的事件机制"></a>188. 谈谈 react 中的事件机制</h2><p>在组件挂载的阶段, 根据组件生命的 react 事件, 给 document 添加 事件 addEventListener, 并添加统一的事件处理函数 dispatchEvent. 将 所有的事件和事件类型以及 react 组件进行关联, 将这个关系保存 在一个 map 里. 当事件触发的时候, 首先生成合成事件, 根据组件 id 和事件类型找到对应的事件函数, 模拟捕获流程, 然后依次触发对应的函数.</p><h2 id="189-谈谈-jsx-的原理"><a href="#189-谈谈-jsx-的原理" class="headerlink" title="189. 谈谈 jsx 的原理"></a>189. 谈谈 jsx 的原理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello ConardLi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上, babel 帮我们将这个语法转换成 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">`Hello ConardLi`</span>)</span><br></pre></td></tr></table></figure><h2 id="190-Jsx-在书写的时候和-html-有什么不同"><a href="#190-Jsx-在书写的时候和-html-有什么不同" class="headerlink" title="190. Jsx 在书写的时候和 html 有什么不同?"></a>190. Jsx 在书写的时候和 html 有什么不同?</h2><p>必须有一个根标签在最外层包裹(因为这里的标签需要babel 编译, 编 译成 React.createElement(‘标签名’,’属性对象’, ’内容’) ) 双标签和单标签(&lt; br /&gt; ,&lt; hr /&gt;)都必须闭合, 否则无法通过编译</p><h2 id="191-在-jsx-中如果非要创建多个平行标签-该如何处理"><a href="#191-在-jsx-中如果非要创建多个平行标签-该如何处理" class="headerlink" title="191. 在 jsx 中如果非要创建多个平行标签, 该如何处理?"></a>191. 在 jsx 中如果非要创建多个平行标签, 该如何处理?</h2><p>在 jsx 的最外层使用&lt;&gt;进行包裹; </p><p>或者使用标签进行包裹; </p><p>两种方式本质是一样的, 底层都是通过 document.createDocumentFragment()创建了一个虚拟 dom 标签.</p><h1 id="前端框架-Angular"><a href="#前端框架-Angular" class="headerlink" title="前端框架 Angular"></a>前端框架 Angular</h1><h2 id="192-Angular-脚手架如何快速创建一个组件"><a href="#192-Angular-脚手架如何快速创建一个组件" class="headerlink" title="192. Angular 脚手架如何快速创建一个组件?"></a>192. Angular 脚手架如何快速创建一个组件?</h2><p>ng g component [目录名/组件名]</p><h2 id="193-Angular-中模块和组件之间有什么样的关系"><a href="#193-Angular-中模块和组件之间有什么样的关系" class="headerlink" title="193. Angular 中模块和组件之间有什么样的关系?"></a>193. Angular 中模块和组件之间有什么样的关系?</h2><p>一个 angular 应用默认必须包含一个模块, 这个模块一般称为根模块, 这个根模块一般必须包含一个组件, 这个组件称为根组件, 应用启动 的时候, 会默认加载根组件. 一个应用中可以声明多个模块, 将不同的 功能和页面组件注册在不同的模块中, 但是这些模块必须直接或间接 的注入到中根模块中. 使用模块可以将一个复杂的应用分成很部分, 每部分有包含各自不通过的功能组件, 从而构成一个完整的应用.</p><h1 id="前端构建工具"><a href="#前端构建工具" class="headerlink" title="前端构建工具"></a>前端构建工具</h1><h2 id="194-你了解到前端有哪些项目构建工具"><a href="#194-你了解到前端有哪些项目构建工具" class="headerlink" title="194. 你了解到前端有哪些项目构建工具?"></a>194. 你了解到前端有哪些项目构建工具?</h2><p>webpack, gulp,grunt</p><h2 id="195-webpack-和-gulp-在进行代码合并的时候还有什么不同"><a href="#195-webpack-和-gulp-在进行代码合并的时候还有什么不同" class="headerlink" title="195. webpack 和 gulp 在进行代码合并的时候还有什么不同?"></a>195. webpack 和 gulp 在进行代码合并的时候还有什么不同?</h2><p>webpack 是基于 commonjs 模块化规范进行代码合并, 而 gulp 只是简 单的代码合并.</p><h2 id="196-列举几个-gulp-中常用的插件"><a href="#196-列举几个-gulp-中常用的插件" class="headerlink" title="196. 列举几个 gulp 中常用的插件?"></a>196. 列举几个 gulp 中常用的插件?</h2><p>合并文件: gulp-concat; </p><p>压缩 js: gulp-uglify; </p><p>文件重命名: gulp-rename; </p><p>压 缩 css: gulp-minify-css </p><p>压缩 html: gulp-hmltmin </p><p>启动开发服务器: gulp-connect </p><p>拷贝文件: gulp-copy</p><h2 id="197-webpack-有哪些常见的配置"><a href="#197-webpack-有哪些常见的配置" class="headerlink" title="197. webpack 有哪些常见的配置?"></a>197. webpack 有哪些常见的配置?</h2><p>webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebapckPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlPlugin=<span class="keyword">new</span> <span class="title class_">HtmlWebapckPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:path.<span class="title function_">join</span>( dirname,<span class="string">&#x27;src/index.html&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="comment">// 打包模式, 可值:development(开发模式),production(生产模式)</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">// 插件配置节点</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="comment">// html-webpack-plugin 作用:根据模板,在内存中创建一个 html 页面</span></span><br><span class="line">    htmlPlugin</span><br><span class="line">    ],</span><br><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="comment">// 配置省略的文件后缀</span></span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">        <span class="comment">// 配置根路径</span></span><br><span class="line">        <span class="attr">alias</span>:&#123;<span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>( dirname,<span class="string">&#x27;./src&#x27;</span>)&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="comment">// 配置 loader</span></span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js|jsx$/</span>,</span><br><span class="line">                <span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">modules</span>: &#123;</span><br><span class="line">                            <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]-[local]-[hash:5]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>, <span class="comment">// 需 要 依 赖 file-loader</span></span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">10000</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><h2 id="198-微信小程序目前有几种主流的开发模式"><a href="#198-微信小程序目前有几种主流的开发模式" class="headerlink" title="198. 微信小程序目前有几种主流的开发模式?"></a>198. 微信小程序目前有几种主流的开发模式?</h2><p>微信官方: </p><p>原生方式;</p><p>wepy(微信官方推出的开发框架, 为了迎合目前主流前端框架的语法 和提高开发效率);</p><p>第三方公司:</p><p>mpvue(使用 vue 的语法开发小程序, 是一个阉割版的 vue) </p><p>uni-app(使用 vue 的语法进行开发, 是一个阉割版的 vue, 据说一套代 码可以编译出运行在多个平台的应用)</p><h2 id="199-简单介绍微信小程序的开发过程"><a href="#199-简单介绍微信小程序的开发过程" class="headerlink" title="199. 简单介绍微信小程序的开发过程"></a>199. 简单介绍微信小程序的开发过程</h2><p>首先得注册以为微信小程序, 因为小程序开发过程中需要一个 appid; 其次下载腾讯官方的开发者工具(开发者工具必须使用个人微信登录), 小程序只能运行在开发这工具或者微信应用内部; 创建应用, 填入申请的 appid, 即可快速生成小程序的项目结构.</p><h2 id="200-微信小程序中的-tabbar-导航如何制作"><a href="#200-微信小程序中的-tabbar-导航如何制作" class="headerlink" title="200. 微信小程序中的 tabbar 导航如何制作"></a>200. 微信小程序中的 tabbar 导航如何制作</h2><p>小程序中的 tabbar 底部导航是配置出来的, 只需要在应用配置文件 中添加一个 tabbar 配置阶段, 按照官方文档配置即可, tabbar 数量至 少 2 个, 最多 5 个.</p><h2 id="201-微信小程序中如何实现页面跳转"><a href="#201-微信小程序中如何实现页面跳转" class="headerlink" title="201. 微信小程序中如何实现页面跳转?"></a>201. 微信小程序中如何实现页面跳转?</h2><p>小程序页面跳转: </p><p>使用组件<code>&lt;navigator url=&quot;../home/home&quot;&gt;</code>目标页面 <code>&lt;/navigator&gt;</code></p><p>使用 api: wx.navigateTo({url:’../home/home’})</p><p>Tabbar 页 面 跳 转 :</p><p>wx.switchTabbar({url:’../index/index’}) </p><p>使用组件<code>&lt;navigator url=&quot;../home/home&quot; open-type=&quot;switchTab&quot;&gt;</code>目标页面<code>&lt;/navigator&gt;</code></p><h2 id="202-简单描述微信小程序的生命周期"><a href="#202-简单描述微信小程序的生命周期" class="headerlink" title="202. 简单描述微信小程序的生命周期?"></a>202. 简单描述微信小程序的生命周期?</h2><p>小程序的生命周期分为应用<code>生命周期</code>和<code>页面生命周期</code>. </p><p><code>应用生命周期</code>:</p><p>onLaunch: 应用启动, 只执行一次;</p><p>onShow: 应用切换到前台; </p><p>onHide: 应用切换到后台模式; </p><p>noError: 运行阶段出现错误; </p><p>onPageNotFound: 找不到页面 </p><p><code>页面生命周期</code>: </p><p>onLoad: 页面开始加载; </p><p>onReady: 页面加载完毕; </p><p>onShow: 页面进入焦点状态; </p><p>onHide: 页面进入后台状态</p><h2 id="203-微信小程序中如何请求数据接口"><a href="#203-微信小程序中如何请求数据接口" class="headerlink" title="203. 微信小程序中如何请求数据接口?"></a>203. 微信小程序中如何请求数据接口?</h2><p>通过 wx.request</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;test.php&#x27;</span>, <span class="comment">//仅为示例，并非真实的接口地址</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> <span class="comment">// 默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>)&#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="204-如何优化小程序代码包的体积"><a href="#204-如何优化小程序代码包的体积" class="headerlink" title="204. 如何优化小程序代码包的体积?"></a>204. 如何优化小程序代码包的体积?</h2><p>分包加载,使用分包加载可以让小程序代码包体积达到 8M(最多四个 分包,每个分包最大 2M);将资源文件尽量放在远程服务器端</p><h2 id="205-你了解到微信小程序有哪些组件库"><a href="#205-你了解到微信小程序有哪些组件库" class="headerlink" title="205. 你了解到微信小程序有哪些组件库?"></a>205. 你了解到微信小程序有哪些组件库?</h2><p>Vant Weapp, iview Weapp, minui, WeUI, iview-mpvue</p><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="206-Typescript-中有哪些数据类型"><a href="#206-Typescript-中有哪些数据类型" class="headerlink" title="206. Typescript 中有哪些数据类型?"></a>206. Typescript 中有哪些数据类型?</h2><p>number(数值), string(字符型), boolean(布尔), object(对象), undefined(未定义), null(空性), any(任意类型), never, 元组, 枚举, 数 组</p><h2 id="207-Typescript-和-javascript-的区别"><a href="#207-Typescript-和-javascript-的区别" class="headerlink" title="207. Typescript 和 javascript 的区别?"></a>207. Typescript 和 javascript 的区别?</h2><p>Typescript 是 javascript 的一个超集, 是 es6 的实现, 支持所有 es6 的语 法, Typescript 只是在开发过程中编写的一种中间语言, 浏览器并不能 直接解析 Typescript, 上线以后需要将 Typescript 转换成 javascript.</p><h2 id="208-什么是装饰器"><a href="#208-什么是装饰器" class="headerlink" title="208. 什么是装饰器?"></a>208. 什么是装饰器?</h2><h1 id="代码版本控制工具"><a href="#代码版本控制工具" class="headerlink" title="代码版本控制工具"></a>代码版本控制工具</h1><h2 id="209-git-中有哪些常用的命令"><a href="#209-git-中有哪些常用的命令" class="headerlink" title="209. git 中有哪些常用的命令?"></a>209. git 中有哪些常用的命令?</h2><p>初始化仓库: git init </p><p>添加暂存区: git add 文件名 </p><p>提交到本地仓库: git commit -m ‘注释‘ </p><p>推送到远程仓库: git push 仓库地址 分支名称 </p><p>拉取远程仓库代码: git pull </p><p>克隆仓库: git clone 仓库地址创 </p><p>建分支: git branch 分支名称切 </p><p>换分支: git checkout 分支名称</p><p>查 看分支: git branch </p><p>合并分支: git merge 分支名称</p><p>查看日志: git log (git log —oneline) </p><p>查看所有日志: git reflog </p><p>版 本 回 退 : git reset —hard 版 本 号 (commit-id 可 以 通 过 git log —oneline 获取)</p><h2 id="210-git-和-svn-有什么不同"><a href="#210-git-和-svn-有什么不同" class="headerlink" title="210. git 和 svn 有什么不同?"></a>210. git 和 svn 有什么不同?</h2><p>git 是一个分布式仓库管理系统, 每个人本地都有一个本地仓库,svn 是 一个集中式仓库管理系统, 仓库只有一个. svn 一般需要服务端给每个 人分配账号和密码, git 是使用 ssh 公钥/秘钥对来区分不同程序员的</p><h2 id="211-git-有哪些常用的图形界面客户端工具"><a href="#211-git-有哪些常用的图形界面客户端工具" class="headerlink" title="211. git 有哪些常用的图形界面客户端工具?"></a>211. git 有哪些常用的图形界面客户端工具?</h2><p>Sourcetree, TortoiseGit</p><h2 id="212-在线-Git-代码托管平台有哪些"><a href="#212-在线-Git-代码托管平台有哪些" class="headerlink" title="212. 在线 Git 代码托管平台有哪些?"></a>212. 在线 Git 代码托管平台有哪些?</h2><p>github(<a href="https://www.github.com">https://www.github.com</a>),</p><p> gitlab(<a href="https://www.gitlab.com">https://www.gitlab.com</a>), </p><p>gitee(<a href="https://www.gitee.com">https://www.gitee.com</a>), </p><p>coding(<a href="https://coding.net">https://coding.net</a>), </p><p>腾讯云开发者平台(<a href="https://dev.tencent.com">https://dev.tencent.com</a>), </p><p>bitbucket(<a href="https://bitbucket.org/product/">https://bitbucket.org/product/</a>)</p><h1 id="服务器编程-NodeJS"><a href="#服务器编程-NodeJS" class="headerlink" title="服务器编程 NodeJS"></a>服务器编程 NodeJS</h1><h2 id="213-Nodejs-中有哪些常用内置模块"><a href="#213-Nodejs-中有哪些常用内置模块" class="headerlink" title="213. Nodejs 中有哪些常用内置模块?"></a>213. Nodejs 中有哪些常用内置模块?</h2><p>http; fs(文件系统); path(路径); querystring(查询字符串); url(解析 url)</p><h2 id="214-常用第三方模块"><a href="#214-常用第三方模块" class="headerlink" title="214. 常用第三方模块"></a>214. 常用第三方模块</h2><p>express; mysql(操作 mysql); cookie-parser(解析 cookie 的中间件); express-session(处理 session); crypt(加密模块)</p><h2 id="215-Express-框架如何快速创建一个服务器"><a href="#215-Express-框架如何快速创建一个服务器" class="headerlink" title="215. Express 框架如何快速创建一个服务器?"></a>215. Express 框架如何快速创建一个服务器?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 监听路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; res.</span><br><span class="line"><span class="title function_">send</span>(<span class="string">&#x27;server running&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&#x27;3000&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="216-Express-中路由模块的使用步骤"><a href="#216-Express-中路由模块的使用步骤" class="headerlink" title="216. Express 中路由模块的使用步骤"></a>216. Express 中路由模块的使用步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 1. 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;请求了/get&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;请求了 /list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;请求了 /add&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 注册路由中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&#x27;3000&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="217-使用-http-模块快速开启一个-web-服务器"><a href="#217-使用-http-模块快速开启一个-web-服务器" class="headerlink" title="217. 使用 http 模块快速开启一个 web 服务器"></a>217. 使用 http 模块快速开启一个 web 服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部</span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 发送响应数据 &quot;Hello World&quot;</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><h1 id="Hybird-混合-APP"><a href="#Hybird-混合-APP" class="headerlink" title="Hybird(混合) APP"></a>Hybird(混合) APP</h1><h2 id="218-目前流行的混合-App-开发方式"><a href="#218-目前流行的混合-App-开发方式" class="headerlink" title="218. 目前流行的混合 App 开发方式"></a>218. 目前流行的混合 App 开发方式</h2><p>Appcan, Hbuilder(X), ApiCloud, 这几中方式大同小异, 都是通过网页的 方式开发 app, 然后通过开发工具将代码上传到远程服务器进行在线 打包, 开发工具本身会提供一些基础的 api 来帮助我们操作移动终端.</p><h2 id="219-什么是-Ionic-和-cordova"><a href="#219-什么是-Ionic-和-cordova" class="headerlink" title="219. 什么是 Ionic 和 cordova?"></a>219. 什么是 Ionic 和 cordova?</h2><p><code>Ionic</code> 是一个专门针对移动端的组件库, 主要应用于 angular 系列框架 的开发中. </p><p><code>cordova</code> 是一个移动应用打包工具, 可以将使用 angular+Ionic 开发的 移动端网页打包成可以在移动终端中安装的app 应用, cordova 提供了 一些基础 api( 比如读取手机通讯录, 获取摄像头权限…), 对于移动终 端的一些操作, 必须调用 codorva 提供的基础 api 才能完成. 使用 Ionic+cordova 可以实现移动端混合 app 的开发.</p><h2 id="220-什么是-react-native"><a href="#220-什么是-react-native" class="headerlink" title="220. 什么是 react-native?"></a>220. 什么是 react-native?</h2><p>react-native 是 facebook 公司基于 react 的语法设计的一个开发原生移 动 app 的解决方案, 可以实现维护一套代码, 即可打包出可以运行在 安卓和苹果上的移动应用. 性能层面几乎和原生方式开发的应用接 近.</p><h2 id="221-什么是-flutter"><a href="#221-什么是-flutter" class="headerlink" title="221. 什么是 flutter?"></a>221. 什么是 flutter?</h2><p>Flutter 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质 量的原生用户界面。 Flutter 可以与现有的代码一起工作。在全世界， Flutter 正在被越来越多的开发者和组织使用，并且 Flutter 是完全免 费、开源的。学习 flutter 必须先学习 dart 语言, dart 是谷歌针对移动 端开发设计的一门开发语言, 目的是替代 javascript 的功能.</p><h2 id="222-什么是-weex"><a href="#222-什么是-weex" class="headerlink" title="222. 什么是 weex?"></a>222. 什么是 weex?</h2><p>Weex 是使用 vue 的语法来开发原生 app, 可以使用一套代码, 打包出 运行在安卓和苹果两个操作系统上的移动应用,需要在本地配置打包 环境, 和react-native 的工作原理类似. 性能层面几乎和原生方式开发 的应用接近.</p><h2 id="223-你所了解到的产品原型和设计图的共享平台有哪些"><a href="#223-你所了解到的产品原型和设计图的共享平台有哪些" class="headerlink" title="223. 你所了解到的产品原型和设计图的共享平台有哪些?"></a>223. 你所了解到的产品原型和设计图的共享平台有哪些?</h2><p>(产品原型和设计图的共享平台,可以帮助互联网团队更好地管理文档 和设计图。可以实现在线展示网页原型,自动生成设计图标注,与团队 共享设计图,展示页面之间的跳转关系, 前端程序员可以从该平台上 直接下载设计师设计好的设计图的切片, 并且可以在线查看设计图标 注信息) 常用产品原型共享平台有: 蓝湖, 墨刀, xiaopiu, Mockplus</p><h1 id="实际开发相关"><a href="#实际开发相关" class="headerlink" title="实际开发相关"></a>实际开发相关</h1><h2 id="224-商城的购物车是怎么实现的"><a href="#224-商城的购物车是怎么实现的" class="headerlink" title="224. 商城的购物车是怎么实现的?"></a>224. 商城的购物车是怎么实现的?</h2><p>商城购物车一般会写在本地存储,比如cookie 或者localStorage 中,会采 用数组格式的字符串来存储,主要会存储商品id, 商品名称, 商品价格, 商品数量等信息(当然商品价格等敏感信息后期还是以后端为准, 此 处存储只是为了方便在页面展示), 如果过要考虑兼容问题, 建议存储 在 cookie 里(因为 localStorage 低版本的浏览器不支持).如果不考兼容 问题, 使用 localStorage 性能会更好. 购物车可以在用户未登录的状 态就可以添加, 也可以在用户登录以后再添加, 这个完全取决于具体业务场景.</p><h2 id="225-前后端分离的项目如何实现登录状态的保持"><a href="#225-前后端分离的项目如何实现登录状态的保持" class="headerlink" title="225. 前后端分离的项目如何实现登录状态的保持?"></a>225. 前后端分离的项目如何实现登录状态的保持?</h2><p>前后端分离的项目一般会使用 token 实现登录状态保持. token 其实就是一个随机字符串, 当用户在登录页面输入账号和密码 后, 前端将账号密码发送给后端, 后端校验完账号和密码后, 会生成 一个随机的不重复的字符串(即 token), 并将其响应给前端, 前端拿到 该 token 后, 需要在客户端进行持久化(一般会写在 localStorage 或者 sessionStorage 中, 如果是 SPA 会存储在 sessionStorage 中, 如果是 MPA 则储存在 localStorage 中), 那么下次在向后端数据接口发送请求 的时候, 一般需要将 token 一并发送给后端数据接口, 后端数据接口会对 token 进行校验, 如果合法则正常响应请求, 如果不合法, 则提示未登录. 前端则根据本地存储中是否存在 token 判断用户是否处于登 录状态.</p><h2 id="226-前后端分离开发的后台管理系统一般如何实现权限管理"><a href="#226-前后端分离开发的后台管理系统一般如何实现权限管理" class="headerlink" title="226. 前后端分离开发的后台管理系统一般如何实现权限管理?"></a>226. 前后端分离开发的后台管理系统一般如何实现权限管理?</h2><p>首先某个角色有哪些权限肯定是事先配置好的, 并且存储在了数据库 里. 当某个账号登录后, 后端数据接口则需要返回该账号对应角色的 权限列表, 前端则需要根据该权限列表, 动态渲染管理系统的导航, 当 然后端数据接口也会做二次权限校验(当某一个角色请求一个自己没 有的授权的数据接口或页面的时候, 后端数据接口也不会正常响应).</p><h2 id="227-如何通过最原始的方式实现一个多语言版的网站"><a href="#227-如何通过最原始的方式实现一个多语言版的网站" class="headerlink" title="227. 如何通过最原始的方式实现一个多语言版的网站?"></a>227. 如何通过最原始的方式实现一个多语言版的网站?</h2><p>简单来说,一般是通过配置语言包来实现的, 对于一个多语言的版的 网页, 并不一定是网页上所有的地方都需要实现多语言, 可能只是某 些关键的导航部分会实现多语言. 所以可以准备一个 json 配置文件, 结构大体如下(只是简单举例):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lang=&#123; </span><br><span class="line">    <span class="attr">zh</span>:&#123;</span><br><span class="line">        <span class="attr">mainNavi</span>:[</span><br><span class="line">            <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">            <span class="string">&quot;成功案例&quot;</span>,</span><br><span class="line">            <span class="string">&quot;关于我们&quot;</span>,</span><br><span class="line">            <span class="string">&quot;联系我们&quot;</span>,</span><br><span class="line">            <span class="string">&quot;注册&quot;</span>,</span><br><span class="line">            <span class="string">&quot;登录&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">en</span>:&#123;</span><br><span class="line">        <span class="attr">mainNavi</span>:[</span><br><span class="line">            <span class="string">&quot;home&quot;</span>,</span><br><span class="line">            <span class="string">&quot;succss cases&quot;</span>,</span><br><span class="line">            <span class="string">&quot;about me&quot;</span>,</span><br><span class="line">            <span class="string">&quot;concat us&quot;</span>,</span><br><span class="line">            <span class="string">&quot;register&quot;</span>,</span><br><span class="line">            <span class="string">&quot;login&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户选择语言后, 可以将用户选择的语言类型存储在本地存储中, 接着可以根据语言类型,从该语言配置文件中获取对应的配置节点, 动态在页面上输出.</p><h2 id="228-如何实现从列表页跳入详情页-并从详情页面返回列表页时-滚动条还在当时的位置-并且数据不刷新"><a href="#228-如何实现从列表页跳入详情页-并从详情页面返回列表页时-滚动条还在当时的位置-并且数据不刷新" class="headerlink" title="228. 如何实现从列表页跳入详情页,并从详情页面返回列表页时,滚动条还在当时的位置,并且数据不刷新?"></a>228. 如何实现从列表页跳入详情页,并从详情页面返回列表页时,滚动条还在当时的位置,并且数据不刷新?</h2><p>为了保证返回时，我们还能回到刚才的位置，那么就需要做本地数据 存储。[考虑到保证数据和上次用户看到的一致]本地缓存的字段有页 码、点击的位置（滚动条的位置），列表数据（具体字段，请自行结 合实际） 进行本地缓存。合理的使用本地缓存数据有 cookie 、 sessionStorage，至于为啥要用两个，可以自行查阅，着重看一下存储 大小的限制问题当从详情返回列表时，首先从缓存中取页码、点击的 位置（滚动条的位置），列表数据，如果有位置、列表数据，则直接 将列表数据渲染到页面，并滚动到存储的位置点.</p><h2 id="229-微信小程序中如何实现页面后退时重新刷新页面"><a href="#229-微信小程序中如何实现页面后退时重新刷新页面" class="headerlink" title="229. 微信小程序中如何实现页面后退时重新刷新页面?"></a>229. 微信小程序中如何实现页面后退时重新刷新页面?</h2><p>在后退页面的 onShow 方法中手动调用一下 onLoad 方法, 代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="title function_">onShow</span>(<span class="params"></span>)&#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onLoad</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="230-Vue-开发中如果由于某种特殊原因数据更新之后-页面层没有-同步更新-该如何处理"><a href="#230-Vue-开发中如果由于某种特殊原因数据更新之后-页面层没有-同步更新-该如何处理" class="headerlink" title="230. Vue 开发中如果由于某种特殊原因数据更新之后, 页面层没有 同步更新, 该如何处理?"></a>230. Vue 开发中如果由于某种特殊原因数据更新之后, 页面层没有 同步更新, 该如何处理?</h2><p>调用 vm.$forceUpdate()方法强制刷新页面, 该方法可以迫使 Vue 实 例重新渲染.</p><h2 id="231-Vue-中如何动态设置页面的-title-标题"><a href="#231-Vue-中如何动态设置页面的-title-标题" class="headerlink" title="231. Vue 中如何动态设置页面的 title 标题?"></a>231. Vue 中如何动态设置页面的 title 标题?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span></span><br><span class="line"><span class="title class_">Router</span>(&#123; </span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="comment">/* （首页）默认路由地址 */</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: login,</span><br><span class="line">            <span class="attr">meta</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;首页入口&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/apply&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: apply,</span><br><span class="line">            <span class="attr">meta</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;申请&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="comment">/* Not Found 路由，必须是最后一个路由 */</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;找不到页面&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 路由发生变化修改页面 title */</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="232-在-vue-中-当切换到新路由时，想要页面滚到顶部，或者页面-后退时-想保持原先的滚动位置-该如何实现"><a href="#232-在-vue-中-当切换到新路由时，想要页面滚到顶部，或者页面-后退时-想保持原先的滚动位置-该如何实现" class="headerlink" title="232. 在 vue 中,当切换到新路由时，想要页面滚到顶部，或者页面 后退时,想保持原先的滚动位置, 该如何实现?"></a>232. 在 vue 中,当切换到新路由时，想要页面滚到顶部，或者页面 后退时,想保持原先的滚动位置, 该如何实现?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span></span><br><span class="line">    <span class="title class_">VueRouter</span>(&#123; <span class="attr">routes</span>: [...],</span><br><span class="line">    scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">        <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">        <span class="comment">// 返回原来的位置</span></span><br><span class="line">        <span class="comment">// return savePosition</span></span><br><span class="line">        <span class="comment">// 返回页面顶部</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>scrollBehavior 方 法 接 收 to 和 from 路 由 对 象 。 第 三 个 参 数 savedPosition 当且仅当通过浏览器的前进/后退按钮触发时才可用。 这个方法返回滚动位置的对象信息，长这样：{ x: number, y: number }</p><h2 id="233-vue-项目在开发阶段如何解决跨域请求数据"><a href="#233-vue-项目在开发阶段如何解决跨域请求数据" class="headerlink" title="233. vue 项目在开发阶段如何解决跨域请求数据?"></a>233. vue 项目在开发阶段如何解决跨域请求数据?</h2><p>使用 vue-cli-3.0 版本创建的项目解决跨域请求数据: </p><p>第一步: 在项目根目录下创建 vue.config.js </p><p>第二步: 在 vue.config.js 中添加如下配置节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 开发服务器配置节点</span></span><br><span class="line">    <span class="attr">devServer</span>:&#123; </span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>,</span><br><span class="line">    <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">hotOnly</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// 配置跨域</span></span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">// 数据接口服务器地址</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001/api/&#x27;</span>,</span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">changOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>面试问题（包含笔试题）</th><th>问题分类</th><th>面试题考点 （技术点）</th></tr></thead><tbody><tr><td>浏览器本地存储</td><td>vue</td><td>服务器渲染</td></tr><tr><td>webstorage和cookie的区别</td><td>HTML5/CSS3</td><td>web storage和cookie</td></tr><tr><td>display:none和visibility:hidde</td><td>HTML/CSS</td><td>css元素隐藏</td></tr><tr><td>CSS中 link 和@import 的区别是？</td><td>ES5/ES6</td><td>link和import</td></tr><tr><td>position的absolute与fixed共同点与不同点</td><td>HTML/CSS</td><td>absolute与fixed</td></tr><tr><td>介绍一下CSS的盒子模型？</td><td>HTML/CSS</td><td>盒子模型</td></tr><tr><td>CSS 选择符</td><td>vue</td><td>服务器渲染</td></tr><tr><td>CSS属性继承、</td><td>HTML/CSS CSS属性继承</td><td>CSS优先级算法</td></tr><tr><td>及CSS3新增伪类</td><td>HTML/CSS</td><td>CSS新特性</td></tr><tr><td>display 的作用以及 position 的取值的区别</td><td>HTML/CSS</td><td>position</td><td></td><td>CSS3有哪些新特性？</td><td>html5/css3</td><td>CSS3新特性</td></tr><tr><td>为什么要初始化CSS样式。</td><td>HTML/CSS</td><td>CSS样式</td></tr><tr><td>对BFC规范的理解</td><td></td><td>BFC规范</td></tr><tr><td>CSS sprites 的理解及使用</td><td>HTML/CSS</td><td>promise</td></tr><tr><td>HTML 语义化</td><td>HTML/CSS</td><td>HTML语义化</td></tr><tr><td>Doctype作用?</td><td>JavaScript</td><td>Doctype</td></tr><tr><td>严格模式与混杂模式如何区分？它们有何意义?</td><td>JavaScript</td><td>严格模式与混杂模式</td></tr><tr><td>Doctype文档类型</td><td>JavaScript</td><td>Doctype</td></tr><tr><td>HTML与XHTML的区别</td><td>HTML/CSS</td><td>HTML与XHTML的区别</td></tr><tr><td>html兼容性问题</td><td>HTML/CSS</td><td>html兼容性</td></tr><tr><td>CSS 浮动</td><td>HTML/CSS</td><td>CSS浮动</td></tr><tr><td>浮动元素引起的问题和解决办法</td><td>HTML/CSS</td><td>浮动元素</td></tr><tr><td>watch和computed的差别</td><td>vue</td><td>watch和computed</td></tr><tr><td>vue中常用的指令</td><td>vue</td><td>vue指令</td></tr><tr><td>路由的两种模式的区别</td><td>vue</td><td>vue路由</td></tr><tr><td>编程式跳转如何传值</td><td>vue</td><td>vue路由</td></tr><tr><td>如果数组循环了，如果删除数组里的元素让页面发生改变</td><td>vue</td><td>数组</td></tr><tr><td>ES6新内容</td><td>ES5/ES6</td><td>ES6新特性</td></tr><tr><td>ES6数组排序</td><td>ES5/ES6</td><td>ES6数组</td></tr><tr><td>如何打乱一个数组</td><td>JavaScript</td><td>数组操作</td></tr><tr><td>判断js数据类型</td><td>JavaScript</td><td>js数据类型</td></tr><tr><td>ES6中的promise</td><td>ES5/ES6</td><td>promise</td></tr><tr><td>keep-alive</td><td>Vue</td><td>keep-alive</td></tr><tr><td>组件传值</td><td>Vue</td><td>组件传值</td></tr><tr><td>display有哪些属性值</td><td>HTML/CSS</td><td>display</td></tr><tr><td>定位有哪些</td><td>HTML/CSS</td><td>CSS样式属性</td></tr><tr><td>每个定位的差别，使用场景</td><td>HTML/CSS</td><td>定位</td></tr><tr><td>如何解决inline-block两个中间会有1px间隙的问题</td><td>HTML/CSS</td><td>CSS样式属性</td></tr><tr><td>用浮动实现导航栏</td><td>HTML/CSS</td><td>CSS样式属性</td></tr><tr><td>高度塌陷问题两种情况？及解决方案？</td><td>HTML/CSS</td><td>高度塌陷</td></tr><tr><td>开发过程中的兼容性问题</td><td>其他</td><td>兼容性问题</td></tr><tr><td>data-属性的作用是什么？</td><td>JavaScript</td><td>data属性</td></tr><tr><td>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</td><td>JavaScript</td><td>cookies/sessionStor age/ localStorage</td></tr><tr><td>请描述一下 GET 和 POST 的区别?</td><td>JavaScript</td><td>get和post</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>填坑录</title>
      <link href="/post/16106.html"/>
      <url>/post/16106.html</url>
      
        <content type="html"><![CDATA[<h1 id="可园填坑回忆录"><a href="#可园填坑回忆录" class="headerlink" title="可园填坑回忆录"></a>可园填坑回忆录</h1><h2 id="vue中点击不可用-一般都是自带了if限制条件"><a href="#vue中点击不可用-一般都是自带了if限制条件" class="headerlink" title="vue中点击不可用,一般都是自带了if限制条件"></a>vue中点击不可用,一般都是自带了if限制条件</h2><h2 id="请求发出去了-后台收不到-可能是请求头格式错误"><a href="#请求发出去了-后台收不到-可能是请求头格式错误" class="headerlink" title="请求发出去了,后台收不到,可能是请求头格式错误"></a>请求发出去了,后台收不到,可能是请求头格式错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持formData其他提交形式</span></span><br><span class="line">service.<span class="property">defaults</span>.<span class="property">transformRequest</span> = [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (headers[<span class="string">&#x27;Content-Type&#x27;</span>] === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 把一个参数对象格式化为一个字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headers[<span class="string">&#x27;Content-Type&#x27;</span>] === <span class="string">&#x27;multipart/form-data;charset=UTF-8&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27; */</span></span><br><span class="line">    headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> qs.<span class="title function_">stringify</span>(data)</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="当前页面查不到元素-可以去全局搜索-查找所有文件"><a href="#当前页面查不到元素-可以去全局搜索-查找所有文件" class="headerlink" title="当前页面查不到元素,可以去全局搜索,查找所有文件"></a>当前页面查不到元素,可以去全局搜索,查找所有文件</h2><h2 id="图片下载有两种-一种是文件流-没试过-最多的就是路径拼接"><a href="#图片下载有两种-一种是文件流-没试过-最多的就是路径拼接" class="headerlink" title="图片下载有两种,一种是文件流,没试过,最多的就是路径拼接,"></a>图片下载有两种,一种是文件流,没试过,最多的就是路径拼接,</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件流 通过url+id</span></span><br><span class="line"><span class="title class_">TableDemoDownLoadByUrlID</span>: <span class="keyword">function</span> (<span class="params">urlString</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;baseIP&#125;</span><span class="subst">$&#123;urlString&#125;</span>&amp;token=<span class="subst">$&#123;getToken()&#125;</span>`</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取url直接下载</span></span><br><span class="line"><span class="attr">completeImageUrl</span>: <span class="keyword">function</span> (<span class="params">urlString</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;urlString&#x27;</span>,urlString)</span><br><span class="line">  <span class="keyword">var</span> path = urlString.<span class="title function_">replace</span>(<span class="string">&quot;getFileStream&quot;</span>, <span class="string">&quot;getAnyFileStream&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;path&#125;</span>?token=<span class="subst">$&#123;getToken()&#125;</span>`</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="上传的图片无法保存进数据库-一是上传不能传参-二是未回显请求回的数据"><a href="#上传的图片无法保存进数据库-一是上传不能传参-二是未回显请求回的数据" class="headerlink" title="上传的图片无法保存进数据库,一是上传不能传参,二是未回显请求回的数据"></a>上传的图片无法保存进数据库,一是上传不能传参,二是未回显请求回的数据</h2><h2 id="el-date-picker-无法修改时间"><a href="#el-date-picker-无法修改时间" class="headerlink" title="el-date-picker 无法修改时间"></a>el-date-picker 无法修改时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">   v-model=&quot;form.approvalDate&quot;</span><br><span class="line">   style=&quot;width: 100%&quot;</span><br><span class="line">   format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">   value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">   type=&quot;date&quot;</span><br><span class="line">   placeholder=&quot;选择日期&quot;</span><br><span class="line">&gt;&lt;/el-date-picker&gt;</span><br><span class="line">如果form.approvalDate的数据的格式是loanTermTime: &quot;2021-11-16 00:00:00&quot;,数据无法修改,去掉限制即可</span><br><span class="line">&lt;el-date-picker</span><br><span class="line">   v-model=&quot;form.approvalDate&quot;</span><br><span class="line">   style=&quot;width: 100%&quot;</span><br><span class="line">   type=&quot;date&quot;</span><br><span class="line">   placeholder=&quot;选择日期&quot;</span><br><span class="line">&gt;&lt;/el-date-picker&gt;</span><br><span class="line"></span><br><span class="line">value-format=&quot;yyyy-MM-dd&quot;的作用是限制v-model的值,可手动修为所需时间格式,日期格式化上传数据,下附使用方法</span><br><span class="line"></span><br><span class="line">import &#123; parseTime &#125; from &#x27;@/utils/index.js&#x27;</span><br><span class="line">parseTime(formData.loanTime,&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期格式化</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseTime</span>(<span class="params">time, pattern</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span> || !time) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> format = pattern || <span class="string">&quot;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> date;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        date = time;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="regexp">/^[0-9]+$/</span>.<span class="title function_">test</span>(time)) &#123;</span><br><span class="line">            time = <span class="built_in">parseInt</span>(time);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            time = time.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/-/gm</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;number&quot;</span> &amp;&amp; time.<span class="title function_">toString</span>().<span class="property">length</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            time = time * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">        <span class="attr">y</span>: date.<span class="title function_">getFullYear</span>(),</span><br><span class="line">        <span class="attr">m</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">d</span>: date.<span class="title function_">getDate</span>(),</span><br><span class="line">        <span class="attr">h</span>: date.<span class="title function_">getHours</span>(),</span><br><span class="line">        <span class="attr">i</span>: date.<span class="title function_">getMinutes</span>(),</span><br><span class="line">        <span class="attr">s</span>: date.<span class="title function_">getSeconds</span>(),</span><br><span class="line">        <span class="attr">a</span>: date.<span class="title function_">getDay</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> time_str = format.<span class="title function_">replace</span>(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, <span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = formatObj[key];</span><br><span class="line">        <span class="comment">// Note: getDay() returns 0 on Sunday</span></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>][value];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            value = <span class="string">&quot;0&quot;</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value || <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> time_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="上传身份证-父子组件数据无法同步-异步时"><a href="#上传身份证-父子组件数据无法同步-异步时" class="headerlink" title="上传身份证 父子组件数据无法同步,异步时"></a>上传身份证 父子组件数据无法同步,异步时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;UploadFile</span><br><span class="line">   v-if=&quot;isFilesListData&quot;</span><br><span class="line">   @changeFilesIDs=&quot;getFilesIDs&quot;</span><br><span class="line">   :sendFilesIDsDatas=&quot;filesList&quot;</span><br><span class="line">   :sentImages=&quot;true&quot;</span><br><span class="line">   :idImages=&quot;false&quot;</span><br><span class="line">   :limit-file-types=&quot;[&#x27;image/png&#x27;, &#x27;image/jpeg&#x27;]&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;template v-slot:button-content&gt;上传图片&lt;/template&gt;</span><br><span class="line">    &lt;template v-slot:tip&gt;请选择图片上传&lt;/template&gt;</span><br><span class="line">&lt;/UploadFile&gt;</span><br><span class="line">//在父组件中使用v-if,</span><br><span class="line">//一开始时,默认v-if为false,请求完后修改为true</span><br><span class="line">//isFilesListData:false,</span><br><span class="line">//this.isFilesListData=true;</span><br></pre></td></tr></table></figure><h2 id="当后端需要参数要定制"><a href="#当后端需要参数要定制" class="headerlink" title="当后端需要参数要定制"></a>当后端需要参数要定制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断rule3items对象是否存在id</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">has</span>(rule3items, <span class="string">&#x27;id&#x27;</span>)) &#123;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(rule3items, <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 浅拷贝, 将origin属性对应的值转移到target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target 目标</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> origin 原</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">defaultVal</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> props 需要copy的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">copyProperties</span>(<span class="params">target, origin, ...props</span>) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> props) &#123;</span><br><span class="line"> target[prop] = origin[prop]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fieldList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">PMethods</span>.<span class="title function_">copyProperties</span>(<span class="variable language_">this</span>.<span class="property">form</span>, val, ...fieldList);</span><br></pre></td></tr></table></figure><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> idString = <span class="variable language_">this</span>.<span class="property">PMethods</span>.<span class="title class_">ArrayToString</span>(<span class="variable language_">this</span>.<span class="property">tableRowIds</span>);</span><br><span class="line"><span class="title class_">ArrayToString</span>: <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;[&quot;&#x27;</span> + arr.<span class="title function_">join</span>(<span class="string">&#x27;&quot;,&quot;&#x27;</span>) + <span class="string">&#x27;&quot;]&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="Object-keys-可浅拷贝"><a href="#Object-keys-可浅拷贝" class="headerlink" title="Object.keys 可浅拷贝"></a>Object.keys 可浅拷贝</h1><p><code>Object.keys()</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#syntax">语法</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(obj)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#parameters">参数</a></h3><ul><li><p>obj</p><p>要返回其枚举自身属性的对象。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#返回值">返回值</a></h3><p>一个表示给定对象的所有可枚举属性的字符串数组。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#description">描述</a></h2><p><code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\sushengren\AppData\Roaming\Typora\typora-user-images\image-20220519114637840.png" alt=""></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#例子">例子</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(arr)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(anObj)); <span class="comment">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getFoo is a property which isn&#x27;t enumerable</span></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">getFoo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObj.<span class="property">foo</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(myObj)); <span class="comment">// console: [&#x27;foo&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="配合浅拷贝"><a href="#配合浅拷贝" class="headerlink" title="配合浅拷贝"></a>配合浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 浅拷贝, 将origin属性对应的值转移到target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target 目标</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> origin 原</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">defaultVal</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> props 需要copy的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">copyProperties</span>(<span class="params">target, origin, ...props</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> props) &#123;</span><br><span class="line">        target[prop] = origin[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> origin = &#123; <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> props = <span class="title class_">Object</span>.<span class="title function_">keys</span>(target)</span><br><span class="line"><span class="comment">//可以快速</span></span><br><span class="line"><span class="title function_">copyProperties</span>(target, origin, ...props)</span><br></pre></td></tr></table></figure><h1 id="数组常见使用"><a href="#数组常见使用" class="headerlink" title="数组常见使用"></a>数组常见使用</h1><h2 id="find-返回符合条件的第一个元素"><a href="#find-返回符合条件的第一个元素" class="headerlink" title="find 返回符合条件的第一个元素"></a><code>find</code> 返回符合条件的第一个元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="comment">//返回符合条件的元素</span></span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="findIndex-返回符合条件的下标"><a href="#findIndex-返回符合条件的下标" class="headerlink" title="findIndex() 返回符合条件的下标"></a><code>findIndex()</code> 返回符合条件的下标</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="comment">//返回符合条件的下标</span></span><br><span class="line"><span class="keyword">const</span> isLargeNumber = array1.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">13</span>);</span><br></pre></td></tr></table></figure><h2 id="filter-过滤-返回符合条件的新数组。"><a href="#filter-过滤-返回符合条件的新数组。" class="headerlink" title="filter() 过滤, 返回符合条件的新数组。"></a><code>filter()</code> 过滤, 返回符合条件的新数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line">创建一个新数组, 返回符合条件的所有元素。</span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">利用 filter 去除数组空值：</span><br><span class="line"><span class="keyword">let</span>  newrr = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = newrr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line"><span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="join-返回拼接字符串"><a href="#join-返回拼接字符串" class="headerlink" title="join() 返回拼接字符串"></a><code>join()</code> 返回拼接字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>,<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="comment">//默认逗号拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>());</span><br><span class="line"><span class="comment">// expected output: &quot;Fire,Air,,Water&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;Fire-Air--Water&quot;</span></span><br></pre></td></tr></table></figure><h2 id="reduce-累加"><a href="#reduce-累加" class="headerlink" title="reduce  累加"></a><code>reduce</code>  累加</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = array1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue);</span><br><span class="line"><span class="comment">// expected output: reducer = 10</span></span><br></pre></td></tr></table></figure><h2 id="splice-可删除-替换或添加新的元素来修改数组-会改变原数组"><a href="#splice-可删除-替换或添加新的元素来修改数组-会改变原数组" class="headerlink" title="splice()  可删除,替换或添加新的元素来修改数组,会改变原数组"></a><code>splice()</code>  可删除,替换或添加新的元素来修改数组,会改变原数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line"><span class="comment">//第一位参数开始下标</span></span><br><span class="line"><span class="comment">//第二位参数大于零,替换;0,插入</span></span><br><span class="line"><span class="comment">//第三位参数替换;插入;添加的元素,不加删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;June&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;]</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="forEach-或map方法对数组的每个元素执行一次给定的函数。循环"><a href="#forEach-或map方法对数组的每个元素执行一次给定的函数。循环" class="headerlink" title="forEach() 或map方法对数组的每个元素执行一次给定的函数。循环"></a><code>forEach()</code> 或<code>map</code>方法对数组的每个元素执行一次给定的函数。循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="comment">//arr.forEach(items , index , array)</span></span><br><span class="line">array1.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(element));</span><br></pre></td></tr></table></figure><h2 id="reverse-位置颠倒，该方法会改变原数组。"><a href="#reverse-位置颠倒，该方法会改变原数组。" class="headerlink" title="reverse() 位置颠倒，该方法会改变原数组。"></a><code>reverse()</code> 位置颠倒，该方法会改变原数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1:&#x27;</span>, array1);</span><br><span class="line"><span class="comment">// expected output: &quot;array1:&quot; Array [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"><span class="keyword">const</span> reversed = array1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reversed:&#x27;</span>, reversed);</span><br><span class="line"><span class="comment">// expected output: &quot;reversed:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="sort-排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的"><a href="#sort-排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的" class="headerlink" title="sort() 排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的"></a><code>sort()</code> 排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象可以按照某个属性排序：</span></span><br><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Edward&#x27;</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Sharpe&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;And&#x27;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;The&#x27;</span>, <span class="attr">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Magnetic&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Zeros&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by value</span></span><br><span class="line">items.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (a.<span class="property">value</span> - b.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="互助可取之处"><a href="#互助可取之处" class="headerlink" title="互助可取之处"></a>互助可取之处</h1><h2 id="项目中要求可以拖拽element-UI-table-的表格"><a href="#项目中要求可以拖拽element-UI-table-的表格" class="headerlink" title="项目中要求可以拖拽element UI table 的表格"></a>项目中要求可以拖拽element UI table 的表格</h2><h3 id="使用-sortablejs-插件"><a href="#使用-sortablejs-插件" class="headerlink" title="使用 sortablejs 插件"></a>使用 sortablejs 插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sortablejs --save</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Sortable</span> <span class="keyword">from</span> <span class="string">&quot;sortablejs&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;table&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ref=&quot;dragTable&quot;</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      border</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;el-button class=&quot;move&quot; type=&quot;text&quot; size=&quot;small&quot;&gt;拖 拽&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Sortable from &quot;sortablejs&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;1&quot;,</span><br><span class="line">          name: &quot;text_1&quot;,</span><br><span class="line">          date: &quot;1111-11-11&quot;,</span><br><span class="line">          address: &quot;测试_1&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;2&quot;,</span><br><span class="line">          name: &quot;text_2_不可拖拽&quot;,</span><br><span class="line">          date: &quot;2222-22-22&quot;,</span><br><span class="line">          address: &quot;测试_2_不可拖拽&quot;,</span><br><span class="line">          disabled: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;3&quot;,</span><br><span class="line">          name: &quot;text_3&quot;,</span><br><span class="line">          date: &quot;3333-33-33&quot;,</span><br><span class="line">          address: &quot;测试_3&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;4&quot;,</span><br><span class="line">          name: &quot;text_4&quot;,</span><br><span class="line">          date: &quot;4444-44-44&quot;,</span><br><span class="line">          address: &quot;测试_4&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;5&quot;,</span><br><span class="line">          name: &quot;text_5&quot;,</span><br><span class="line">          date: &quot;5555-55-55&quot;,</span><br><span class="line">          address: &quot;测试_5&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 创建sortable实例</span><br><span class="line">    initSortable() &#123;</span><br><span class="line">      // 获取表格row的父节点</span><br><span class="line">      const ele = this.$refs.dragTable.$el.querySelector(</span><br><span class="line">        &quot;.el-table__body &gt; tbody&quot;</span><br><span class="line">      );</span><br><span class="line">      // 创建拖拽实例</span><br><span class="line">      let dragTable = Sortable.create(ele, &#123;</span><br><span class="line">        animation: 150, //动画</span><br><span class="line">        disabled: false, // 拖拽不可用? false 启用（刚刚渲染表格的时候起作用，后面不起作用）</span><br><span class="line">        handle: &quot;.move&quot;, //指定拖拽目标，点击此目标才可拖拽元素(此例中设置操作按钮拖拽)</span><br><span class="line">        filter: &quot;.disabled&quot;, //指定不可拖动的类名（el-table中可通过row-class-name设置行的class）</span><br><span class="line">        dragClass: &quot;dragClass&quot;, //设置拖拽样式类名</span><br><span class="line">        ghostClass: &quot;ghostClass&quot;, //设置拖拽停靠样式类名</span><br><span class="line">        chosenClass: &quot;chosenClass&quot;, //设置选中样式类名</span><br><span class="line">        // 开始拖动事件</span><br><span class="line">        onStart: () =&gt; &#123;</span><br><span class="line">          console.log(&quot;开始拖动&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        // 结束拖动事件</span><br><span class="line">        onEnd: (&#123; newIndex, oldIndex &#125;) =&gt; &#123;</span><br><span class="line">          console.log(</span><br><span class="line">            &quot;结束拖动&quot;,</span><br><span class="line">            `拖动前索引$&#123;oldIndex&#125;---拖动后索引$&#123;newIndex&#125;`</span><br><span class="line">          );</span><br><span class="line">            const currRow = _this.tableData.splice(oldIndex, 1)[0];</span><br><span class="line">          this.tableData.splice(newIndex, 0, currRow);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 设置表格row的class</span><br><span class="line">    tableRowClassName(&#123; row &#125;) &#123;</span><br><span class="line">      if (row.disabled) &#123;</span><br><span class="line">        return &quot;disabled&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.initSortable();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">//注意如果加上scoped 样式就可能不起作用</span><br><span class="line">&lt;style lang=&#x27;scss&#x27;&gt;</span><br><span class="line">// 拖拽</span><br><span class="line">.dragClass &#123;</span><br><span class="line">  background: rgba($color: #41c21a, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">// 停靠</span><br><span class="line">.ghostClass &#123;</span><br><span class="line">  background: rgba($color: #6cacf5, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">// 选择</span><br><span class="line">.chosenClass:hover &gt; td &#123;</span><br><span class="line">  background: rgba($color: #f56c6c, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="默认没有删除按钮-当数据长度大于一时显示"><a href="#默认没有删除按钮-当数据长度大于一时显示" class="headerlink" title="默认没有删除按钮,当数据长度大于一时显示"></a>默认没有删除按钮,当数据长度大于一时显示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(item,index) in formData.centreList&quot; :key=&quot;index&quot; class=&quot;fl w100 clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;fl w50&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div :class=&quot;[&#x27;fl&#x27;,formData.centreList.length&gt;1?&#x27;w40&#x27;:&#x27;w50&#x27;]&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;formData.centreList.length&gt;1&quot; class=&quot;fl w10 text_center&quot;&gt;</span><br><span class="line">        &lt;el-form-item label-width=&quot;0&quot;&gt;</span><br><span class="line">            &lt;el-button @click=&quot;deleteStore(index)&quot; type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fl &#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.w50 &#123;</span><br><span class="line">    width: 50%</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        display: block;</span><br><span class="line">        font-size: 0;</span><br><span class="line">        content: &quot; &quot;;</span><br><span class="line">        clear: both;</span><br><span class="line">        height: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="form表单组件化操作"><a href="#form表单组件化操作" class="headerlink" title="form表单组件化操作"></a>form表单组件化操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-form size=&quot;small&quot; :disabled=&quot;isDisabled&quot; ref=&quot;form&quot; :model=&quot;formData&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    sentFormData: &#123;</span><br><span class="line">      type: Object</span><br><span class="line">    &#125;,</span><br><span class="line">    isDisabled: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      formData: &#123;</span><br><span class="line">        proposerNameId: &quot;&quot;,</span><br><span class="line">        centreList: [</span><br><span class="line">          &#123;</span><br><span class="line">            warehouseId: &quot;&quot;,</span><br><span class="line">            counterIdList: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      oldFormData: &#123;</span><br><span class="line">        proposerNameId: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">        centreList: [</span><br><span class="line">          &#123;</span><br><span class="line">            warehouseId: &quot;&quot;,</span><br><span class="line">            counterIdList: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">      //请求下拉框数据</span><br><span class="line">    this.fatchData();</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      //回显</span><br><span class="line">    var data = this.sentFormData;</span><br><span class="line">    if (data) &#123;</span><br><span class="line">      if (Object.keys(data).length == 0) &#123;</span><br><span class="line">        this.formData = this.oldFormData;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.formData.proposerNameId = data.proposerNameId;</span><br><span class="line">        if (data.associateName) &#123;</span><br><span class="line">          this.formData.associateName = data.associateName.adminId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.formData.taskName = data.taskName;</span><br><span class="line">        this.formData.checkTime = data.checkTime;</span><br><span class="line">        this.formData.checkPurposeId = data.checkPurposeId;</span><br><span class="line">        this.formData.associateNameId = data.associateNameId;</span><br><span class="line">        let centreList = [];</span><br><span class="line">        if (data.centreLists) &#123;</span><br><span class="line">          data.centreLists.map((item, index) =&gt; &#123;</span><br><span class="line">            getObjCodeById(item.warehouseId).then(response =&gt; &#123;</span><br><span class="line">              this.$set(this.collSelect, index, response.data);</span><br><span class="line">            &#125;);</span><br><span class="line">            centreList.push(&#123;</span><br><span class="line">              warehouseId: item.warehouseId,</span><br><span class="line">              counterIdList: item.counterIdList</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.formData.centreList = centreList;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    formData: &#123;</span><br><span class="line">      handler(data) &#123;</span><br><span class="line">        var newData = JSON.parse(JSON.stringify(data));</span><br><span class="line">        this.$emit(&quot;getFormData&quot;, newData);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //父传子 保存时验证方法</span><br><span class="line">    getRulesData() &#123;</span><br><span class="line">      let bl = false;</span><br><span class="line">      this.$refs.form.validate(valid =&gt; &#123;</span><br><span class="line">        bl = valid;</span><br><span class="line">      &#125;);</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: bl ? &quot;表单验证通过&quot; : &quot;请检查输入的表单是否有误&quot;,</span><br><span class="line">        data: bl</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h2 id="头部搜索"><a href="#头部搜索" class="headerlink" title="头部搜索"></a>头部搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-collapse-transition v-if=&quot;!Boolean(item.hidden)&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;(v, i) in item.items&quot; :key=&quot;v.id&quot;&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                v-if=&quot;item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active&quot;</span><br><span class="line">                class=&quot;isRegdateActive&quot;</span><br><span class="line">                @click=&quot;</span><br><span class="line">                  buttonAction(v.id, index,item),</span><br><span class="line">                    item.dataType == &#x27;regdate&#x27; &amp;&amp; dateFormat(v.fieldName, index)</span><br><span class="line">                &quot;</span><br><span class="line">                size=&quot;small&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &#123;&#123; v.name &#125;&#125;</span><br><span class="line">                  &lt;!--按钮旁边加数字  --&gt;</span><br><span class="line">                &lt;span</span><br><span class="line">                  style=&quot;padding-left: 5px&quot;</span><br><span class="line">                  v-else-if=&quot;</span><br><span class="line">                    sentNumebr &amp;&amp;</span><br><span class="line">                    index &lt; sentNumebr.length &amp;&amp;</span><br><span class="line">                    sentNumebr[index][i] &amp;&amp;</span><br><span class="line">                    sentNumebr[index][i] &gt;= 10000</span><br><span class="line">                  &quot;</span><br><span class="line">                  :title=&quot;v.num&quot;</span><br><span class="line">                  &gt;( &#123;&#123; sentNumebr[index][i] / 10000 +&quot;w&quot;&#125;&#125; )&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;!--按钮右上方激活打钩  --&gt;</span><br><span class="line">                &lt;div</span><br><span class="line">                  :style=&quot;&#123;</span><br><span class="line">                    height:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active ? &#x27;16px&#x27; : &#x27;0&#x27;,</span><br><span class="line">                    width:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active ? &#x27;16px&#x27; : &#x27;0&#x27;,</span><br><span class="line">                    borderTop:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active</span><br><span class="line">                        ? &#x27;16px solid #39ca74&#x27;</span><br><span class="line">                        : &#x27;0 solid #39ca74&#x27;,</span><br><span class="line">                    borderLeft:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active</span><br><span class="line">                        ? &#x27;16px solid rgba(0, 0, 0, 0)&#x27;</span><br><span class="line">                        : &#x27;0 solid rgba(0, 0, 0, 0)&#x27;,</span><br><span class="line">                  &#125;&quot;</span><br><span class="line">                  class=&quot;select_data&quot;</span><br><span class="line">                &gt;&lt;/div&gt;</span><br><span class="line">                &lt;div</span><br><span class="line">                  v-if=&quot;item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active&quot;</span><br><span class="line">                  class=&quot;el-icon-check check&quot;</span><br><span class="line">                &gt;&lt;/div&gt;</span><br><span class="line">              &lt;/el-button&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">        &lt;!--箭头翻转  --&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">            v-show=&quot;item.iconShow&quot;</span><br><span class="line">            class=&quot;el-icon-arrow-down icon_arrow_style&quot;</span><br><span class="line">            style=&quot;float: right&quot;</span><br><span class="line">            :class=&quot;&#123;</span><br><span class="line">              icon_arrow__ami_default: item.iconDef,</span><br><span class="line">              icon_arrow__ami_rotate: !item.iconDef,</span><br><span class="line">            &#125;&quot;</span><br><span class="line">            @click=&quot;optionMoreCondition(index)&quot;</span><br><span class="line">          &gt;&lt;/i&gt;</span><br><span class="line">    &lt;/el-collapse-transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.isRegdateActive &#123;</span><br><span class="line">  width: 60px;</span><br><span class="line">  color: #39ca74;</span><br><span class="line">  border: 1px solid #39ca74;</span><br><span class="line">  background: #ecf8f0;</span><br><span class="line">  position: relative;</span><br><span class="line">  padding: 0;</span><br><span class="line">  line-height: 32px;</span><br><span class="line">  margin-left: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.check &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 1.3em;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 4px;</span><br><span class="line">  right: 0px;</span><br><span class="line">  font-size: 1px;</span><br><span class="line">  font-weight: 500;</span><br><span class="line">  color: #fff;</span><br><span class="line">  z-index: 1;</span><br><span class="line">&#125;</span><br><span class="line">.icon_arrow_style &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  right: 10px;</span><br><span class="line">  margin-top: -8px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="百度地图-＜baidu-map＞"><a href="#百度地图-＜baidu-map＞" class="headerlink" title="百度地图(＜baidu-map＞)"></a>百度地图(＜baidu-map＞)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-baidu-map --save</span><br></pre></td></tr></table></figure><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 百度地图 Start*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaiduMap</span> <span class="keyword">from</span> <span class="string">&#x27;vue-baidu-map&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BaiduMap</span>, &#123;</span><br><span class="line">    <span class="attr">ak</span>: <span class="string">&#x27;bc4d824e9c0fef9cc375e45deace61d9&#x27;</span> <span class="comment">//官方提供的ak秘钥</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 百度地图 End*/</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;baidu-map</span><br><span class="line">    class=&quot;map&quot;</span><br><span class="line">    :center=&quot;arrObj[0].center&quot;</span><br><span class="line">    :zoom=&quot;zoom&quot;</span><br><span class="line">    :scroll-wheel-zoom=&quot;true&quot;</span><br><span class="line">    style=&quot;height: 100%; width: 100%&quot;</span><br><span class="line">    @ready=&quot;handler&quot;</span><br><span class="line">    @click=&quot;getClickInfo&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;bm-marker</span><br><span class="line">      v-for=&quot;(obj, index) in arrObj&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :position=&quot;obj.center&quot;</span><br><span class="line">      :dragging=&quot;true&quot;</span><br><span class="line">      animation=&quot;BMAP_ANIMATION_BOUNCE&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;bm-label</span><br><span class="line">        :content=&quot;obj.title&quot;</span><br><span class="line">        :labelStyle=&quot;&#123; color: &#x27;red&#x27;, fontSize: &#x27;16px&#x27; &#125;&quot;</span><br><span class="line">        :offset=&quot;obj.box&quot;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 必须给容器指高度，不然地图将显示在一个高度为0的容器中，看不到 --&gt;</span><br><span class="line">      &lt;bm-navigation anchor=&quot;BMAP_ANCHOR_TOP_RIGHT&quot;&gt;&lt;/bm-navigation&gt;</span><br><span class="line">      &lt;bm-geolocation</span><br><span class="line">        anchor=&quot;BMAP_ANCHOR_BOTTOM_RIGHT&quot;</span><br><span class="line">        :showAddressBar=&quot;true&quot;</span><br><span class="line">        :autoLocation=&quot;true&quot;</span><br><span class="line">      &gt;&lt;/bm-geolocation&gt;</span><br><span class="line">      &lt;bm-city-list anchor=&quot;BMAP_ANCHOR_TOP_LEFT&quot;&gt;&lt;/bm-city-list&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 因为我采用的是全局注册，所以不用再在该页面上注册components --&gt;</span><br><span class="line">    &lt;/bm-marker&gt;</span><br><span class="line">  &lt;/baidu-map&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;MapBaidu&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    sentData: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return [</span><br><span class="line">           &#123;</span><br><span class="line">          title: &quot;广州海事博物馆&quot;,</span><br><span class="line">          center: &#123; lng: 113.508252, lat: 23.084856 &#125;,</span><br><span class="line">          box: &#123; width: -40, height: -30 &#125;,</span><br><span class="line">          zoom: 20,</span><br><span class="line">        &#125;,</span><br><span class="line">        ];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      center: &#123; lng: 0, lat: 0 &#125;, //经纬度</span><br><span class="line">      zoom: 20000, //地图展示级别</span><br><span class="line">      arrObj: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    sentData: &#123;</span><br><span class="line">      handler(newVal) &#123;</span><br><span class="line">        this.arrObj=newVal</span><br><span class="line">        this.$set(this.center, &quot;lng&quot;, newVal[0].center);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handler(&#123; BMap, map &#125;) &#123;</span><br><span class="line">      /*  console.log(BMap, map); */</span><br><span class="line">     </span><br><span class="line">      this.zoom = this.zoom;</span><br><span class="line">    &#125;,</span><br><span class="line">    getClickInfo(e) &#123;</span><br><span class="line">      /*   console.log(e.point.lng);</span><br><span class="line">      console.log(e.point.lat);</span><br><span class="line">      this.center.lng = e.point.lng;</span><br><span class="line">      this.center.lat = e.point.lat; */</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二次确认-confirm"><a href="#二次确认-confirm" class="headerlink" title="二次确认,$confirm"></a>二次确认,$confirm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//收藏藏品</span></span><br><span class="line"><span class="title function_">setCollect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;是否收藏该藏品?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setCollectById</span>(<span class="variable language_">this</span>.<span class="property">getSelectIDData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">successDailogMessage</span>(<span class="string">&quot;收藏成功&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;已取消&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="分片上传、秒传及断点续传"><a href="#分片上传、秒传及断点续传" class="headerlink" title="分片上传、秒传及断点续传"></a>分片上传、秒传及断点续传</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">npm install vue-simple-uploader --save</span><br><span class="line">m install --save spark-md5</span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> uploader <span class="keyword">from</span> <span class="string">&#x27;vue-simple-uploader&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(uploader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SparkMd5</span> <span class="keyword">from</span> <span class="string">&quot;spark-md5&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">SparkMd5</span> = <span class="title class_">SparkMd5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码使用</span></span><br><span class="line">src\components\<span class="title class_">UCondition</span>\resourcesUpload.<span class="property">vue</span></span><br></pre></td></tr></table></figure><h2 id="Vue——右键弹出菜单-vue-contextmenu"><a href="#Vue——右键弹出菜单-vue-contextmenu" class="headerlink" title="Vue——右键弹出菜单(vue-contextmenu)"></a>Vue——右键弹出菜单(vue-contextmenu)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装：</span></span><br><span class="line">npm install vue-contextmenu --save</span><br><span class="line"><span class="comment">//引入：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueContextMenu</span> <span class="keyword">from</span> <span class="string">&#x27;vue-contextmenu&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueContextMenu</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; @contextmenu=&quot;showMenu&quot;</span><br><span class="line">    style=&quot;width: 100px;height: 100px;margin-top: 20px;background: red;&quot;&gt;</span><br><span class="line">    &lt;vue-context-menu :contextMenuData=&quot;contextMenuData&quot;</span><br><span class="line">        @home=&quot;home&quot;</span><br><span class="line">        @deletedata=&quot;deletedata&quot;&gt;&lt;/vue-context-menu&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;app&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    // 菜单数据</span><br><span class="line">       contextMenuData: &#123;</span><br><span class="line">         menuName: &#x27;demo&#x27;,</span><br><span class="line">         //菜单显示的位置</span><br><span class="line">         axis: &#123;</span><br><span class="line">           x: null,</span><br><span class="line">           y: null</span><br><span class="line">         &#125;,</span><br><span class="line">         //菜单选项</span><br><span class="line">         menulists: [&#123;</span><br><span class="line">           fnHandler: &#x27;home&#x27;, //绑定事件</span><br><span class="line">           icoName: &#x27;fa fa-home fa-fw&#x27;, //icon图标</span><br><span class="line">           btnName: &#x27;回到主页&#x27; //菜单名称</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">             fnHandler: &#x27;deletedata&#x27;,</span><br><span class="line">             icoName: &#x27;fa fa-minus-square-o  fa-fw&#x27;,</span><br><span class="line">             btnName: &#x27;删除布局&#x27;</span><br><span class="line">         &#125;]</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showMenu () &#123;</span><br><span class="line">        event.preventDefault()</span><br><span class="line">        var x = event.clientX</span><br><span class="line">        var y = event.clientY</span><br><span class="line">        // Get the current location</span><br><span class="line">      this.contextMenuData.axis = &#123;</span><br><span class="line">        x, y</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    homed () &#123;</span><br><span class="line">      alert(&quot;主页&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    deletedata () &#123;</span><br><span class="line">      console.log(&#x27;delete!&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="element-ui-为内数据-添加数字千位分割符10-000"><a href="#element-ui-为内数据-添加数字千位分割符10-000" class="headerlink" title="element-ui 为内数据 添加数字千位分割符10,000"></a><a href="https://www.cnblogs.com/taoshaoji/p/elementUI_.html">element-ui 为内数据 添加数字千位分割符10,000</a></h2><h2 id="vue图片点击放大预览v-viewer"><a href="#vue图片点击放大预览v-viewer" class="headerlink" title="vue图片点击放大预览v-viewer"></a><a href="https://www.jianshu.com/p/84042c7b1b5b">vue图片点击放大预览v-viewer</a></h2><h2 id="基于Vue实现可以拖拽的树形表格"><a href="#基于Vue实现可以拖拽的树形表格" class="headerlink" title="基于Vue实现可以拖拽的树形表格"></a><a href="https://www.cnblogs.com/bfgis/p/9805928.html">基于Vue实现可以拖拽的树形表格</a></h2><h2 id="Vue图片放大镜插件"><a href="#Vue图片放大镜插件" class="headerlink" title="Vue图片放大镜插件"></a><a href="https://blog.csdn.net/qq_40631679/article/details/107272569">Vue图片放大镜插件</a></h2><h2 id="使用vuetify-UI框架"><a href="#使用vuetify-UI框架" class="headerlink" title="使用vuetify UI框架"></a>使用vuetify UI框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vuetify</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuetify</span> <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span> <span class="comment">// 使用vuetify UI框架</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vuetify/dist/vuetify.min.css&#x27;</span> <span class="comment">// 导入 vuetify样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/styles/index.scss&#x27;</span> <span class="comment">// 导入 vuetify样式</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuetify</span>) <span class="comment">// 使用 vuetify</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuetify</span>(&#123;&#125;) <span class="comment">// 导出vuetify对象 不然会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">vuetify</span>: <span class="keyword">new</span> <span class="title class_">Vuetify</span>(),</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="使用swiper框架"><a href="#使用swiper框架" class="headerlink" title="使用swiper框架"></a>使用swiper框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm install swiper@<span class="number">3.4</span><span class="number">.2</span> --save-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/css/swiper.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="手机端适配"><a href="#手机端适配" class="headerlink" title="手机端适配"></a>手机端适配</h1><h2 id="起手是使用-响应式栅格xs、sm、md、lg-和-xl"><a href="#起手是使用-响应式栅格xs、sm、md、lg-和-xl" class="headerlink" title="起手是使用 响应式栅格xs、sm、md、lg 和 xl"></a>起手是使用 响应式栅格<code>xs、sm、md、lg 和 xl</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    onResize() &#123;</span><br><span class="line">//存储数据到vuex</span><br><span class="line">        this.$store.dispatch(&#123;</span><br><span class="line">            type: &quot;changeBrowserStyle&quot;,</span><br><span class="line">            data: window.innerWidth,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">//监听屏幕变化</span><br><span class="line">    this.onResize();</span><br><span class="line">    window.addEventListener(&quot;resize&quot;, this.onResize, &#123; passive: true &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">window.removeEventListener(&quot;resize&quot;, this.onResize);</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">//vuex</span><br><span class="line">&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    mobile: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    isMobile: state =&gt; &#123;</span><br><span class="line">      return state.mobile</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    change_BrowserStyle(state, obj) &#123;</span><br><span class="line"></span><br><span class="line">      // 变更状态</span><br><span class="line">      if (obj.data &lt; 600) &#123;</span><br><span class="line">        state.mobile = true;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 600 &amp;&amp; obj.data &lt; 960) &#123;</span><br><span class="line">        state.mobile = true;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 960 &amp;&amp; obj.data &lt; 1264) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 1264 &amp;&amp; obj.data &lt; 1904) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 1904) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeBrowserStyle(&#123; commit &#125;, obj) &#123;</span><br><span class="line">      commit(&#x27;change_BrowserStyle&#x27;, obj)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="为什么选择Vue？"><a href="#为什么选择Vue？" class="headerlink" title="为什么选择Vue？"></a>为什么选择Vue？</h2><p>Vue的三大特性：</p><p>　　易用：是中国人写的,有好的中文文档,容易上手,市面上的招聘多</p><p>　　灵活：可以在库和框架之间灵活切换，这个也是Vue 的渐进式而言</p><p>　　高效：20KB运行大小；超快的虚拟dom</p><h2 id="vue解决了什么"><a href="#vue解决了什么" class="headerlink" title="vue解决了什么"></a>vue解决了什么</h2><p>然后开始学习ECMAScript6，Webpack，NPM以及Vue-Cli的基本用法，最好对Node.js也要有所了解。</p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><p>beforeCreate(创建前):可以在这加个loading事件，在加载实例时触发</p><p>created(创建后):请求数据,获取数据,数据的回显</p><p>beforeMount(载入前) :</p><p>mounted(载入后) :cavas</p><p>beforeUpdate(更新前) </p><p>updated（更新后) </p><p>beforeDestroy(销毁前) :自定义的一些方法,释放内存</p><p>destroyed（销毁后)</p><p>this.$<em>nextTick</em>():获取输入框的焦点</p><h2 id="v-if跟v-show的区别"><a href="#v-if跟v-show的区别" class="headerlink" title="v-if跟v-show的区别"></a>v-if跟v-show的区别</h2><h2 id="vue组件通信几种方式"><a href="#vue组件通信几种方式" class="headerlink" title="vue组件通信几种方式"></a>vue组件通信几种方式</h2><p>content,introduce,stayCondition,mainBody,activityContent,details,overViewContent,questContent</p>]]></content>
      
      
      <categories>
          
          <category> 说明书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习总结</title>
      <link href="/post/1026.html"/>
      <url>/post/1026.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><p><img src= "/img/loading.gif" data-lazy-src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /></p><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li>新的内置组件<ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><div style="display:flex;">    <img src= "/img/loading.gif" data-lazy-src="/img/bundle.jpg" style="flex:1;height:280px;padding-right:5px;" /><img src= "/img/loading.gif" data-lazy-src="/img/ESM.jpg" style="flex:1;height:280px;padding-left:5px;" /></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li><p>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</p></li><li><p>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></p></li><li><p>reactive定义的响应式数据是“深层次的”。</p></li><li><p>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let sum = reactive(&#123;&#125;)</span><br><span class="line">//监听不到变化，</span><br><span class="line">sum = res.data</span><br><span class="line">//要换下面的声明</span><br><span class="line">let sum = reactive(&#123;</span><br><span class="line">    pie:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">sum.pie = res.data</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">let</span> login = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">addressList</span>: [],</span><br><span class="line">      <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">wechatlogin</span>:wechatlogin,</span><br><span class="line">      <span class="attr">loginuser</span>:loginuser,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (login.<span class="property">account</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>(<span class="string">&#x27;请输入账号&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (login.<span class="property">password</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>(<span class="string">&#x27;请输入密码&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Login</span>(&#123;</span><br><span class="line">        <span class="attr">username</span>: login.<span class="property">account</span>,</span><br><span class="line">        <span class="attr">password</span>: login.<span class="property">password</span></span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>,res)</span><br><span class="line">          <span class="title class_">Toast</span>.<span class="title function_">success</span>(res.<span class="property">msg</span>);</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,res.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userinfo&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">          router.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title class_">Toast</span>.<span class="title function_">fail</span>(res.<span class="property">msg</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>,res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//挂载</span></span><br><span class="line">    <span class="keyword">return</span>&#123; ...<span class="title function_">toRefs</span>(login),login&#125;</span><br></pre></td></tr></table></figure><p>当使用setup语法糖时，</p><p>父传子参数，子接受</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;loading,datasum&#125; = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">datasum</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Object</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>父传子方法，子调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父盒子</span><br><span class="line">&lt;imgbox</span><br><span class="line">    @rotleft=<span class="string">&quot;rotleft&quot;</span></span><br><span class="line">    @rotright=<span class="string">&quot;rotright&quot;</span></span><br><span class="line">&gt;&lt;/imgbox&gt;</span><br><span class="line">子调用</span><br><span class="line"><span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;rotleft&#x27;</span>,<span class="string">&#x27;rotright&#x27;</span>]);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickrotleft</span>(<span class="params"></span>)&#123;<span class="comment">//向左旋转图片</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;向左旋转图片1&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> data = config</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;rotleft&#x27;</span>,data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickrotright</span>(<span class="params"></span>)&#123;<span class="comment">//向右旋转图片</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;向右旋转图片1&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> data = config</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;rotright&#x27;</span>,data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="display: flex;">    <div style="border:1px solid black;flex:1;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src= "/img/loading.gif" data-lazy-src="https://v2.cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:50%" /></div><div style="border:1px solid black;flex:2;"><strong>vue3.0的生命周期</strong><img src= "/img/loading.gif" data-lazy-src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="lifecycle_2" style="zoom:50%" /></div></div><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src= "/img/loading.gif" data-lazy-src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;......    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)    ......&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;......    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)    <span class="keyword">return</span> &#123;car&#125;......&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="display:flex;">    <div style="flex:2;height:370px;overflow:hidden;">    <img src= "/img/loading.gif" data-lazy-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="" /></div><div style="flex:1;height:370px;overflow:hidden;">    <img src= "/img/loading.gif" data-lazy-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="" /> </div></div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="display:flex;"><div style="flex:1;height:340px;overflow:hidden;float:left">    <img src= "/img/loading.gif" data-lazy-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="flex:1;height:340px;overflow:hidden;float:left">    <img src= "/img/loading.gif" data-lazy-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div>    </div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">            &lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">            &lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">            &lt;template v-slot:default&gt;</span><br><span class="line">                &lt;Child/&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:fallback&gt;</span><br><span class="line">                &lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;  </span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;    <span class="attr">count</span>: <span class="number">0</span>  &#125;),  </span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><p>| 2.x 全局 API（<code>Vue</code>） | 3.x 实例 API (<code>app</code>)                        |<br>| ————————————- | —————————————————————- |<br>| Vue.config.xxxx           | app.config.xxxx                             |<br>| Vue.config.productionTip  | <strong style="color:#DD5145">移除</strong> |<br>| Vue.component             | app.component                               |<br>| Vue.directive             | app.directive                               |<br>| Vue.mixin                 | app.mixin                                   |<br>| Vue.use                   | app.use                                     |<br>| Vue.prototype             | app.config.globalProperties                 |</p></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span> &#123;  <span class="attribute">opacity</span>: <span class="number">0</span>;&#125;<span class="selector-class">.v-leave</span>,<span class="selector-class">.v-enter-to</span> &#123;  <span class="attribute">opacity</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,<span class="selector-class">.v-leave-to</span> &#123;  <span class="attribute">opacity</span>: <span class="number">0</span>;&#125;<span class="selector-class">.v-leave-from</span>,<span class="selector-class">.v-enter-to</span> &#123;  <span class="attribute">opacity</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component  v-on:close=&quot;handleComponentEvent&quot;  v-on:click=&quot;handleNativeClickEvent&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  export default &#123;    emits: [&#x27;close&#x27;]  &#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> h5 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历大全 😘</title>
      <link href="/post/1666.html"/>
      <url>/post/1666.html</url>
      
        <content type="html"><![CDATA[<h1 id="马踏优选"><a href="#马踏优选" class="headerlink" title="马踏优选"></a>马踏优选</h1><div class="table-container"><table><thead><tr><th>2022/5-2022/7</th></tr></thead><tbody><tr><td>所属公司：茂名市舜有软件有限公司</td></tr><tr><td>项目描述：一个面向小商户提供在线平台的小程序，是一款在线购物平台，可以实现在线购物，生成订单等功能  <br/>1.每次请求数据调用uni.showLoading给用户一个加载信息。 <br/>2.搜索组件、商品列表、订单详情使用了uniapp分包，提高进入页面时的加载速度。 <br/>3.使用mixins全局混入，底部导航栏来分发 vue 组件中购物车数量、购物车徽标等可复用功能，购物车视图不需要重新刷新。 <br/>4.搜索模块：实现了搜索关键字，搜索历史，搜索结果列表，使用了自己封装的防抖方法。<br/>5.商品列表：请求数据时，默认关闭节流阀，动态渲染商品列表，获取商品列表数据的时候开启节流阀，请求完毕关闭节流阀，使用下拉刷新onPullDownRefresh重置关键数据并重新发起请求。使用onReachBottom，当滑动到达底部150距离的时候判断是否还有下一页，有则页数+1，无则调用uni.showLoading给用户提示信息。 <br/>6.订单详情： 使用uni.previewImage 方法预览图片，使用字符串的replace方法，为img标签添加行内的style样式解决图片底部空白间隙的问题，使用了rich-text商品详情信息图片渲染到页面。 <br/>7.购物车：通过将购物车数据存储在vuex，将购物车中的数据持久化存储在本地，使用mutations方法对购物车商品进行商品删除、全选、单选、数量等功能的实现。通过判断购物车的长度，当长度不等于0是正常显示，否则出现空白购物车。</td></tr></tbody></table></div><h1 id="启果果后台管理系统"><a href="#启果果后台管理系统" class="headerlink" title="启果果后台管理系统"></a>启果果后台管理系统</h1><div class="table-container"><table><thead><tr><th>2022/1-2022/4</th></tr></thead><tbody><tr><td>所属公司：茂名市舜有软件有限公司</td></tr><tr><td>项目描述：启果果后台管理系统集成了登陆、商品管理、分类管理、订单管理、系统管理等多个模块的相关业务的呈现，数据可视化功能，实现智能化运营。  <br/>1.对axios进行封装，在请求拦截处添加token，使用登陆成功后存储在localstorage的token进行权限判断，token验证成功跳转首页。 <br/>2.利用Element ui封装业务组件统了各个业务模块的 ui交互。 <br/>3.使vue-router实现路由跳转，懒加载等，通过路由守卫拦截处理，判断是是否登陆，登陆成功状态的话，就next()顺利跳转，否则就跳转到登录页面。 <br/>4.登陆：验证用户登陆成功后，通过localStore存储token并实现数据持久化，通过后台返回的数据来获取用户的详细信息，退出登陆清除localStore储存的用户数据。 <br/>5.首页：使用Echarts获取折线图数据并渲染出图表，实现图表可视化展示。 <br/>6.菜单：通过递归将扁平化数据转换为树状结构。使用Element-UI的Menu组件对列表进行封装，动态渲染，根据自己点击的子模块，做到不同页面跳转的实现及页面的渲染，。 7.商品管理、订单管理：使用Table组件和Pagination组件对数据进行分页处理，实现基本的CRUD操作。</td></tr></tbody></table></div><h1 id="小兔鲜儿"><a href="#小兔鲜儿" class="headerlink" title="小兔鲜儿"></a>小兔鲜儿</h1><div class="table-container"><table><thead><tr><th>2021/2-2021/6</th></tr></thead><tbody><tr><td>所属公司：茂名市舜有软件有限公司</td></tr><tr><td>项目描述：该项目是基于vue-cli创建的一个综合性的电商购物网站，类似于淘宝，京东商城。登录后用户可以在该网站浏览商品，加入购物车，下订单以及各种各样的活动。未登录的用户可以不能进行下单，他们可以通过手机号注册或者qq登录的方式进行登录完成购物。  <br/>1.封装大量组件，轮播图，复选框，对话框消息提示和消息确认组件等。 <br/>2.实现路由跳转、路由懒加载、组件切换等操作。 <br/>3.通过安装vuex插件来支持vuex的状态持久化，让在vuex中存储的状态和数据存储在本地。在开发过程中，用户的信息（名字，头像，token等）需要在vuex中存储且需要存储在本地购物车未登录状态下也支持，管理在vuex中的数据需要存储在本地。 <br/>4.登陆模块：通过判断当前点击状态来实现账号登陆和扫码登陆动态切换。使用通过表单验证实现非空验证，验证成功/失败调用Message进行消息提示，并且规定购物车必须要先登录才能使用。 <br/>5.商品分类：根据用户点击的类别实现动态渲染数据，使用Provide和Inject对组件进行传值。 <br/>6.商品详情：详情图片实现放大镜、tab切换效果，规格选择、商品评价等效果。 <br/>7.购物车：购物车页面要能够显示商品的详细信息，点击加入购物车将把当前点击商品的所有内容数据存储在localStorage，从本地拿数据并渲染购物车页面，点击复选框选中并同步底部的复选框，点击底部的全选框同步上面的复选框，并计算商品总价。  <br/>链接：<a href="http://erabbit.itheima.net/">http://erabbit.itheima.net/</a></td></tr></tbody></table></div><h1 id="市场摊位管理后台系统"><a href="#市场摊位管理后台系统" class="headerlink" title="市场摊位管理后台系统"></a>市场摊位管理后台系统</h1><div class="table-container"><table><thead><tr><th></th></tr></thead><tbody><tr><td>项目描述：该项目是一个对摊位管理,便于用户和商家租赁的管理系统。采用 vue2,vuex,axios,element ui 框架等搭建完成。主要有系统模块,市场模块,卫生模块,摊主模块等 <br/>项目技术: <br/>1、对登陆页面做预验证,发送 axios 请求,并将返回的 token 存在本地 sessionstorage,在二次封装 的 axios 请求拦截中的 Authorization 上配置 token,每次请求就都会带上 token。<br/>2、项目采用 axios 进行前后端的交互,并对 axios 进行二次封装,根据环境变量统一请求路径,减少页面的重复操作。 <br/>3、在从登录跳到主界面时,在 vue 全局前置守卫 beforeEach 中 进行 token验证,有 token就允许 跳到主页,没有就会返回登录页,在地址栏上面输入地址也会对 token进行验证。 <br/>4、应用了 ElementUI 组件进行功能效果实现。</td></tr></tbody></table></div><h1 id="个人优势："><a href="#个人优势：" class="headerlink" title="个人优势："></a>个人优势：</h1><div class="table-container"><table><thead><tr><th>1.熟练使用HTML，CSS，JavaScript，es6等前端技术 <br/>2.熟练使用HTML5，CSS3可实现网页动画效果，以及Less和Sass预处理器 <br/>3.熟悉Vue框架，能熟练使用Vuex，Vue-router等Vue生态，完成前端项目的开发 <br/>4.了解React框架，React Hooks，ReactRouter，Redux的使用 <br/>5.掌握使用第三方UI库，Bootstrap，LayUI，Element-UI <br/>6.掌握VSCode，HbuliderX，Photoshop，Adobe Illustrator等工具使用 <br/>7.熟练各平台小程序的开发 <br/>8.掌握Git，SVN代理工具的使用 <br/>9.熟悉Webpack，Vite，Pinia的使用<br/>10.熟练掌握并会运用前端的基本框架和类库：jQuery、ECharts、ElementUI、Vxe-table、Antv X6、AntvG6、vxe-virtual-tree、js-xlsx、xlsx-style、sortTable、pdf.js 等；<br/>11.熟练运⽤微信小程序开发技术（wxml + wxss + js）、WUX Weapp、colorUI 框架；</th></tr></thead><tbody><tr><td>掌握HTML、CSS，能够根据设计稿还原出对应的页面。 <br/>掌握原生JavaScript，掌握原型，Event Loop，异步等概念，熟练使用ES6新特性。 <br/>熟悉Vue及相关技术栈，了解生命周期、组件化等概念，能够使用Vue开发单页应用。 <br/>熟悉React及相关第三方库的使用，能够根据需求开发前端应用。 <br/>了解前端工程化，掌握webpack工程化打包工具的配置，能够配置打包分包优化处理。 <br/>了解uniapp开发框架，能够使用uniapp进行小程序开发。 <br/>Npm &amp; Git ，能够使用Node.js搭配Express进行基本后端开发。 <br/>了解前端和后端对接的流程及本地开发和生产环境下的接口处理。 <br/>了解Docker的使用及Linux系统的基本操作。</td></tr><tr><td>1.熟悉掌握JavaScript语言，ES6新特性，进行开发；<br/>2.精通使用HTML、CSS，使用HTML+CSS盒子布局,使用CSS媒体查询响应式布局；<br/>3.熟悉React框架全家桶,使用react 16.7版本开发web前端项目； <br/>4.精通Vue.js主流框架，熟练运用Vue-Router，Vuex，生命周期等的用法； <br/>5.熟悉使用AJAX（axios）进行数据交互，关键字搜索； <br/>6.掌握localStoorage永久存储、sessionStorage临时存储等前端存储方法； <br/>7.熟悉运用JavaScript的map，forEact，filter等遍历方法； <br/>8.掌握ui框架Vant，ECharts, Element, AntDesignMobile，Mint，Ant Design等组件库的运用； <br/>9.熟悉把项目运用webpack打包； <br/>10.了解i18n国际化插件实现切换语言，以及git的基本操作； <br/>11.熟悉使用全局状态或from表单获取页面内容和自动校验<br/>\1. 在组件挂载时请求数据，往state里存储数据，使用map来渲染列表；<br/>\2. 运用this.state实现各个组件之间的传参，通信，共享和onChang校验；<br/>\3. 使用 ocr 识别封装了身份证、其他证件识别组件和文件上传组件，提高了开发效率与代码的可阅读性。<br/>\4. 完成登录注册的编写与使用 bizcharts 完成了中心首页图表的渲染展示，使得数据更清晰化。<br/>\5. 人伤模块：使用 antd-mobile 完成对个人、居住、医院信息等编辑与详细页面模块与签名功能的编写。<br/>\6. 通过使用使用 tim 即时通讯，实现了审核人与车童之间视频查勘定损作业功能，提高车童的作业效率。<br/>\7. 注册全局过滤器，处理文本数据和时间的格式化，注册全局的处理图片加载失败的自定义指令。<br/>\8. 基于 RBAC 权限设计思想，控制登录用户的菜单权限和按钮权限。<br/>\9. 使用路由懒加载优化打包问题以及后期维护与更新。<br/>\9.使用了onReachBottom实现上拉加载，onPullDownfresh实现下拉刷新，优化用户体验。<br/>\10. 实现支付流程，创建订单，预支付，uni.requestPayment发起微信支付等功能。<br/>\11. 引入环信sdk，患者购买咨询服务后可与医生实时对话。<br/>\12. 使用sortablejs对树形table表格实现拖拽排序效果。<br/>\13. 笛卡尔乘积算法对sku的实现。<br/>\14. 引入Eslint配合Prettier对项目进行代码规范，提高代码可读性。<br/>\15. 负责人脸识别功能的实现，调用系统摄像头获取视频流，使用face-api.js对视频流 进行人脸特征识别。<br/>\16. 使用eval函数实现计算机功能。<br/>\17. 运用keep-alive技术对大方快讯模块进行缓存优化，避免页面的重复构建，减少服务器请求，加快页面响应速度，增强用户体验。<br/>\18. 调用微信支付接口，获取用户的 AppID,实现支付的金额参数与用户展示余额相绑定等功能。<br/>\19. 小程序端采用react+taro搭建完成。<br/>\20. 教师端基于vue.js+nw.js 封装成exe可执行程序。调用Windows系统程序功能，完成屏幕录制，截屏画图，屏幕广播等主要功能。<br/>\21. 使用 vue-print-nb 完成车辆保单详情打印功能。<br/>\22. 使用 vue-cropper 对头像进行裁剪上传。<br/>\23. 门户端使用vue-simple-verify来进行一个滑动+短信验证码验证。<br/>\24. 使用iSignature电子签章进行一些盖章操作。<br/>\25. 表格使用vxe-table组件来进行一个复杂可编辑表格需求的一个使用。<br/>\26. 个人中心模块，使用 OCR 文字识别技术实现反馈功能,让用户可以通过上传文字截图识别出所需文字，让用户体验更好。<br/>\27. 个人中心模块，使用 OCR 识别技术实现车商认证功能，让用户可以通过拍照识别或者在本地相册中上传图片进行识别，实现车商用户的认证。<br/>\28. 当页面图片过多的时候，就会加载很慢，服务器压力也比较大，为了提高用户体验，可以使用延迟加载的技术lazyload；为了不影响 JS 性能，尽量减少 Dom 操作次数，还可以采用 cdn 托管来优化开发。<br/>\29. 项目技术栈：Vue + axios + element-ui + element-tree-grid 。<br/>\30. 常用游戏引擎，egret ， coco2d.js ， threejs ,egaret 龙骨动画设计及渲染，动态对象换装、对象碰撞检测等处理。<br/>\31. 使用自定义hook复用逻辑，模态框，选择器，导航栏，进度条，搜索框<br/>\32. 日常维护优化项目(异步引入、按需引入并使用webpack设置mode为production开启TreeShaking，对代码进行分包并压缩，配置小图片压成base64)<br/>\33. 列表数据过多造成页面卡顿。由于antd的table组件不便于重新封装虚拟滚动功能，改为 使用vxe-table组件。<br/>\34. 实时的轨迹采集，用wx.onLocationChange获取实时位置信息更新。onLocationChange事件触发频 率过高，会导致获取相同的经纬度点，所以采用了节流的方式，在一定的时间间隔内只更新一次数据，减少setData频 率和页面渲染压力。<br/>\35.  基于腾讯实时音视频 SDK 开发，实现多人通话与直播，提供便捷的导购功能。<br/>\36.  使用 wxml-to-canvas，实现一键生成海报分享微信或保存等功能。<br/>\37.  使用 wx-charts，完成各种图表的展示，实现图表数据可视化统计。<br/>\38.  主应用跟微应用通过 IceStark 提供的库@ice/stark-data 进行通讯。<br/>\39.  使用 Formaking 进行表单设计。<br/>\40.  React + redux + react-thunk + react-router 搭建的移动端动漫网站。<br/>\41.  Vue3 + Vite + pinia 与 node 搭建的官网资源整合。<br/>\42. 使用了uni.getProvider做微信授权功能,授权后使用uni.requestPayment做微信支付功能。<br/>\43. 使用 VeeValidate 完成表单校验用户登录。<br/>\44. 项目中使用 esLint 插件来进行语法规则与代码风格检查。<br/>\45. 用户管理界面使用了 pl-table 表格插件替代 el-table，优化表格数据太多导致页面卡顿的情况。<br/>\46. 搭建符合规范的项目脚手架，包括 editorconfig、eslint、pritter、commintlint、husky 等规范的搭建。<br/>\47. H5端使用html2canvans、domtoimage生成年度报告并分享，并解决ios端图片部分黑屏问题，兼容ios端及Android端。使用响应式布局兼容不同机型。<br/>\48. 使用webview代替iframe嵌入第三方系统，是系统能跟第三方系统正常通信，解决第三方网站设置frame-ancestor ‘self’ 安全策略无法访问的问题<br/>\49. 二次封装axios请求，根据环境变量统一请求路径，解决打包后win.loadURL将http:转换为app:的问题<br/>\50. 使用win.webContents监听程序崩溃并自动重启程序，保证程序能一直正常工作<br/>\51. APP内置sqllite数据库，实现任务上传数据保存到数据库中，等网络在线时再从数据库取出上传。<br/>\52. 使用Pdf.js插件，结合webView标签，封装了pdf在线预览组件。<br/>\53. nvue使用直播流live-pusher实现人脸比对功能。<br/>\54. 使用html2canvas将当前页面生成图片并保存，使用自定义插件连接蓝牙打印机进行打印。<br/>\55. 使用插件vue2-org-tree、amfe-flexible和postcss-pxtorem实现页面树形架构功能和屏幕自适应。<br/>\56. 使用jsplumb对数据库模型进行可视化操作（类似于PowerDesigner，可以进行拖曳建表，点击表格添加字段、可以进行不同表之间字段到字段的连线等功能）。<br/>\57. Vue 全家桶 +vant+Axios+sass+lbs(使用了 map 和百度地图的 server api 来实现)。<br/>\58. React采用 Ant-Design-Pro框架进行后台管理系统页面的组件化开发，按需加载相关UI组件。<br/>\59. 课程详情页：直观展示课程的详情信息，使用@scrolltolower实现触底加载，使用@refresherrefresh实现下拉刷新，提升用户体。<br/>\59. 问题:前端设备失去网络，无法触发回调事件，服务器异常断开，前端无法收到信息，二者导致和后端交互终止<br/>\59. 优化：定时器做心跳检测，调用send发送空包，规定时间内未收到服务器字段则close处理。<br/>1、问题：利用谷歌浏览器自带的lighthouse检测否是某个文件（js、图片，css）过大还是接口请求时间过长，还是某段代码执行过长。<br/>性能优化:<br/>● 对于长列表使用虚拟列表,优化首屏加载速度慢问题，减少无用dom渲染;<br/>● 使用防抖节流减少代码的执行次数;<br/>● 小图片通过webpack转base64内联到html，减少请求;<br/>2、问题：用户上传高质量图片速度较慢，体验较差<br/>优化：思路获取file文件及类型，转base64，通过canvas压缩base64接着转换成二进制，最后输出formData上传。封装该函数到组件并添加可选项。<br/>4、问题：项目模块较大，首先图片较多，首次渲染不流畅。<br/>解决：通过import动态加载，webpack配置多入口，gzip压缩优化大量图片数据，首次渲染可视区图片采用低画质展示，详情页展示高清画质。非可视区采用图片懒加载，增加首屏渲染速度和用户体验。</td></tr><tr><td>1、熟练掌握 HTML+CSS 能够还原UI工作稿内容；<br/>2、熟练掌握 JavaScript，熟悉 TypeScript 语法规范，掌握ES6以上的语法；<br/>3、熟练掌握 Element-ui、Bootstrap、vant 等ui框架使用；<br/>4、熟练掌握使用Vue全家桶（Vue-cli、VueRouter、Vuex、Axios）等轻量级前端框架的使用；<br/>5、了解 微信小程序 和 React 开发框架，能根据开发文档编写项目；<br/>6、了解 node.js，利用其搭建简单的服务器；<br/>7、熟练使用 web 实时通信 SignalR，熟练使用即时通讯服务 webscoket；</td></tr><tr><td>2年工作经验 10000-15000元/月<br/>1. 熟悉React全家桶，及Redux全家桶的使用，如react-redux，redux-saga等<br/>2. 熟悉Typescript的使用。<br/>3. 项目中有使用过Angular + Rxjs 来进行开发。<br/>4. 熟悉Vue2、及周边插件库Vuex Vue-router的使用，能够使用Vue，React脚手架快速搭建项目，进行项目的开发且对相应的生命周期函数/钩子函数有一定的理解。<br/>5. 了解Vue3新特性的使用。<br/>6. 熟练使用ES6/7/8的规范来对项目进行开发，如常用的模板字符串，扩展运算符，Promise,对象的解构赋值,箭头函数，async/await等等。<br/>7. 开发过程中熟练使用ajax,axios,Fetch来请求后端返回的数据，通过遍历进一步来实现页面渲染，熟练使用Postman来测试后端接口。<br/>8. 项目中使用过Cookie，LocalStorage，SessionStorage等本地存储技术来进行开发，熟悉其优缺点。<br/>9. 熟悉跨域解决方案，能根据项目中不同场景下出现的跨域能使用不同的方法解决。<br/>10. 熟悉Webpack 常用配置，了解Vite。<br/>11. 熟悉Git命令来管理代码，了解GitHub 自动化action配置<br/>12. 开发过程中使用过npm，cnpm，yarn等包管理工具。<br/>13. 熟练使用常用的UI框架，如vant、ElementUI、Ant-Design、Bootstrap等等。<br/>14. 熟悉HTML5新特性，CSS3常用技术，对语义化有一定理解。</td></tr><tr><td>1、配合产品团队完成项目的需求分析，业务设计和方案实现； <br/>2、与产品、后台开发人员保持良好沟通，理解、消化各方需求，并落实为具体的开发工作； <br/>3、负责公司前端产品的研发，并与设计师、后端开发人员有效沟通实现产品的界面和相关功能。<br/>4、根据公司项目组的产品设计与开发任务要求，对软件的功能进行了解，并进行代码编写实现。<br/>4、定期的更新和优化产品，进行代码的维护。<br/>4、解决项目在开发过程中遇到的技术和业务等问题。<br/>4、参与项目需求分析，设计，编码等开发工作。<br/>4、保证好页面的正常运营，及时修复出现的Bug。<br/>4、根据产品 (网站、小程序)需求， 对产品的整体界面结构、操作流程等做出编写代码。<br/>使用graphql对接公司项目需求。<br/>能够熟练使用graphql 做条件过滤、树嵌套递归查询数据，实现业务逻辑。<br/>经验累积对模块化开发更有一定的见解：<br/>多思考行业搭积木思想，对microApp 多框架基座模块集成有一定理解。能把模块思想应用到实际工作做到高效可复用的模块开发。<br/>使用cesium、threejs处理 revit 3d模型展示以及交互，对接设备物联网实时监控系统 。<br/></td></tr><tr><td>8000-9000元/月 2年工作经验<br/>精通 HTML 和 CSS，能够独立的搭建静态页面，熟悉 HTML5 和 CSS3 的一些新特性。<br/>熟练使用原生 JavaScript，会使用面向对象的编程方式开发，且掌握 ES6 常用的新特性。<br/>熟练使用 jQuery 函数库。<br/>熟练使用 AJAX 和 axios 插件进行网络请求渲染页面，了解跨域问题。<br/>熟练使用 Vue 的全家桶（vue-cli、vue-router、Vuex，pinia）进行开发。<br/>熟练使用 React（create-react-app、react-router-dom、redux）进行开发。<br/>熟练使用 Less 或者 Sass 进行样式预编译，高效低重复完成样式编写。<br/>熟练使用 Element、Vant、Ant-design 等 ui 框架进行快速开发。<br/>熟练使用 vue-lazyload，vue-i18n，Echarts，better-scroll 等插件。<br/>掌握使用原生小程序和 uni-app 进行小程序的开发。<br/>掌握 TypeScript 的类型、断言、接口、泛型等一些基本特性。<br/>掌握 Git 版本管理工具，npm 命令，webpack 和 Vite 构建工具等。<br/>掌握 Photoshop，AI，PR 等设计软件的基本操作。<br/>了解 Python，Mysql，Linux，node.js 等基础知识。</td></tr><tr><td>8000-9000元/月 1年 5个月<br/>熟练Vue、Vue3及周边工具库Vuex、Vue Router、Element；<br/>熟练React及周边工具库Redux、React Router、PubSub、antd等<br/>熟练HTML/HTML5、CSS/CSS3、Javascript等web前端技术；<br/>熟练webpack、git、axios、less、sass等前端常用工具<br/>熟练uni-app开发微信小程序；<br/>熟练AngularJs框架；<br/>了解node.js开发、TypeStript；</td></tr><tr><td>基础技能 <br/>Web基础：了解原生HTML、CSS，能够使用HTML、CSS实现复杂页面布局，使用Javascript编写动态页面或是组件，使用Tailwind等CSS库提高开发效率及页面美观程度，使用Ant Design及Element等UI库实现复杂功能。 <br/>Node.js：能够用Node.js的npm进行项目的依赖包管理。  <br/>前端框架 <br/>React：了解React关于JSX、Fiber、Virtual DOM和Diffing算法等原理。熟练掌握State、生命周期、Refs、Hook等特性，以及组件式编程理念。 <br/>React扩展：能够使用React Router管理页面路由，使用React Redux管理全局数据，以构造订阅发布模型的页面应用。 Vue：了解Vue 2的特性及常用API，以及Vue 3的组合式API等新特性。 <br/>Nest：知道如何用控制器编写路由，用Mongoose提供的API操作MongoDB数据库，用Swagger列出API列表提高工作效率，能够独立编写一个后端服务器，并将前两者部署到Docker容器上，为Web页面提供简单后端服务。  <br/>进阶技能 <br/>TypeScript：熟练掌握类型、接口、元组、泛型等相关知识，能够使用类型系统极大提高个人和团队开发工作效率，能够将React框架的JavaScript项目转换为TypeScript项目。 <br/>Three.js：能够使用Three.js在网站上渲染可以进行简单互动的3D模型，极大增加页面美观程度。</td></tr><tr><td>3 年 12k-3k<br/>1. 熟练使用 HTML、CSS 、JavaScript 、ES6、Sass 相关技能，独立完成页面布局<br/>2. 熟练使用 vue、vue-router、vuex、axios、等 vue 全家桶；<br/>3. 熟悉 React 框架、使用 React+React-router+Redux+Antd+axios+Sass 进行项目开发<br/>4. 熟练使用 JQuery 库，高效开发、实现完美效果；<br/>5. 熟练使用 vw、vh、rem、Flex 布局，实现页面的自适应效果；<br/>6. 熟练使用 Ajax，Axios 技术，对后端请求数据，对前后端数据交互有清晰的认识；<br/>7. 熟悉 Bootstrap、ElementUI、VantUl、Antd、Swiper、等前端框架；<br/>8. 熟悉 Trao，ECharts 进行可视化图标的操作，使用 Umi 框架开发React 项目；<br/>9. 掌握 Git 等版本控制工具进行代码管理，Webpack 打包工具对代码进行打包；<br/>10. 掌握 uni/app、微信小程序、进行小程序的开发；</td></tr><tr><td>4年 15k-20k<br/>1、熟悉 HTML5 /JavaScript/typescript/jQuery/Ajax/uniapp/微信小程序 等 Web 开发技术;<br/>2、熟练 flex 布局，rem 布局 和 Bootstrap 框架来适配移动端和 PC 端页面;<br/>3、熟练使用 Vue 、Vue-Router、Vuex 等框架和插件，熟悉 Vue 的组件模块化;<br/>4、熟悉react-router路由跳转 和 redux，了解React / Angular/electron 框架的基础操作<br/>5、熟悉前端各种UI组件库，如ElementUI、Mint、Vant、Muse、iView等;<br/>6、熟悉掌握 ES6，熟悉掌握 webpack、git、svn 等技术，使用 gitlab 管理代码；<br/>7、熟悉前后端分离开发,了解nodejs 和 koa2框架， 熟悉掌握 less，sass、stylus 等前端编译语言;<br/>8、熟练浏览器的适配问题和前端优化方案；有移动端、H5、pc端网页、微信小程序等开发经验，</td></tr></tbody></table></div><h1 id="伊家民宿后台管理系统"><a href="#伊家民宿后台管理系统" class="headerlink" title="伊家民宿后台管理系统"></a>伊家民宿后台管理系统</h1><div class="table-container"><table><thead><tr><th>2022/1-2022/5</th></tr></thead><tbody><tr><td>所属公司：无<strong>9000-12000元/月</strong></td></tr><tr><td>项目描述：项目简介:这是一个管理民宿房态的后台管理系统,自动同步房态、房价日历、订单、房客信息、一站 处理,让运营工作游刃有余。有预约房源、房源管理、评价房源、、数据统计、订单管理、费用支出、 意见反馈等模块。 技术要点: 1、使用Vite构建工具+Vue3+ts+ElementUl开发后台管理页面 <br/>2、封装Axios网络请求,使用interceptors.request和interceptors.response对请求和响应进拦截 <br/>3、实现了权限管理,因为每个用户要看到的页面和数据都是不一样的,所以使用Vuex存用户的权限 列表,router.beforeEach进行路由拦截,动态添加路由路径,并根据token值判断用户使用存在跳转到 相应页面 <br/>4、使用插槽结合vue指令对后端返回的数据进行判断当前是在住状态还是空房状态。编辑时调用后 台接口把得到的数据赋值给v-model实现数据回显 <br/>5、使用pagination分页按钮的size-change和current-change改变当前页和每页条数实现对多 条数据管理。 <br/>6、利用组件的rules属性写入表单的验证规则,并给提交按钮添加validate方法验证表单规则,当不 符合条件的时有对应文字提示 <br/>7、通过Echarts组件实现数据可视化,显示地图和地图摇杆以及饼状图 <br/>8、使用组件化开发,封装了分页组件功能,对其实现高复用性以及统一管理 <br/>9、利用TypeScript增加了代码的可读性与可维护性 项目经历 <br/>主要职责：<br/>项目职责: <br/>1、根据设计稿实现后台管理系统布局 <br/>2、负责查询房源模块、输入手机号、身份证号或者房源名称进行精准搜索 <br/>3、负责权限管理,管理员和普通员工有不同的权限列表<br/>4、负责数据统计分析,利用可视化图展示全面的、多维度的数据报表以及详细记录 <br/>5、负责发布房源,上传房源图片和文字描述增加房源信息 <br/>6、预约房源模块,选择入住时间和离开时间,填入身份证号可预约房源</td></tr></tbody></table></div><h1 id="冒个泡旅行"><a href="#冒个泡旅行" class="headerlink" title="冒个泡旅行"></a>冒个泡旅行</h1><div class="table-container"><table><thead><tr><th>2021/5-2021/8</th></tr></thead><tbody><tr><td>所属公司：无<strong>9000-12000元/月</strong></td></tr><tr><td>项目描述：项目介绍:”冒个泡旅行”是一款为所有移动端亭湖提供的高品质的旅游产品和服务的移动端网站, 让用户足不出户就可以了解到受欢迎的景点以及周边美食,该网站可以为用户提供在线预约旅游景点 门票,酒店门票以及在线购买特色产品 <br/>技术要点: <br/>1、使用vantui+蓝湖+ps对页面进行布局 <br/>2、使用全局路由守卫实现对路由的拦截,判断localStorage里的token值是否存在,若存在则允许跳 转到订单页面 <br/>3、使用了Vuex存储了搜索数据,使得多个组件传值方便 <br/>4、因为底部tabbar跳转重复点击会出现报错,解决了当前页面重复点击报错功能 <br/>5、使用了less预处理器和/deep/深度修改样式解决了vantui初始样式问题 <br/>6、封装了Axios请求,在请求拦截里面携带了请求头 <br/>7、在首页产品列表里运用了节流对产品进行预加载,减轻浏览器的负担 项目经历 <br/>主要职责：<br/>项目职责: <br/>1、跟后台进行数据对接,结合UI框架将数据渲染到页面上 <br/>2、搜索模块,可通过搜索目的地/景点/酒店/地区搜索到相关的旅游景点,推荐目的地限时秒杀,销量 最高、今日上新、限时抢购等 <br/>3、首页轮播图以及底部此菜单栏的实现 <br/>4、产品详情页信息展示,包括特色,产品地址,相关推荐,费用包含,预定须知等等 <br/>5、根据用户点击所跳转对应的页面</td></tr></tbody></table></div><h1 id="急时鲜配管理系统"><a href="#急时鲜配管理系统" class="headerlink" title="急时鲜配管理系统"></a>急时鲜配管理系统</h1><div class="table-container"><table><thead><tr><th>2021/11-2022/5 <strong>12000-15000元/月</strong>  2年</th></tr></thead><tbody><tr><td>所属公司：深圳神裂创科商贸有限公司</td></tr><tr><td>项目描述：<br/>是一套简单方便用户查询，配送员智能配送，企业鲜奶站点自动统计报量管理，送货到家数字化营销的智能管理系统。主要包括：今日概况、配送报表、配送订单、数据统计、财务统计、客户管理、基础设置、日志管理模块  负责模块：负责今日概况模块、配送报表模块、数据统计、客户管理等模块功能 <br/>项目技术栈：<br/>1.基于 Vue 框架开发，Vue-cli 脚手架搭建项目，通过 element-ui 组件库完成页面布局 <br/>2.使用less书写样式，对element-ui的一些默认样式进行 二次修改 <br/>3.Vuex中的store分模块管理,同时开启模块的namespaced并合理使用mutations和actions <br/>4.使用vue的mixin来分发 Vue 组件中的可复用功能 <br/>5.使用Vue-router实现路由跳转，在导航守卫里面引入了Nprogress 并完成了权限控制的主要逻辑。 <br/>6. 使用axios，并且对axios 二次封装，不同模块请求放入单独文件 通过axios拦截器完成token携带和错误的统一处理 <br/>7.使用VueI18n插件完成国际化功能 <br/>8. 使用EChart插件实现数据的可视化，并根据项目需求完成 定制化 <br/>9. token过期处理采用了 主动介入和被动处理 两种方式相结合 <br/>10. 表单编辑回显功能，用到了深拷贝（deep copy）</td></tr></tbody></table></div><h1 id="乐家园物业管理系统"><a href="#乐家园物业管理系统" class="headerlink" title="乐家园物业管理系统"></a>乐家园物业管理系统</h1><div class="table-container"><table><thead><tr><th>2021/4-2021/11</th></tr></thead><tbody><tr><td>所属公司：深圳神裂创科商贸有限公司</td></tr><tr><td>项目描述：<br/>商户管理（商户认证、管理）、公告管理（小区公告管理）、智能服务管理（快递柜管理）、账单收费管理（电费网充）等多功能的物流管理系统 负责模块：主要负责用户登录，首页，业务管理、商户管理、公告管理等模块功能 <br/>项目技术栈： <br/>1.使用 vue-cli 脚手架搭建项目结构，配合 element-ui 组件库进行开发 <br/>2.使用 axios 进行前后端数据交互，并且对axios 二次封装 ，不同模块请求放入单独文件，进行相对应的请求、响应处理 3.通过 axios 拦截器让需携带token的接口统一携带token，css预处理器使用less，提高编码效率 <br/>4.使用 vue-router 实现路由跳转，并借助 vue-router 导航守卫 进行全局登录状态的判断 <br/>5.使用 vuex 对用户信息进行管理 <br/>6.通过vue-i18n插件实现国际化语言切换 <br/>7.项目中图片存储到了三方图片存储服务器腾讯云cos <br/>8.项目中对多个复用组件进行抽取封装，提高代码的可复用性以及可维护性 <br/>9.利用路由懒加载提高了页面的加载速度</td></tr></tbody></table></div><h1 id="拔草购-App"><a href="#拔草购-App" class="headerlink" title="拔草购-App"></a>拔草购-App</h1><div class="table-container"><table><thead><tr><th>2020/3-2020/9</th></tr></thead><tbody><tr><td>所属公司：深圳神裂创科商贸有限公司</td></tr><tr><td>项目描述：<br/>该项目是一个小型的电商网站，提供了基本的商品展示和购买功能。包含了通讯、商品详情页面、分类、图片列表、图片详情、购物车等模块的开发。 负责模块：订单管理、数据统计等模块。 <br/>项目技术栈： <br/>根据 HTML5和CSS进行页面的构建； <br/>1、负责首页、登录、购物车等页面模块静态页面的编写，功能的实现，与后台的数据交互； <br/>2、使用 Vue-cli搭建开发环境，Vue-Router 按需导出，将axios封装单独文件，提高用户体验与维护； <br/>3、使用 axios技术设置请求与响应拦截，防止恶意注入； <br/>4、使用 vuex与localstorage 实现数据共享与判断用户是否登录； <br/>5、使用 postcss-pxtorem插件与amfe-flexible 解决移动端的适配问题；<br/>6、使用 moment 解决时间格式问题与big-int解决axios导致精度丢失问题；</td></tr></tbody></table></div><h1 id="母婴购"><a href="#母婴购" class="headerlink" title="母婴购"></a>母婴购</h1><div class="table-container"><table><thead><tr><th>2020/8-2020/11</th></tr></thead><tbody><tr><td>所属公司：广州盛勤网络科技有限公司</td></tr><tr><td>项目描述：母婴购是一个优质母婴用品推荐，汇聚千万妈妈的育儿分享网站。可以让妈妈们在线查看各种母婴用品，和最新的母婴资讯，定期组织母婴用品团购活动，分享母婴品牌特卖活动，交流育儿经验心得，真正让妈妈们省时省力省钱省心的母婴网站。主要模块包括亲子活动、幸福准妈、产后恢复、在线客服、信息发布等；  <br/>主技术栈： React + Redux + Router + Ant-Design + Sass； <br/>责任描述： <br/>1、根据美术设计稿完成静态页开发； <br/>2、完成首页、亲自活动页、幸福准妈页的组件化开发与数据交互； <br/>3、封装形成可复用的ProductCard、ExpandableList、GuestBook等组件； <br/>4、根据产品与测试的反馈，修复BUG，优化性能； <br/>5、参与项目的版本发布与日常维护；</td></tr></tbody></table></div><h1 id="营销公社"><a href="#营销公社" class="headerlink" title="营销公社"></a>营销公社</h1><div class="table-container"><table><thead><tr><th>2021/8-2022/1</th></tr></thead><tbody><tr><td>所属公司：广州盛勤网络科技有限公司</td></tr><tr><td>项目描述：营销公社是一站式内容整合营销机构，宗旨于帮助企业用户实时连接客户、多途径推进商机、最大程度的实现企业的营销目标、创新营销模式。同时具有粉丝聚合、全媒体投放等优秀企业功用。主要模块包括首页，服务，红人矩阵，IP打造，案例，关于我们等；  <br/>主技术栈： React + Redux + Router + Sass + Ant-Design； 责任描述： <br/>1、根据美术设计稿完成静态页开发； <br/>2、完成首页、红人矩阵页、IP打造页的组件化开发与数据交互； <br/>3、封装形成可复用的BackTop、Slidehow等组件； <br/>4、根据产品与测试的反馈，修复BUG，优化性能； <br/>5、参与项目的版本发布与日常维护；</td></tr></tbody></table></div><h1 id="Italk"><a href="#Italk" class="headerlink" title="Italk"></a>Italk</h1><div class="table-container"><table><thead><tr><th>2020/8-2021/4</th></tr></thead><tbody><tr><td>项目描述：Italk支持在线聊天、视频通话、点对点断点续传文件、共享文件、网络硬盘、自定义面板、邮箱等多种功能，并可与多种通讯终端相连。 <br/>前端技术栈: Uni-app + Uni-ui + socket.io <br/>工作内容： <br/>1.使用Uni-ui进行页面的布局和排版 <br/>2.对登录的账号&amp;密码进行加密，格式效验等一系列登录功能 <br/>3. 进行用户与用户之间的通信，聊天等 <br/>4. 通过axios请求接口，实现数据渲染</td></tr></tbody></table></div><h1 id="炼小队CRM"><a href="#炼小队CRM" class="headerlink" title="炼小队CRM"></a>炼小队CRM</h1><div class="table-container"><table><thead><tr><th>2021/5-2022/5</th></tr></thead><tbody><tr><td>所属公司：无</td></tr><tr><td>项目描述：炼小队科技内部使用的客户管理系统,管理抖音,小红书,MCN等平台垂直领域带货达人<br/>项目架构:vue全家桶+echarts图表+ElementUI<br/>技术要点 : <br/>1.安装 Vue-Quill-Editor 插件,添加商品详情页编辑;<br/>2.结合 quill-image-extend-module 图片上传加强模块,在富文本中添加图片;<br/>3.使用 v-charts 插件,结合 echarts 官方文档,将销售数据可视化;<br/>4.数据模块观察公司全业务链数据,用看板的形式展示,同时配合使用element和echarts进行每天每周每年<br/>的销量趋势并且可以根据所选日期进行详细数据的表格下载<br/>5.封装 request 请求,搭配 promise 实现对请求与相应的拦截,并调用后端 RESful 风格的接口,对页面进行数据渲染;<br/>6.通过router.beforeEach重新发起请求,实现登录状态下刷新页面vuex中权限数据消失问题;<br/>7.用户的按钮权限,存储到vuex中定义公共函数,使用自定义指令,实现按钮权限控制;<br/>8.通过router.afterEach全局后置钩子配合nprogress,二次封装实现全局loading;<br/>9.通过keep-alive实现缓存页面保留页码,提高用户体验;</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>10000-12000元/月</strong> 3年工作经验</th></tr></thead><tbody><tr><td>所属公司：无</td></tr><tr><td>项目描述：炼小队科技健身补剂综合商城<br/>项目架构:原生小程序+vant<br/>技术要点 : 1.使用wx.getSystemInfo APi动态计算页面滑动高度完成动态分类;<br/>2.wx.parse插件进行富文本渲染;<br/>3.wx.requestPayment进行订单合并付款;<br/>4.调用 canvas,实现小程序分享生成海报;<br/>5.通过button加上open-type=”share”属性,设置onShareAppMessage函数实现分享功能;<br/>6.使用button加上open-type=”contact”属性将当前产品卡片发给客服方便客户与客服交互;<br/>7.使用official-account在小程序中内嵌公众号卡片进行相互引流扩展客户;<br/>8.设置 enablePullDownRefresh,调用 onPullDownRefresh,实现下拉刷新;<br/>9.通过 wx.getStorage 获取本地 token 判断用户是否登录,未登录对一些功能不展示开放;</td></tr></tbody></table></div><h1 id="中材官网"><a href="#中材官网" class="headerlink" title="中材官网"></a>中材官网</h1><div class="table-container"><table><thead><tr><th>项目地址 <a href="http://zc.huangjuzi.top/">http://zc.huangjuzi.top/</a></th></tr></thead><tbody><tr><td>项目描述：本项目是一个中材网站，使用 nuxt 框架，构建的单页面应用，使用element-ui 组件库中部分功能、swiper 等一些第三方插件进行快速开发，其中涉及到网站的国际化、即时通讯等，国际化使用了 i18n 插件进行开发，即时通讯调用第三方接口爱番番进行开发</td></tr><tr><td>岗位职责：主要负责项目的搭建，页面布局和数据的渲染，对页面进行布局划分封装自定义组件，进行组件化开发，实现代码复用</td></tr><tr><td>技术要求：<br/>1、运用 nuxt.js 框架开发，采用前后端分离开发模式，使用element-ui 组件库进行页面的布局<br/>2、运用了 vuex、cookie 等对数据进行存储，axios 请求库与后台接口对接，进行数据交互<br/>3、运用了 less 等 css 预处理语言，提升了代码的简洁性和可读性<br/>4、运用了第三方插件 swiper、i18n 及即时通讯 IM 进行开发，实现了国际化与客服聊天等功能<br/></td></tr></tbody></table></div><h1 id="宝宝体征监测-小程序"><a href="#宝宝体征监测-小程序" class="headerlink" title="宝宝体征监测(小程序)"></a>宝宝体征监测(小程序)</h1><div class="table-container"><table><thead><tr><th>2022/1-2022/2</th></tr></thead><tbody><tr><td>所属公司：平行镜（武汉）科技有限公司</td></tr><tr><td>项目描述：宝宝体征监测是一个检测宝宝的线上小程序，可以通过搜索名称或扫码进入小程序进行使用，用户可以在小程序中使用蓝牙连接设备观察宝宝是否尿床，温度湿度等情况。该项目是以uni-app框架为背景开发的，主要用到的一些api在uni-app官网下都可以查阅到的。项目主要涉及到的功能有:wifi、蓝牙、扫码、分享等</td></tr><tr><td>责任描述：<br/>1.使用HbuilderX编辑工具，搭配uni-app组件库编写页面，在微信开发者工具上进行视图调试； <br/>2.调用uni-app中的内置api获取用户登录授权信息，保存到本地，并对用户个人中心进行动态渲染； <br/>3.使用tabBar实现底部tab栏；<br/>4.点击开始检测时打开webscoket,如果遇到异常的数据就会发出警告,告诉家人宝宝有可能温度偏高或尿床了； <br/>5.修改预警信息,最高体温以及最低体温，如果超出就会预警，以及24小时内的曲线图报告和所有的历史记录；</td></tr></tbody></table></div><h1 id="圭峰山官网-与-后台管理系统"><a href="#圭峰山官网-与-后台管理系统" class="headerlink" title="圭峰山官网 与 后台管理系统"></a>圭峰山官网 与 后台管理系统</h1><div class="table-container"><table><thead><tr><th>项目描述：项目介绍：圭峰山风景名胜区！圭峰山是广东十大名山之一，有着得天独厚的自然生态风光和深厚的历史人文文化积淀，集森林奇山风光、绿色生态、历史和宗教文化、寻古探幽、休闲度假、健身娱乐、旅游观光于一体，先后被评为广东省首批风景名胜区、国家森林公园和AAAA 级旅游区。</th></tr></thead><tbody><tr><td>负责模块：轮播图模块，留言模块，响应式模块，搜索模块，多语言模块，后台管理系<br/>统技术栈： <br/>1．使用 vue 全家桶进行开发 <br/>2．使用 vue-i18n 进行多语言的模块开发 <br/>3．使用 element-ui 进行组件的模块化开发 <br/>4．使用 postcss-px-to-viewport 与 C3 的@media 进行响应式的开发 <br/>5．使用 axios 对搜索模块和留言模块开发</td></tr></tbody></table></div><h1 id="Iot管理员面板"><a href="#Iot管理员面板" class="headerlink" title="Iot管理员面板"></a>Iot管理员面板</h1><div class="table-container"><table><thead><tr><th>技术栈：React + GatsbyJS + Ant Design + TypeScript + ECharts</th></tr></thead><tbody><tr><td>所属公司：广州逗号生活科技有限公司</td></tr><tr><td>项目描述：用亍管理设备和用户信息的后台系统<br/>职责描述： 在项目中主要负责修复系统缺陷及新功能模块的开发。 <br/>处理升级到 webpack5 出现的部分第三方库无法使用的问题。 <br/>负责项目性能优化，对加载时间过长的页面进行分析处理，根据情况对网络、包体积、缓存、图片等方面进行优化，优化后页面加载更快。 <br/>对Ant Design 上传组件进行二次封装，自劢转换为对象存储服务器需要的格式。 <br/>处理表格数据导出，封装导出表格数据为 csv 文件的方法。 <br/>根据实际需求情况封装 ECharts 组件，对用到的图表单独进行封装成组件，提高 开发效率。 <br/>通过配置webpack使用Babel + tsc的形式来引入TypeScript语法支持，减少转换流程，提升开发效率</td></tr></tbody></table></div><h1 id="coupon后台管理系统"><a href="#coupon后台管理系统" class="headerlink" title="coupon后台管理系统"></a>coupon后台管理系统</h1><div class="table-container"><table><thead><tr><th>作品地址：<a href="http://manage.electricbike.coupons">http://manage.electricbike.coupons</a></th></tr></thead><tbody><tr><td>所属公司：广州加德智能科技有限公司</td></tr><tr><td>项目描述：该项目用于coupon网站产品的更新、新闻发布客户信息等功能管理 <br/>项目使用vue+vue-router+xuex+element-ui <br/>责任描述： <br/>1.独立负责整个项目，具体功能有登录、首页分析、富文本、图片管理、产品增删改查、权限设置等 <br/>2.登录页：用于用户登录，以及权限校验功能，使用beforeEach路由守卫判断用户的操作权限 <br/>3.首页分析：使用Apache Echarts做流量统计，可选过往日期进行数据对比 <br/>4.引入ueditor富文本做为后台输入文本，可供管理人员操作以及嵌入html <br/>5.所有页面数据使用axios请求获取数据，实现数据实时更新</td></tr></tbody></table></div><h1 id="奇速管理系统"><a href="#奇速管理系统" class="headerlink" title="奇速管理系统"></a>奇速管理系统</h1><div class="table-container"><table><thead><tr><th>10000-11000元/月 3年</th></tr></thead><tbody><tr><td>项目描述：本项目是一个内部送货系统,为公司配送人员提供订单管理和客户信息管理的操作服务,包含 我的客户、客户关怀、消息中心、物流单,快提单、登录、个人中心等模块。 <br/>技术架构:Vue、VantUI框架 <br/>技术要点:<br/>1、通过 axios 来实现对数据的请求,简化代码,同时使用拦截器, <br/>2、使用VueX实现存储用户信息,减少请求次数 <br/>3、使用时间戳formatDate对用户进行按时间排序 <br/>4、首屏数据请求提前加载,非首屏的资源采用异步加载的模式 <br/>5、调用router.addRoute()方法,匹配vuex中权限数据,动态添加路由 <br/>6、利用preload,prefetch,preconnect属性我们可以在 内部书写资源获取请求</td></tr></tbody></table></div><h1 id="云辉旅游官方商城"><a href="#云辉旅游官方商城" class="headerlink" title="云辉旅游官方商城"></a>云辉旅游官方商城</h1><div class="table-container"><table><thead><tr><th>所属公司：广州天腾云计算机网络科技有限公司</th></tr></thead><tbody><tr><td>项目简介：该项目是一款四川云阳景区，查看当地酒店、旅游景区、门票价格等服务为游客提供优质的旅游攻略服务  <br/>项目技术栈：React、MUI、axios、TypeScript <br/>个人职责: <br/>1 根据设计图一比一还原设计稿，完成基础页面的搭建，完成响应式布局 <br/>2 与后台工程师协作，完成数据交互、动态展现 <br/>3 负责登录、首页、个人中心以及酒店详情页  <br/>技术要点： <br/>1 使用 TS 编译代码，静态校验代码规范，便于后续进行管理和维护<br/>2 使用 React.lazy 完成路由的懒加载以及配合使用 Suspense 使用 Loding <br/>3 查看受保护页，未登录跳转登录，登录完成重定向回受保护页面 <br/>4 使用 fastclick 解决移动端点击延迟300ms的问题 5 使用 less 预处理语言书写页面样式以及使用:deep()解决框架样式问题<br/>5 使用防抖优化输入框实时输入请求事件以及节流优化内容加载<br/>6 调用微信支付接口，获取用户的 AppID,实现支付的金额参数与用户展示余额相绑定等功能<br/>7 利用临时存储解决Vuex数据丢失的问题<br/>8 使用路由懒加载解决白屏问题，提高用户体验<br/></td></tr></tbody></table></div><h1 id="全过程工程咨询管理系"><a href="#全过程工程咨询管理系" class="headerlink" title="全过程工程咨询管理系"></a>全过程工程咨询管理系</h1><div class="table-container"><table><thead><tr><th>所属公司：广东舍卫工程技术咨询有限公司</th></tr></thead><tbody><tr><td>项目技术：<br/>基本的 Vue、ElementUI、Vue-cli、SCSS、JavaScript、Es6、Vxe-table、vxe-virtual-tree、Axios、js-xlsx、xlsx-style；<br/>使用 Vuex 结合 cookie 对 toke 数据信息存储，多次重复获取使用，浏览器刷新时则需要判断token是否过期，是否重新获取 token，同时使用 session 存储基本用户信息，浏览器刷新或每隔定时器一段时间重新获取在存储；<br/>使用 Antv G6 绘制横向树结构图；<br/>使用 Antv X6 绘制流程图；<br/>通过 iframe 结合 office 官方提供连接进行 office 文件在线预览，通过pdf.js 实现页面中在线预览pdf文件，对其进行了封装；<br/>项目简介：<br/>该项目主要用于工程方面对所有流程过程中资料文件管理，审核发起，数据填写进行统一，用户无需具备专业的工程知识即可进行相关操作，通过导入文档获取标题、流程等相关数据，绘制横向树结构图进行整体数据查看，点击跳转到对应项进行数据填写，发起审核，一步一步完成业务流程，还可以自定义组织架构图，导出架构图。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>广东政务服务网—好差评项目(web)</strong></th></tr></thead><tbody><tr><td>所属公司：天讯瑞达通信技术有限公司</td></tr><tr><td>项目描述：该项目是广东政务网的政务类项目，主要通过政务服务能力监督，通过公开公示的部门和事项服务数据，促进政府部门做好 服务工作。 包含基础指标管理、测评月报、测评报告、异常监督、事项检测等模块，并且对省内各地市进行定制化开发 <br/>项目构成：公众端（面向用户） + 政务端（后台系统） <br/>公众端（web）：（<a href="https://www.gdzwfw.gov.cn/ping/）">https://www.gdzwfw.gov.cn/ping/）</a> <br/>1、采用 vue 框架 + Antd组件库 + vuex 构建 <br/>2、根据原型图搭建静态页面，处理好移动端和浏览器的兼容性问题； <br/>3、使用vuex实现组件间常用数据传递和操作方法、axios实现前后台数据交互； <br/>4、封装公共组件，加强组件的可共用性； <br/>5、通过@media 媒体查询，实现多端兼容（移动端+pc端+ 横/竖屏评价器）</td></tr></tbody></table></div><h1 id="哈利波特官网以及预热h5活动页"><a href="#哈利波特官网以及预热h5活动页" class="headerlink" title="哈利波特官网以及预热h5活动页"></a>哈利波特官网以及预热h5活动页</h1><div class="table-container"><table><thead><tr><th>使用技术栈：FIS3、Less、JQ、TS、Velocity 、createjs</th></tr></thead><tbody><tr><td>项目描述：哈利波特前三个版本的官网、h5活动页、邀请页。在项目中对不同需求进行需求分析、技术选型、页面制作；其中h5活动页为动画类型的页面，使用视频、createjs+an以及序列帧等方式进行动画制作；官网为强seo类型页面使用混编的方式制作。</td></tr></tbody></table></div><h1 id="汇英人才招聘网（PC端）https-www-huihr-com"><a href="#汇英人才招聘网（PC端）https-www-huihr-com" class="headerlink" title="汇英人才招聘网（PC端）https://www.huihr.com/"></a>汇英人才招聘网（PC端）<a href="https://www.huihr.com/">https://www.huihr.com/</a></h1><div class="table-container"><table><thead><tr><th>所属公司：茂名鼎悦科技有限公司</th></tr></thead><tbody><tr><td>项目描述：<br/>人才招聘网，以网络为媒体癿招聘广告发布平台及相关癿人力资源服务系统；<br/>为企业为求职者提供人才网招聘信息平台，具有方便以人才交流、人事代理两大业务体系为主体，人事代理服务、人<br/>才网信息服务、人才输送流劢性强，速度更快更便捷，传播面广。<br/>使用技术：<br/>axios (请求接口)<br/>vue-router (单页路由)<br/>vuex (状态管理)<br/>vuex-persistedstate (vuex 数据持久化)<br/>normalize.css (初始化样式)<br/>项 目 经 历&lt;br/&gt;@vueuse/core (组合 api 常用工具库)<br/>dayjs (日期处理)<br/>vee-validate （表单校验）<br/>项目职责：<br/>首页模块、类型分类：无限加载、职位详情展示、申请队列、登录模块、填写信息、进行支付、个人中心<br/>基本配置：<br/>使用axios请求后端服务器使用token完成<br/>验证登录功能<br/>使用Vue内置癿filter注册全局过滤器，处理服务端返回时数据丌规范癿处理<br/>使用less癿自劢化导入、组件化公用模块<br/>业务<br/>1-首页<br/>mockjs模拟数据+骨架屏+数据懒加载+图片懒加载+轮播图组件，通过vue3@vueuse/core癿组件数据<br/>懒加载useIntersectionObserver和IntersectionObserver封装组件数据懒加载和图片懒加载。<br/>2-职位模块<br/>复选框组件+面包屑组件+无限加载组件，使用揑槽和封装选项组件完成面包屑组件，render 选项，h<br/>凼数 癿基本使用。<br/>通过 render 渲染，h 凼数封装面包屑功能，tx-infinite-loading 完成数据加载和渲染</td></tr></tbody></table></div><p><strong>项目名称:360场景管理系统</strong></p><p><strong>项目职责：</strong></p><p>1、场景信息维护:包括360全景场景名称、场景描述、场景音乐等信息和数据的维护,为场景导航提供数据;</p><p>2、热点信息维护:包括360全景热区名称及描述信息、热区相关文字、图片、音频、视频等信息的维护,还包括在地图导览标记热区位置功能；</p><p>3、展品或热点信息维护:包括360全景展品或信息维护,包括名称、文字、图片、音频、视频等信息的维护. </p><p><strong>项目描述：</strong></p><p>该项目是使用 vue3.0配合three.js跟Element 开发的，将前端从360场景管理的工作中解放了出来。</p>]]></content>
      
      
      <categories>
          
          <category> 经验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优秀简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>话费充值平台总结</title>
      <link href="/post/1024.html"/>
      <url>/post/1024.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-修改子菜单"><a href="#1-修改子菜单" class="headerlink" title="1.修改子菜单"></a>1.修改子菜单</h1><h2 id="2-修改获取用户信息请求"><a href="#2-修改获取用户信息请求" class="headerlink" title="2.修改获取用户信息请求"></a>2.修改获取用户信息请求</h2><h3 id="3-修改const-accessRoutes-await-store-dispatch-‘permission-generateRoutes’"><a href="#3-修改const-accessRoutes-await-store-dispatch-‘permission-generateRoutes’" class="headerlink" title="3.修改const accessRoutes = await store.dispatch(‘permission/generateRoutes’)"></a>3.修改const accessRoutes = await store.dispatch(‘permission/generateRoutes’)</h3><p>根据方法名去替代请求，获取信息</p><h1 id="换成自己的项目的接口"><a href="#换成自己的项目的接口" class="headerlink" title="换成自己的项目的接口"></a>换成自己的项目的接口</h1><p>需要改密码</p><p>还有baseURL</p><p>改默认接口</p><p>改参数</p><p>修改response的默认状态码判</p><h1 id="Node-js局域网文件共享"><a href="#Node-js局域网文件共享" class="headerlink" title="Node.js局域网文件共享"></a>Node.js局域网文件共享</h1><p>关于node.js如何局域网共享文件，简单两步即可<br>首先安装http-server 包 输以下命令即可安装<br><code>npm install http-server -g</code> 安装包<br>然后在你要共享的文件夹下启动即可<br>输入 <code>http-server</code>即可成功启动。输出以下信息</p><h1 id="在内嵌的HTML页面中跳转回小程序"><a href="#在内嵌的HTML页面中跳转回小程序" class="headerlink" title="在内嵌的HTML页面中跳转回小程序"></a>在内嵌的HTML页面中跳转回小程序</h1><p>如果要在已经通过<code>&lt;web-view&gt;</code>嵌入小程序的网页中，跳转到小程序中的其他页面(Page)，可以引入微信的一个JSSDK，使用它提供的方法来实现相关跳转功能。网页代码类似如下所示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用web-view组件显示HTML页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">&quot;https://www.xxxxxxxxx.com/index.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码中引入JS SDK --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://res.wx.qq.com/open/js/jweixin-1.3.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 跳转到小程序的一个页面</span></span></span><br><span class="line"><span class="language-javascript">wx.<span class="property">miniProgram</span>.<span class="title function_">navigateTo</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;/path/to/page&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSAPI调起支付"><a href="#JSAPI调起支付" class="headerlink" title="JSAPI调起支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6">JSAPI调起支付</a></h2><p><strong>支付授权目录校验规则说明</strong></p><p>1)如果支付授权目录设置为顶级域名（例如：<a href="https://www.weixin.com/">https://www.weixin.com/</a> ），那么只校验顶级域名，不校验后缀；</p><p>2)如果支付授权目录设置为多级目录，就会进行全匹配，例如设置支付授权目录为<a href="https://www.weixin.com/abc/123/，则实际请求页面目录不能为https://www.weixin.com/abc/，也不能为https://www.weixin.com/abc/123/pay/，必须为https://www.weixin.com/abc/123/">https://www.weixin.com/abc/123/，则实际请求页面目录不能为https://www.weixin.com/abc/，也不能为https://www.weixin.com/abc/123/pay/，必须为https://www.weixin.com/abc/123/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//微信 自带 支付成功效果 跳转无效</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;支付成功&quot;</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;../list.html&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request:cancel&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;用户取消支付!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request：fail&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;支付失败!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(res.<span class="property">errMsg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="h5公众号页面需要console，可以使用vconsole打印"><a href="#h5公众号页面需要console，可以使用vconsole打印" class="headerlink" title="h5公众号页面需要console，可以使用vconsole打印"></a>h5公众号页面需要console，可以使用vconsole打印</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vconsole/dist/vconsole.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// VConsole will be exported to `window.VConsole` by default.</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vConsole = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">VConsole</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue-element-通过checkbox控制el-table-column的显示或隐藏el-table-column隐藏"><a href="#vue-element-通过checkbox控制el-table-column的显示或隐藏el-table-column隐藏" class="headerlink" title="vue+element 通过checkbox控制el-table-column的显示或隐藏el-table-column隐藏"></a><a href="https://blog.csdn.net/qq_36802726/article/details/91875898">vue+element 通过checkbox控制el-table-column的显示或隐藏el-table-column隐藏</a></h1><h5 id="什么都做不到的人，会拼命寻找自己能做得到的事情！-我也要找到，我想做什么，我能做什么。。。"><a href="#什么都做不到的人，会拼命寻找自己能做得到的事情！-我也要找到，我想做什么，我能做什么。。。" class="headerlink" title="什么都做不到的人，会拼命寻找自己能做得到的事情！ 我也要找到，我想做什么，我能做什么。。。"></a>什么都做不到的人，会拼命寻找自己能做得到的事情！ 我也要找到，我想做什么，我能做什么。。。</h5><h5 id="无论是十年前还是十年后，时间都是有限的。这么理想当然的事，为什么我没有发觉呢？为了不后悔行动起来，不然一切都不会改变！、"><a href="#无论是十年前还是十年后，时间都是有限的。这么理想当然的事，为什么我没有发觉呢？为了不后悔行动起来，不然一切都不会改变！、" class="headerlink" title="无论是十年前还是十年后，时间都是有限的。这么理想当然的事，为什么我没有发觉呢？为了不后悔行动起来，不然一切都不会改变！、"></a>无论是十年前还是十年后，时间都是有限的。这么理想当然的事，为什么我没有发觉呢？为了不后悔行动起来，不然一切都不会改变！、</h5><h1 id="vant引入"><a href="#vant引入" class="headerlink" title="vant引入"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart">vant引入</a></h1><h1 id="rem引入"><a href="#rem引入" class="headerlink" title="rem引入"></a>rem引入</h1><ol><li><p>npm install amfe-flexible —save</p></li><li><p>npm install postcss-pxtorem —save</p></li><li><p>在main.js导入amfe-flexible</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;amfe-flexible&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>)(&#123; <span class="comment">// 把px单位换算成rem单位</span></span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">37.5</span>, <span class="comment">// 换算的基数(设计图750的根字体为32)</span></span><br><span class="line">            <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;weui&#x27;</span>, <span class="string">&#x27;mu&#x27;</span>], <span class="comment">// 忽略转换正则匹配项</span></span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>rootValue根据设计稿宽度除以10进行设置，这边假设设计稿为375，即rootValue设为37.5；</p></li><li><p>propList是设置需要转换的属性，这边*为所有都进行转换。</p><h1 id="对于这样的情况，-lt-slot-gt-元素有一个特殊的-attribute：name。这个-attribute-可以用来定义额外的插槽："><a href="#对于这样的情况，-lt-slot-gt-元素有一个特殊的-attribute：name。这个-attribute-可以用来定义额外的插槽：" class="headerlink" title="对于这样的情况，&lt;slot&gt; 元素有一个特殊的 attribute：name。这个 attribute 可以用来定义额外的插槽："></a>对于这样的情况，<code>&lt;slot&gt;</code> 元素有一个特殊的 attribute：<code>name</code>。这个 attribute 可以用来定义额外的插槽：</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在 <code>&lt;template&gt;</code> 元素中的所有内容都将会被传入相应的插槽。</p><p>渲染的 HTML 将会是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，<code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code> 上 (<a href="https://vue3js.cn/docs/zh/guide/component-slots.html#独占默认插槽的缩写语法">只有一种例外情况</a>)</p></li></ul><h1 id="jq技巧"><a href="#jq技巧" class="headerlink" title="jq技巧"></a>jq技巧</h1><p>切图技巧：右键快速导出png，jpg</p><p>css编写：以一个成型的模块为模板，解决文字大小参差不齐问题（前期使用vw），行高也要统一对齐</p><p>图片需要完全展示，不可变型</p><p>使用不同手机端检查网站，手机强制刷新需要到设置去清除缓存后退出浏览器，</p><p>背景需要铺满就cover，不好看就隐藏背景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单事件触发，触发 click事件</span></span><br><span class="line"><span class="comment">//新闻列表点击文本不能跳转事件，解决方法给父级li添加点击跳转到子便签a链接的事件</span></span><br><span class="line">$(<span class="string">&#x27;.box-news .NewsList_g2&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;li&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">find</span>(<span class="string">&quot;h3 a&quot;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">    $(location).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>, $(<span class="variable language_">this</span>).<span class="title function_">find</span>(<span class="string">&quot;h3 a&quot;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">    <span class="comment">// $(&#x27;.box-news .NewsList_g2 li&#x27;).eq(0).find(&quot;h3 a&quot;).attributes[&quot;href&quot;].value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当公司组件结构不对时，使用js替换节点，改变公司组件结构</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;$(<span class="string">&#x27;.box-news .NewsList_g2 li&#x27;</span>).<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> p1= $(<span class="string">&#x27;.box-news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>) <span class="comment">//  获取&lt;li&gt;节点中第一个&lt;p&gt;元素节点</span></span><br><span class="line">    <span class="keyword">let</span> p2= $(<span class="string">&#x27;.box-news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>) <span class="comment">//  获取&lt;li&gt;节点中第二个&lt;p&gt;元素节点</span></span><br><span class="line">    p2.<span class="title function_">insertBefore</span>(p1);    <span class="comment">//替换节点</span></span><br><span class="line">    <span class="comment">// console.log($(&#x27;.box-news .NewsList_g2 li&#x27;).eq(i).find(&quot;p&quot;).eq(0))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 自适应网页界面在屏幕宽度为1920px，1600px，1440px，1366px，1280px，800px，750px显示正常。</p><p>首页主要包含关于模块：logo，公司名48px，简介16px，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mobsnav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;sort_btn mob&quot;</span>&gt;</span>产品分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;NavList_a1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//子导航组件横转下拉样式加js</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//下拉二级菜单</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a=$(<span class="string">&#x27;.NavList_a1 .on&#x27;</span>).<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>,a,$(<span class="string">&#x27;.NavList_a1 .on&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>,a,$(<span class="string">&#x27;.NavList_a1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;.sort_btn&#x27;</span>).<span class="title function_">html</span>(a);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.sort_btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.NavList_a1&quot;</span>).<span class="title function_">slideToggle</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">640px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mobsnav</span> <span class="selector-class">.sort_btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#cdcdcd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">3vw</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">4vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">12%</span> <span class="number">0.5em</span> <span class="number">3%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/d.png</span>) <span class="number">95%</span> center no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: auto <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mobsnav</span> <span class="selector-class">.NavList_a1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* bottom: -100%; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#efefef</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">45vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mobsnav</span> <span class="selector-class">.NavList_a1</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子导航组件横加滚动效果的js</span></span><br><span class="line">$(<span class="string">&quot;.NavList_a1&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;swiper-container&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.NavList_a1 ul&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;swiper-wrapper&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.NavList_a1 ul li&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;swiper-slide&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Class</span>_Swiper = <span class="keyword">new</span> <span class="title class_">Swiper</span> (<span class="string">&#x27;.NavList_a1&#x27;</span>, &#123;</span><br><span class="line">freeMode : <span class="literal">true</span>,</span><br><span class="line">slidesPerView : <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line"><span class="attr">observer</span>:<span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机端菜单栏组件横加子菜单下拉事件的js</span></span><br><span class="line"><span class="keyword">if</span> ( rw &gt; <span class="number">1125</span>)&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.MenuList_f1&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> fMenu= $(<span class="string">&#x27;.MenuList_f1 .drop&#x27;</span>);</span><br><span class="line">        fMenu.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>,$(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="property">context</span>.<span class="property">innerText</span>)</span><br><span class="line">            <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="property">context</span>.<span class="property">innerText</span>==<span class="string">&#x27;产品中心&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">navigate</span>(<span class="string">&quot;product_list.php?rid=9&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&#x27;ul li&#x27;</span>).<span class="property">length</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                e.<span class="title function_">preventDefault</span>();</span><br><span class="line">                <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">hasClass</span>(<span class="string">&#x27;cur&#x27;</span>))&#123;</span><br><span class="line">                    $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;cur&#x27;</span>);  </span><br><span class="line">                    $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&quot;.child&quot;</span>).<span class="title function_">stop</span>(<span class="literal">true</span>,<span class="literal">true</span>).<span class="title function_">hide</span>();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&quot;.child&quot;</span>).<span class="title function_">slideDown</span>();</span><br><span class="line">                    $(<span class="string">&#x27;.cur&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;cur&quot;</span>);</span><br><span class="line">                    $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;cur&#x27;</span>);</span><br><span class="line">                    $(<span class="string">&#x27;.cur&#x27;</span>).<span class="title function_">siblings</span>().<span class="title function_">find</span>(<span class="string">&quot;.child&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//一键导航制作加个a标签，加点</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fr contact_img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;map-btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wxdev.pbinfo.cn/open/map/nav.php?navstr=Cy4NQUiZWzWq3bCoj4hffwXCK0_ocpMC-Qln_9CrlcrDaxypQD6xpHKdwLT_O_LDyf-YHtEJ3miI9_Aa7Dp3HFgqi7-cecXZxB1SU38AoHpJq7xmn0BNBB9zGYTcmZ4m7AK38-AvYGGthGwW9fbStLP5Y4aBciKh2qc1zlMZWGA1TIAppfqVmHj7aXs&quot;</span>&gt;</span>一键导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &lt;? getMapList(&#x27;a1&#x27;,15) ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.map-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">8em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#002e73</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">3.8vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">6vw</span> auto <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1.5vw</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5vw</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    //手机端隐藏地图，显示一键导航按钮</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">640px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.map-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.map_a1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定制新闻</span></span><br><span class="line"><span class="comment">// console.log(&#x27;定制新闻&#x27;,$(&#x27;.box-news .NewsList_g2 li .ntime&#x27;)[1])</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;$(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// let p1= $(&#x27;.box_news .NewsList_g2 li&#x27;).eq(i).find(&quot;p&quot;).eq(0) //  获取&lt;li&gt;节点中第一个&lt;p&gt;元素节点</span></span><br><span class="line">    <span class="keyword">let</span> p2= $(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>)[<span class="number">0</span>].<span class="property">innerHTML</span>.<span class="title function_">replace</span>(<span class="regexp">/时间:/</span>,<span class="string">&quot;&quot;</span>) <span class="comment">//  获取&lt;li&gt;节点中第二个&lt;p&gt;元素节点</span></span><br><span class="line">    <span class="comment">// p2.insertBefore(p1);    //移动节点\</span></span><br><span class="line">    $(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">text</span>(<span class="string">&#x27;MORE&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">addClass</span>(<span class="string">&quot;newsmore&quot;</span>);</span><br><span class="line">    $(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">addClass</span>(<span class="string">&quot;mt-50&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定制新闻&#x27;</span>,p2)</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(p2)</span><br><span class="line">    <span class="keyword">let</span> year = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-mm&quot;</span>, date)</span><br><span class="line">    <span class="keyword">let</span> day = <span class="title function_">dateFormat</span>(<span class="string">&quot;dd&quot;</span>, date)</span><br><span class="line">    <span class="comment">// console.log(&#x27;定制新闻&#x27;,year,day)</span></span><br><span class="line">    $(<span class="string">&#x27;.box_news .NewsList_g2 li&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">prepend</span>(<span class="string">`&lt;div class=&quot;timebox&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;day&quot;&gt;<span class="subst">$&#123;day&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;year&quot;&gt;<span class="subst">$&#123;year&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">fmt, date</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    <span class="keyword">const</span> opt = &#123;</span><br><span class="line">        <span class="string">&quot;Y+&quot;</span>: date.<span class="title function_">getFullYear</span>().<span class="title function_">toString</span>(),        <span class="comment">// 年</span></span><br><span class="line">        <span class="string">&quot;m+&quot;</span>: (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>(),     <span class="comment">// 月</span></span><br><span class="line">        <span class="string">&quot;d+&quot;</span>: date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>(),            <span class="comment">// 日</span></span><br><span class="line">        <span class="string">&quot;H+&quot;</span>: date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>(),           <span class="comment">// 时</span></span><br><span class="line">        <span class="string">&quot;M+&quot;</span>: date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>(),         <span class="comment">// 分</span></span><br><span class="line">        <span class="string">&quot;S+&quot;</span>: date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>()          <span class="comment">// 秒</span></span><br><span class="line">        <span class="comment">// 有其他格式化字符需求可以继续添加，必须转化成字符串</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> opt) &#123;</span><br><span class="line">        ret = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).<span class="title function_">exec</span>(fmt);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            fmt = fmt.<span class="title function_">replace</span>(ret[<span class="number">1</span>], (ret[<span class="number">1</span>].<span class="property">length</span> == <span class="number">1</span>) ? (opt[k]) : (opt[k].<span class="title function_">padStart</span>(ret[<span class="number">1</span>].<span class="property">length</span>, <span class="string">&quot;0&quot;</span>)))</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="菜鸡技巧"><a href="#菜鸡技巧" class="headerlink" title="菜鸡技巧"></a>菜鸡技巧</h1><p>修改颜色样式时需ctrl+F5刷新方可看到效果</p><p><strong><em>英文版座机手机都要加+86—</em></strong>``</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 微信公众号 </tag>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>填坑录</title>
      <link href="/post/16106.html"/>
      <url>/post/16106.html</url>
      
        <content type="html"><![CDATA[<h1 id="可园填坑回忆录"><a href="#可园填坑回忆录" class="headerlink" title="可园填坑回忆录"></a>可园填坑回忆录</h1><h2 id="vue中点击不可用-一般都是自带了if限制条件"><a href="#vue中点击不可用-一般都是自带了if限制条件" class="headerlink" title="vue中点击不可用,一般都是自带了if限制条件"></a>vue中点击不可用,一般都是自带了if限制条件</h2><h2 id="请求发出去了-后台收不到-可能是请求头格式错误"><a href="#请求发出去了-后台收不到-可能是请求头格式错误" class="headerlink" title="请求发出去了,后台收不到,可能是请求头格式错误"></a>请求发出去了,后台收不到,可能是请求头格式错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持formData其他提交形式</span></span><br><span class="line">service.<span class="property">defaults</span>.<span class="property">transformRequest</span> = [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (headers[<span class="string">&#x27;Content-Type&#x27;</span>] === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 把一个参数对象格式化为一个字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (headers[<span class="string">&#x27;Content-Type&#x27;</span>] === <span class="string">&#x27;multipart/form-data;charset=UTF-8&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27; */</span></span><br><span class="line">    headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> qs.<span class="title function_">stringify</span>(data)</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="当前页面查不到元素-可以去全局搜索-查找所有文件"><a href="#当前页面查不到元素-可以去全局搜索-查找所有文件" class="headerlink" title="当前页面查不到元素,可以去全局搜索,查找所有文件"></a>当前页面查不到元素,可以去全局搜索,查找所有文件</h2><h2 id="图片下载有两种-一种是文件流-没试过-最多的就是路径拼接"><a href="#图片下载有两种-一种是文件流-没试过-最多的就是路径拼接" class="headerlink" title="图片下载有两种,一种是文件流,没试过,最多的就是路径拼接,"></a>图片下载有两种,一种是文件流,没试过,最多的就是路径拼接,</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件流 通过url+id</span></span><br><span class="line"><span class="title class_">TableDemoDownLoadByUrlID</span>: <span class="keyword">function</span> (<span class="params">urlString</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;baseIP&#125;</span><span class="subst">$&#123;urlString&#125;</span>&amp;token=<span class="subst">$&#123;getToken()&#125;</span>`</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//获取url直接下载</span></span><br><span class="line"><span class="attr">completeImageUrl</span>: <span class="keyword">function</span> (<span class="params">urlString</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;urlString&#x27;</span>,urlString)</span><br><span class="line">  <span class="keyword">var</span> path = urlString.<span class="title function_">replace</span>(<span class="string">&quot;getFileStream&quot;</span>, <span class="string">&quot;getAnyFileStream&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;path&#125;</span>?token=<span class="subst">$&#123;getToken()&#125;</span>`</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="上传的图片无法保存进数据库-一是上传不能传参-二是未回显请求回的数据"><a href="#上传的图片无法保存进数据库-一是上传不能传参-二是未回显请求回的数据" class="headerlink" title="上传的图片无法保存进数据库,一是上传不能传参,二是未回显请求回的数据"></a>上传的图片无法保存进数据库,一是上传不能传参,二是未回显请求回的数据</h2><h2 id="el-date-picker-无法修改时间"><a href="#el-date-picker-无法修改时间" class="headerlink" title="el-date-picker 无法修改时间"></a>el-date-picker 无法修改时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">   v-model=&quot;form.approvalDate&quot;</span><br><span class="line">   style=&quot;width: 100%&quot;</span><br><span class="line">   format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">   value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">   type=&quot;date&quot;</span><br><span class="line">   placeholder=&quot;选择日期&quot;</span><br><span class="line">&gt;&lt;/el-date-picker&gt;</span><br><span class="line">如果form.approvalDate的数据的格式是loanTermTime: &quot;2021-11-16 00:00:00&quot;,数据无法修改,去掉限制即可</span><br><span class="line">&lt;el-date-picker</span><br><span class="line">   v-model=&quot;form.approvalDate&quot;</span><br><span class="line">   style=&quot;width: 100%&quot;</span><br><span class="line">   type=&quot;date&quot;</span><br><span class="line">   placeholder=&quot;选择日期&quot;</span><br><span class="line">&gt;&lt;/el-date-picker&gt;</span><br><span class="line"></span><br><span class="line">value-format=&quot;yyyy-MM-dd&quot;的作用是限制v-model的值,可手动修为所需时间格式,日期格式化上传数据,下附使用方法</span><br><span class="line"></span><br><span class="line">import &#123; parseTime &#125; from &#x27;@/utils/index.js&#x27;</span><br><span class="line">parseTime(formData.loanTime,&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125;&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期格式化</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseTime</span>(<span class="params">time, pattern</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span> || !time) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> format = pattern || <span class="string">&quot;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> date;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        date = time;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="regexp">/^[0-9]+$/</span>.<span class="title function_">test</span>(time)) &#123;</span><br><span class="line">            time = <span class="built_in">parseInt</span>(time);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            time = time.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/-/gm</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&quot;number&quot;</span> &amp;&amp; time.<span class="title function_">toString</span>().<span class="property">length</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            time = time * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">        <span class="attr">y</span>: date.<span class="title function_">getFullYear</span>(),</span><br><span class="line">        <span class="attr">m</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">d</span>: date.<span class="title function_">getDate</span>(),</span><br><span class="line">        <span class="attr">h</span>: date.<span class="title function_">getHours</span>(),</span><br><span class="line">        <span class="attr">i</span>: date.<span class="title function_">getMinutes</span>(),</span><br><span class="line">        <span class="attr">s</span>: date.<span class="title function_">getSeconds</span>(),</span><br><span class="line">        <span class="attr">a</span>: date.<span class="title function_">getDay</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> time_str = format.<span class="title function_">replace</span>(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, <span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = formatObj[key];</span><br><span class="line">        <span class="comment">// Note: getDay() returns 0 on Sunday</span></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>][value];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            value = <span class="string">&quot;0&quot;</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value || <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> time_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="上传身份证-父子组件数据无法同步-异步时"><a href="#上传身份证-父子组件数据无法同步-异步时" class="headerlink" title="上传身份证 父子组件数据无法同步,异步时"></a>上传身份证 父子组件数据无法同步,异步时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;UploadFile</span><br><span class="line">   v-if=&quot;isFilesListData&quot;</span><br><span class="line">   @changeFilesIDs=&quot;getFilesIDs&quot;</span><br><span class="line">   :sendFilesIDsDatas=&quot;filesList&quot;</span><br><span class="line">   :sentImages=&quot;true&quot;</span><br><span class="line">   :idImages=&quot;false&quot;</span><br><span class="line">   :limit-file-types=&quot;[&#x27;image/png&#x27;, &#x27;image/jpeg&#x27;]&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;template v-slot:button-content&gt;上传图片&lt;/template&gt;</span><br><span class="line">    &lt;template v-slot:tip&gt;请选择图片上传&lt;/template&gt;</span><br><span class="line">&lt;/UploadFile&gt;</span><br><span class="line">//在父组件中使用v-if,</span><br><span class="line">//一开始时,默认v-if为false,请求完后修改为true</span><br><span class="line">//isFilesListData:false,</span><br><span class="line">//this.isFilesListData=true;</span><br></pre></td></tr></table></figure><h2 id="当后端需要参数要定制"><a href="#当后端需要参数要定制" class="headerlink" title="当后端需要参数要定制"></a>当后端需要参数要定制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断rule3items对象是否存在id</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">has</span>(rule3items, <span class="string">&#x27;id&#x27;</span>)) &#123;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(rule3items, <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 浅拷贝, 将origin属性对应的值转移到target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target 目标</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> origin 原</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">defaultVal</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> props 需要copy的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">copyProperties</span>(<span class="params">target, origin, ...props</span>) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> props) &#123;</span><br><span class="line"> target[prop] = origin[prop]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fieldList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">PMethods</span>.<span class="title function_">copyProperties</span>(<span class="variable language_">this</span>.<span class="property">form</span>, val, ...fieldList);</span><br></pre></td></tr></table></figure><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> idString = <span class="variable language_">this</span>.<span class="property">PMethods</span>.<span class="title class_">ArrayToString</span>(<span class="variable language_">this</span>.<span class="property">tableRowIds</span>);</span><br><span class="line"><span class="title class_">ArrayToString</span>: <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;[&quot;&#x27;</span> + arr.<span class="title function_">join</span>(<span class="string">&#x27;&quot;,&quot;&#x27;</span>) + <span class="string">&#x27;&quot;]&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="Object-keys-可浅拷贝"><a href="#Object-keys-可浅拷贝" class="headerlink" title="Object.keys 可浅拷贝"></a>Object.keys 可浅拷贝</h1><p><code>Object.keys()</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#syntax">语法</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(obj)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#parameters">参数</a></h3><ul><li><p>obj</p><p>要返回其枚举自身属性的对象。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#返回值">返回值</a></h3><p>一个表示给定对象的所有可枚举属性的字符串数组。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#description">描述</a></h2><p><code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\sushengren\AppData\Roaming\Typora\typora-user-images\image-20220519114637840.png" alt=""></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#例子">例子</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(arr)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object with random key ordering</span></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(anObj)); <span class="comment">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getFoo is a property which isn&#x27;t enumerable</span></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">getFoo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myObj.<span class="property">foo</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(myObj)); <span class="comment">// console: [&#x27;foo&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="配合浅拷贝"><a href="#配合浅拷贝" class="headerlink" title="配合浅拷贝"></a>配合浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 浅拷贝, 将origin属性对应的值转移到target</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target 目标</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> origin 原</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">defaultVal</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> props 需要copy的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">copyProperties</span>(<span class="params">target, origin, ...props</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> props) &#123;</span><br><span class="line">        target[prop] = origin[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> origin = &#123; <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> props = <span class="title class_">Object</span>.<span class="title function_">keys</span>(target)</span><br><span class="line"><span class="comment">//可以快速</span></span><br><span class="line"><span class="title function_">copyProperties</span>(target, origin, ...props)</span><br></pre></td></tr></table></figure><h1 id="数组常见使用"><a href="#数组常见使用" class="headerlink" title="数组常见使用"></a>数组常见使用</h1><h2 id="find-返回符合条件的第一个元素"><a href="#find-返回符合条件的第一个元素" class="headerlink" title="find 返回符合条件的第一个元素"></a><code>find</code> 返回符合条件的第一个元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="comment">//返回符合条件的元素</span></span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="findIndex-返回符合条件的下标"><a href="#findIndex-返回符合条件的下标" class="headerlink" title="findIndex() 返回符合条件的下标"></a><code>findIndex()</code> 返回符合条件的下标</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="comment">//返回符合条件的下标</span></span><br><span class="line"><span class="keyword">const</span> isLargeNumber = array1.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">13</span>);</span><br></pre></td></tr></table></figure><h2 id="filter-过滤-返回符合条件的新数组。"><a href="#filter-过滤-返回符合条件的新数组。" class="headerlink" title="filter() 过滤, 返回符合条件的新数组。"></a><code>filter()</code> 过滤, 返回符合条件的新数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line">创建一个新数组, 返回符合条件的所有元素。</span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">利用 filter 去除数组空值：</span><br><span class="line"><span class="keyword">let</span>  newrr = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = newrr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line"><span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="join-返回拼接字符串"><a href="#join-返回拼接字符串" class="headerlink" title="join() 返回拼接字符串"></a><code>join()</code> 返回拼接字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>,<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="comment">//默认逗号拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>());</span><br><span class="line"><span class="comment">// expected output: &quot;Fire,Air,,Water&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;Fire-Air--Water&quot;</span></span><br></pre></td></tr></table></figure><h2 id="reduce-累加"><a href="#reduce-累加" class="headerlink" title="reduce  累加"></a><code>reduce</code>  累加</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = array1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue);</span><br><span class="line"><span class="comment">// expected output: reducer = 10</span></span><br></pre></td></tr></table></figure><h2 id="splice-可删除-替换或添加新的元素来修改数组-会改变原数组"><a href="#splice-可删除-替换或添加新的元素来修改数组-会改变原数组" class="headerlink" title="splice()  可删除,替换或添加新的元素来修改数组,会改变原数组"></a><code>splice()</code>  可删除,替换或添加新的元素来修改数组,会改变原数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line"><span class="comment">//第一位参数开始下标</span></span><br><span class="line"><span class="comment">//第二位参数大于零,替换;0,插入</span></span><br><span class="line"><span class="comment">//第三位参数替换;插入;添加的元素,不加删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;June&#x27;</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;]</span></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="forEach-或map方法对数组的每个元素执行一次给定的函数。循环"><a href="#forEach-或map方法对数组的每个元素执行一次给定的函数。循环" class="headerlink" title="forEach() 或map方法对数组的每个元素执行一次给定的函数。循环"></a><code>forEach()</code> 或<code>map</code>方法对数组的每个元素执行一次给定的函数。循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="comment">//arr.forEach(items , index , array)</span></span><br><span class="line">array1.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(element));</span><br></pre></td></tr></table></figure><h2 id="reverse-位置颠倒，该方法会改变原数组。"><a href="#reverse-位置颠倒，该方法会改变原数组。" class="headerlink" title="reverse() 位置颠倒，该方法会改变原数组。"></a><code>reverse()</code> 位置颠倒，该方法会改变原数组。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;array1:&#x27;</span>, array1);</span><br><span class="line"><span class="comment">// expected output: &quot;array1:&quot; Array [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"><span class="keyword">const</span> reversed = array1.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reversed:&#x27;</span>, reversed);</span><br><span class="line"><span class="comment">// expected output: &quot;reversed:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="sort-排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的"><a href="#sort-排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的" class="headerlink" title="sort() 排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的"></a><code>sort()</code> 排序，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象可以按照某个属性排序：</span></span><br><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Edward&#x27;</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Sharpe&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;And&#x27;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;The&#x27;</span>, <span class="attr">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Magnetic&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Zeros&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by value</span></span><br><span class="line">items.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (a.<span class="property">value</span> - b.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="互助可取之处"><a href="#互助可取之处" class="headerlink" title="互助可取之处"></a>互助可取之处</h1><h2 id="项目中要求可以拖拽element-UI-table-的表格"><a href="#项目中要求可以拖拽element-UI-table-的表格" class="headerlink" title="项目中要求可以拖拽element UI table 的表格"></a>项目中要求可以拖拽element UI table 的表格</h2><h3 id="使用-sortablejs-插件"><a href="#使用-sortablejs-插件" class="headerlink" title="使用 sortablejs 插件"></a>使用 sortablejs 插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sortablejs --save</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Sortable</span> <span class="keyword">from</span> <span class="string">&quot;sortablejs&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;table&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      ref=&quot;dragTable&quot;</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      border</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;el-button class=&quot;move&quot; type=&quot;text&quot; size=&quot;small&quot;&gt;拖 拽&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Sortable from &quot;sortablejs&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;1&quot;,</span><br><span class="line">          name: &quot;text_1&quot;,</span><br><span class="line">          date: &quot;1111-11-11&quot;,</span><br><span class="line">          address: &quot;测试_1&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;2&quot;,</span><br><span class="line">          name: &quot;text_2_不可拖拽&quot;,</span><br><span class="line">          date: &quot;2222-22-22&quot;,</span><br><span class="line">          address: &quot;测试_2_不可拖拽&quot;,</span><br><span class="line">          disabled: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;3&quot;,</span><br><span class="line">          name: &quot;text_3&quot;,</span><br><span class="line">          date: &quot;3333-33-33&quot;,</span><br><span class="line">          address: &quot;测试_3&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;4&quot;,</span><br><span class="line">          name: &quot;text_4&quot;,</span><br><span class="line">          date: &quot;4444-44-44&quot;,</span><br><span class="line">          address: &quot;测试_4&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;5&quot;,</span><br><span class="line">          name: &quot;text_5&quot;,</span><br><span class="line">          date: &quot;5555-55-55&quot;,</span><br><span class="line">          address: &quot;测试_5&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 创建sortable实例</span><br><span class="line">    initSortable() &#123;</span><br><span class="line">      // 获取表格row的父节点</span><br><span class="line">      const ele = this.$refs.dragTable.$el.querySelector(</span><br><span class="line">        &quot;.el-table__body &gt; tbody&quot;</span><br><span class="line">      );</span><br><span class="line">      // 创建拖拽实例</span><br><span class="line">      let dragTable = Sortable.create(ele, &#123;</span><br><span class="line">        animation: 150, //动画</span><br><span class="line">        disabled: false, // 拖拽不可用? false 启用（刚刚渲染表格的时候起作用，后面不起作用）</span><br><span class="line">        handle: &quot;.move&quot;, //指定拖拽目标，点击此目标才可拖拽元素(此例中设置操作按钮拖拽)</span><br><span class="line">        filter: &quot;.disabled&quot;, //指定不可拖动的类名（el-table中可通过row-class-name设置行的class）</span><br><span class="line">        dragClass: &quot;dragClass&quot;, //设置拖拽样式类名</span><br><span class="line">        ghostClass: &quot;ghostClass&quot;, //设置拖拽停靠样式类名</span><br><span class="line">        chosenClass: &quot;chosenClass&quot;, //设置选中样式类名</span><br><span class="line">        // 开始拖动事件</span><br><span class="line">        onStart: () =&gt; &#123;</span><br><span class="line">          console.log(&quot;开始拖动&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        // 结束拖动事件</span><br><span class="line">        onEnd: (&#123; newIndex, oldIndex &#125;) =&gt; &#123;</span><br><span class="line">          console.log(</span><br><span class="line">            &quot;结束拖动&quot;,</span><br><span class="line">            `拖动前索引$&#123;oldIndex&#125;---拖动后索引$&#123;newIndex&#125;`</span><br><span class="line">          );</span><br><span class="line">            const currRow = _this.tableData.splice(oldIndex, 1)[0];</span><br><span class="line">          this.tableData.splice(newIndex, 0, currRow);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 设置表格row的class</span><br><span class="line">    tableRowClassName(&#123; row &#125;) &#123;</span><br><span class="line">      if (row.disabled) &#123;</span><br><span class="line">        return &quot;disabled&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.initSortable();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">//注意如果加上scoped 样式就可能不起作用</span><br><span class="line">&lt;style lang=&#x27;scss&#x27;&gt;</span><br><span class="line">// 拖拽</span><br><span class="line">.dragClass &#123;</span><br><span class="line">  background: rgba($color: #41c21a, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">// 停靠</span><br><span class="line">.ghostClass &#123;</span><br><span class="line">  background: rgba($color: #6cacf5, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">// 选择</span><br><span class="line">.chosenClass:hover &gt; td &#123;</span><br><span class="line">  background: rgba($color: #f56c6c, $alpha: 0.5) !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="默认没有删除按钮-当数据长度大于一时显示"><a href="#默认没有删除按钮-当数据长度大于一时显示" class="headerlink" title="默认没有删除按钮,当数据长度大于一时显示"></a>默认没有删除按钮,当数据长度大于一时显示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(item,index) in formData.centreList&quot; :key=&quot;index&quot; class=&quot;fl w100 clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;fl w50&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div :class=&quot;[&#x27;fl&#x27;,formData.centreList.length&gt;1?&#x27;w40&#x27;:&#x27;w50&#x27;]&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;formData.centreList.length&gt;1&quot; class=&quot;fl w10 text_center&quot;&gt;</span><br><span class="line">        &lt;el-form-item label-width=&quot;0&quot;&gt;</span><br><span class="line">            &lt;el-button @click=&quot;deleteStore(index)&quot; type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fl &#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.w50 &#123;</span><br><span class="line">    width: 50%</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        display: block;</span><br><span class="line">        font-size: 0;</span><br><span class="line">        content: &quot; &quot;;</span><br><span class="line">        clear: both;</span><br><span class="line">        height: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="form表单组件化操作"><a href="#form表单组件化操作" class="headerlink" title="form表单组件化操作"></a>form表单组件化操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-form size=&quot;small&quot; :disabled=&quot;isDisabled&quot; ref=&quot;form&quot; :model=&quot;formData&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    sentFormData: &#123;</span><br><span class="line">      type: Object</span><br><span class="line">    &#125;,</span><br><span class="line">    isDisabled: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      formData: &#123;</span><br><span class="line">        proposerNameId: &quot;&quot;,</span><br><span class="line">        centreList: [</span><br><span class="line">          &#123;</span><br><span class="line">            warehouseId: &quot;&quot;,</span><br><span class="line">            counterIdList: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      oldFormData: &#123;</span><br><span class="line">        proposerNameId: &quot;&quot;,</span><br><span class="line"></span><br><span class="line">        centreList: [</span><br><span class="line">          &#123;</span><br><span class="line">            warehouseId: &quot;&quot;,</span><br><span class="line">            counterIdList: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">      //请求下拉框数据</span><br><span class="line">    this.fatchData();</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      //回显</span><br><span class="line">    var data = this.sentFormData;</span><br><span class="line">    if (data) &#123;</span><br><span class="line">      if (Object.keys(data).length == 0) &#123;</span><br><span class="line">        this.formData = this.oldFormData;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.formData.proposerNameId = data.proposerNameId;</span><br><span class="line">        if (data.associateName) &#123;</span><br><span class="line">          this.formData.associateName = data.associateName.adminId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.formData.taskName = data.taskName;</span><br><span class="line">        this.formData.checkTime = data.checkTime;</span><br><span class="line">        this.formData.checkPurposeId = data.checkPurposeId;</span><br><span class="line">        this.formData.associateNameId = data.associateNameId;</span><br><span class="line">        let centreList = [];</span><br><span class="line">        if (data.centreLists) &#123;</span><br><span class="line">          data.centreLists.map((item, index) =&gt; &#123;</span><br><span class="line">            getObjCodeById(item.warehouseId).then(response =&gt; &#123;</span><br><span class="line">              this.$set(this.collSelect, index, response.data);</span><br><span class="line">            &#125;);</span><br><span class="line">            centreList.push(&#123;</span><br><span class="line">              warehouseId: item.warehouseId,</span><br><span class="line">              counterIdList: item.counterIdList</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.formData.centreList = centreList;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    formData: &#123;</span><br><span class="line">      handler(data) &#123;</span><br><span class="line">        var newData = JSON.parse(JSON.stringify(data));</span><br><span class="line">        this.$emit(&quot;getFormData&quot;, newData);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //父传子 保存时验证方法</span><br><span class="line">    getRulesData() &#123;</span><br><span class="line">      let bl = false;</span><br><span class="line">      this.$refs.form.validate(valid =&gt; &#123;</span><br><span class="line">        bl = valid;</span><br><span class="line">      &#125;);</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: bl ? &quot;表单验证通过&quot; : &quot;请检查输入的表单是否有误&quot;,</span><br><span class="line">        data: bl</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h2 id="头部搜索"><a href="#头部搜索" class="headerlink" title="头部搜索"></a>头部搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-collapse-transition v-if=&quot;!Boolean(item.hidden)&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;(v, i) in item.items&quot; :key=&quot;v.id&quot;&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                v-if=&quot;item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active&quot;</span><br><span class="line">                class=&quot;isRegdateActive&quot;</span><br><span class="line">                @click=&quot;</span><br><span class="line">                  buttonAction(v.id, index,item),</span><br><span class="line">                    item.dataType == &#x27;regdate&#x27; &amp;&amp; dateFormat(v.fieldName, index)</span><br><span class="line">                &quot;</span><br><span class="line">                size=&quot;small&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &#123;&#123; v.name &#125;&#125;</span><br><span class="line">                  &lt;!--按钮旁边加数字  --&gt;</span><br><span class="line">                &lt;span</span><br><span class="line">                  style=&quot;padding-left: 5px&quot;</span><br><span class="line">                  v-else-if=&quot;</span><br><span class="line">                    sentNumebr &amp;&amp;</span><br><span class="line">                    index &lt; sentNumebr.length &amp;&amp;</span><br><span class="line">                    sentNumebr[index][i] &amp;&amp;</span><br><span class="line">                    sentNumebr[index][i] &gt;= 10000</span><br><span class="line">                  &quot;</span><br><span class="line">                  :title=&quot;v.num&quot;</span><br><span class="line">                  &gt;( &#123;&#123; sentNumebr[index][i] / 10000 +&quot;w&quot;&#125;&#125; )&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;!--按钮右上方激活打钩  --&gt;</span><br><span class="line">                &lt;div</span><br><span class="line">                  :style=&quot;&#123;</span><br><span class="line">                    height:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active ? &#x27;16px&#x27; : &#x27;0&#x27;,</span><br><span class="line">                    width:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active ? &#x27;16px&#x27; : &#x27;0&#x27;,</span><br><span class="line">                    borderTop:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active</span><br><span class="line">                        ? &#x27;16px solid #39ca74&#x27;</span><br><span class="line">                        : &#x27;0 solid #39ca74&#x27;,</span><br><span class="line">                    borderLeft:</span><br><span class="line">                      item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active</span><br><span class="line">                        ? &#x27;16px solid rgba(0, 0, 0, 0)&#x27;</span><br><span class="line">                        : &#x27;0 solid rgba(0, 0, 0, 0)&#x27;,</span><br><span class="line">                  &#125;&quot;</span><br><span class="line">                  class=&quot;select_data&quot;</span><br><span class="line">                &gt;&lt;/div&gt;</span><br><span class="line">                &lt;div</span><br><span class="line">                  v-if=&quot;item.dataType == &#x27;regdate&#x27; &amp;&amp; v.active&quot;</span><br><span class="line">                  class=&quot;el-icon-check check&quot;</span><br><span class="line">                &gt;&lt;/div&gt;</span><br><span class="line">              &lt;/el-button&gt;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">        &lt;!--箭头翻转  --&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">            v-show=&quot;item.iconShow&quot;</span><br><span class="line">            class=&quot;el-icon-arrow-down icon_arrow_style&quot;</span><br><span class="line">            style=&quot;float: right&quot;</span><br><span class="line">            :class=&quot;&#123;</span><br><span class="line">              icon_arrow__ami_default: item.iconDef,</span><br><span class="line">              icon_arrow__ami_rotate: !item.iconDef,</span><br><span class="line">            &#125;&quot;</span><br><span class="line">            @click=&quot;optionMoreCondition(index)&quot;</span><br><span class="line">          &gt;&lt;/i&gt;</span><br><span class="line">    &lt;/el-collapse-transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.isRegdateActive &#123;</span><br><span class="line">  width: 60px;</span><br><span class="line">  color: #39ca74;</span><br><span class="line">  border: 1px solid #39ca74;</span><br><span class="line">  background: #ecf8f0;</span><br><span class="line">  position: relative;</span><br><span class="line">  padding: 0;</span><br><span class="line">  line-height: 32px;</span><br><span class="line">  margin-left: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.check &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 1.3em;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 4px;</span><br><span class="line">  right: 0px;</span><br><span class="line">  font-size: 1px;</span><br><span class="line">  font-weight: 500;</span><br><span class="line">  color: #fff;</span><br><span class="line">  z-index: 1;</span><br><span class="line">&#125;</span><br><span class="line">.icon_arrow_style &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  right: 10px;</span><br><span class="line">  margin-top: -8px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="百度地图-＜baidu-map＞"><a href="#百度地图-＜baidu-map＞" class="headerlink" title="百度地图(＜baidu-map＞)"></a>百度地图(＜baidu-map＞)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i vue-baidu-map --save</span><br></pre></td></tr></table></figure><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 百度地图 Start*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaiduMap</span> <span class="keyword">from</span> <span class="string">&#x27;vue-baidu-map&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BaiduMap</span>, &#123;</span><br><span class="line">    <span class="attr">ak</span>: <span class="string">&#x27;bc4d824e9c0fef9cc375e45deace61d9&#x27;</span> <span class="comment">//官方提供的ak秘钥</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 百度地图 End*/</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;baidu-map</span><br><span class="line">    class=&quot;map&quot;</span><br><span class="line">    :center=&quot;arrObj[0].center&quot;</span><br><span class="line">    :zoom=&quot;zoom&quot;</span><br><span class="line">    :scroll-wheel-zoom=&quot;true&quot;</span><br><span class="line">    style=&quot;height: 100%; width: 100%&quot;</span><br><span class="line">    @ready=&quot;handler&quot;</span><br><span class="line">    @click=&quot;getClickInfo&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;bm-marker</span><br><span class="line">      v-for=&quot;(obj, index) in arrObj&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :position=&quot;obj.center&quot;</span><br><span class="line">      :dragging=&quot;true&quot;</span><br><span class="line">      animation=&quot;BMAP_ANIMATION_BOUNCE&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;bm-label</span><br><span class="line">        :content=&quot;obj.title&quot;</span><br><span class="line">        :labelStyle=&quot;&#123; color: &#x27;red&#x27;, fontSize: &#x27;16px&#x27; &#125;&quot;</span><br><span class="line">        :offset=&quot;obj.box&quot;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 必须给容器指高度，不然地图将显示在一个高度为0的容器中，看不到 --&gt;</span><br><span class="line">      &lt;bm-navigation anchor=&quot;BMAP_ANCHOR_TOP_RIGHT&quot;&gt;&lt;/bm-navigation&gt;</span><br><span class="line">      &lt;bm-geolocation</span><br><span class="line">        anchor=&quot;BMAP_ANCHOR_BOTTOM_RIGHT&quot;</span><br><span class="line">        :showAddressBar=&quot;true&quot;</span><br><span class="line">        :autoLocation=&quot;true&quot;</span><br><span class="line">      &gt;&lt;/bm-geolocation&gt;</span><br><span class="line">      &lt;bm-city-list anchor=&quot;BMAP_ANCHOR_TOP_LEFT&quot;&gt;&lt;/bm-city-list&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 因为我采用的是全局注册，所以不用再在该页面上注册components --&gt;</span><br><span class="line">    &lt;/bm-marker&gt;</span><br><span class="line">  &lt;/baidu-map&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;MapBaidu&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    sentData: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return [</span><br><span class="line">           &#123;</span><br><span class="line">          title: &quot;广州海事博物馆&quot;,</span><br><span class="line">          center: &#123; lng: 113.508252, lat: 23.084856 &#125;,</span><br><span class="line">          box: &#123; width: -40, height: -30 &#125;,</span><br><span class="line">          zoom: 20,</span><br><span class="line">        &#125;,</span><br><span class="line">        ];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      center: &#123; lng: 0, lat: 0 &#125;, //经纬度</span><br><span class="line">      zoom: 20000, //地图展示级别</span><br><span class="line">      arrObj: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    sentData: &#123;</span><br><span class="line">      handler(newVal) &#123;</span><br><span class="line">        this.arrObj=newVal</span><br><span class="line">        this.$set(this.center, &quot;lng&quot;, newVal[0].center);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handler(&#123; BMap, map &#125;) &#123;</span><br><span class="line">      /*  console.log(BMap, map); */</span><br><span class="line">     </span><br><span class="line">      this.zoom = this.zoom;</span><br><span class="line">    &#125;,</span><br><span class="line">    getClickInfo(e) &#123;</span><br><span class="line">      /*   console.log(e.point.lng);</span><br><span class="line">      console.log(e.point.lat);</span><br><span class="line">      this.center.lng = e.point.lng;</span><br><span class="line">      this.center.lat = e.point.lat; */</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二次确认-confirm"><a href="#二次确认-confirm" class="headerlink" title="二次确认,$confirm"></a>二次确认,$confirm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//收藏藏品</span></span><br><span class="line"><span class="title function_">setCollect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;是否收藏该藏品?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setCollectById</span>(<span class="variable language_">this</span>.<span class="property">getSelectIDData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">successDailogMessage</span>(<span class="string">&quot;收藏成功&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;已取消&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="分片上传、秒传及断点续传"><a href="#分片上传、秒传及断点续传" class="headerlink" title="分片上传、秒传及断点续传"></a>分片上传、秒传及断点续传</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">npm install vue-simple-uploader --save</span><br><span class="line">m install --save spark-md5</span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> uploader <span class="keyword">from</span> <span class="string">&#x27;vue-simple-uploader&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(uploader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SparkMd5</span> <span class="keyword">from</span> <span class="string">&quot;spark-md5&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">SparkMd5</span> = <span class="title class_">SparkMd5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码使用</span></span><br><span class="line">src\components\<span class="title class_">UCondition</span>\resourcesUpload.<span class="property">vue</span></span><br></pre></td></tr></table></figure><h2 id="Vue——右键弹出菜单-vue-contextmenu"><a href="#Vue——右键弹出菜单-vue-contextmenu" class="headerlink" title="Vue——右键弹出菜单(vue-contextmenu)"></a>Vue——右键弹出菜单(vue-contextmenu)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装：</span></span><br><span class="line">npm install vue-contextmenu --save</span><br><span class="line"><span class="comment">//引入：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueContextMenu</span> <span class="keyword">from</span> <span class="string">&#x27;vue-contextmenu&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueContextMenu</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; @contextmenu=&quot;showMenu&quot;</span><br><span class="line">    style=&quot;width: 100px;height: 100px;margin-top: 20px;background: red;&quot;&gt;</span><br><span class="line">    &lt;vue-context-menu :contextMenuData=&quot;contextMenuData&quot;</span><br><span class="line">        @home=&quot;home&quot;</span><br><span class="line">        @deletedata=&quot;deletedata&quot;&gt;&lt;/vue-context-menu&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;app&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    // 菜单数据</span><br><span class="line">       contextMenuData: &#123;</span><br><span class="line">         menuName: &#x27;demo&#x27;,</span><br><span class="line">         //菜单显示的位置</span><br><span class="line">         axis: &#123;</span><br><span class="line">           x: null,</span><br><span class="line">           y: null</span><br><span class="line">         &#125;,</span><br><span class="line">         //菜单选项</span><br><span class="line">         menulists: [&#123;</span><br><span class="line">           fnHandler: &#x27;home&#x27;, //绑定事件</span><br><span class="line">           icoName: &#x27;fa fa-home fa-fw&#x27;, //icon图标</span><br><span class="line">           btnName: &#x27;回到主页&#x27; //菜单名称</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">             fnHandler: &#x27;deletedata&#x27;,</span><br><span class="line">             icoName: &#x27;fa fa-minus-square-o  fa-fw&#x27;,</span><br><span class="line">             btnName: &#x27;删除布局&#x27;</span><br><span class="line">         &#125;]</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showMenu () &#123;</span><br><span class="line">        event.preventDefault()</span><br><span class="line">        var x = event.clientX</span><br><span class="line">        var y = event.clientY</span><br><span class="line">        // Get the current location</span><br><span class="line">      this.contextMenuData.axis = &#123;</span><br><span class="line">        x, y</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    homed () &#123;</span><br><span class="line">      alert(&quot;主页&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    deletedata () &#123;</span><br><span class="line">      console.log(&#x27;delete!&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="element-ui-为内数据-添加数字千位分割符10-000"><a href="#element-ui-为内数据-添加数字千位分割符10-000" class="headerlink" title="element-ui 为内数据 添加数字千位分割符10,000"></a><a href="https://www.cnblogs.com/taoshaoji/p/elementUI_.html">element-ui 为内数据 添加数字千位分割符10,000</a></h2><h2 id="vue图片点击放大预览v-viewer"><a href="#vue图片点击放大预览v-viewer" class="headerlink" title="vue图片点击放大预览v-viewer"></a><a href="https://www.jianshu.com/p/84042c7b1b5b">vue图片点击放大预览v-viewer</a></h2><h2 id="基于Vue实现可以拖拽的树形表格"><a href="#基于Vue实现可以拖拽的树形表格" class="headerlink" title="基于Vue实现可以拖拽的树形表格"></a><a href="https://www.cnblogs.com/bfgis/p/9805928.html">基于Vue实现可以拖拽的树形表格</a></h2><h2 id="Vue图片放大镜插件"><a href="#Vue图片放大镜插件" class="headerlink" title="Vue图片放大镜插件"></a><a href="https://blog.csdn.net/qq_40631679/article/details/107272569">Vue图片放大镜插件</a></h2><h2 id="使用vuetify-UI框架"><a href="#使用vuetify-UI框架" class="headerlink" title="使用vuetify UI框架"></a>使用vuetify UI框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vuetify</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuetify</span> <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span> <span class="comment">// 使用vuetify UI框架</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vuetify/dist/vuetify.min.css&#x27;</span> <span class="comment">// 导入 vuetify样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/styles/index.scss&#x27;</span> <span class="comment">// 导入 vuetify样式</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuetify</span>) <span class="comment">// 使用 vuetify</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuetify</span>(&#123;&#125;) <span class="comment">// 导出vuetify对象 不然会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">vuetify</span>: <span class="keyword">new</span> <span class="title class_">Vuetify</span>(),</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="使用swiper框架"><a href="#使用swiper框架" class="headerlink" title="使用swiper框架"></a>使用swiper框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm install swiper@<span class="number">3.4</span><span class="number">.2</span> --save-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/dist/css/swiper.css&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="手机端适配"><a href="#手机端适配" class="headerlink" title="手机端适配"></a>手机端适配</h1><h2 id="起手是使用-响应式栅格xs、sm、md、lg-和-xl"><a href="#起手是使用-响应式栅格xs、sm、md、lg-和-xl" class="headerlink" title="起手是使用 响应式栅格xs、sm、md、lg 和 xl"></a>起手是使用 响应式栅格<code>xs、sm、md、lg 和 xl</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    onResize() &#123;</span><br><span class="line">//存储数据到vuex</span><br><span class="line">        this.$store.dispatch(&#123;</span><br><span class="line">            type: &quot;changeBrowserStyle&quot;,</span><br><span class="line">            data: window.innerWidth,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">//监听屏幕变化</span><br><span class="line">    this.onResize();</span><br><span class="line">    window.addEventListener(&quot;resize&quot;, this.onResize, &#123; passive: true &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">window.removeEventListener(&quot;resize&quot;, this.onResize);</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">//vuex</span><br><span class="line">&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    mobile: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    isMobile: state =&gt; &#123;</span><br><span class="line">      return state.mobile</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    change_BrowserStyle(state, obj) &#123;</span><br><span class="line"></span><br><span class="line">      // 变更状态</span><br><span class="line">      if (obj.data &lt; 600) &#123;</span><br><span class="line">        state.mobile = true;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 600 &amp;&amp; obj.data &lt; 960) &#123;</span><br><span class="line">        state.mobile = true;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 960 &amp;&amp; obj.data &lt; 1264) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 1264 &amp;&amp; obj.data &lt; 1904) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (obj.data &gt;= 1904) &#123;</span><br><span class="line">        state.mobile = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeBrowserStyle(&#123; commit &#125;, obj) &#123;</span><br><span class="line">      commit(&#x27;change_BrowserStyle&#x27;, obj)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="为什么选择Vue？"><a href="#为什么选择Vue？" class="headerlink" title="为什么选择Vue？"></a>为什么选择Vue？</h2><p>Vue的三大特性：</p><p>　　易用：是中国人写的,有好的中文文档,容易上手,市面上的招聘多</p><p>　　灵活：可以在库和框架之间灵活切换，这个也是Vue 的渐进式而言</p><p>　　高效：20KB运行大小；超快的虚拟dom</p><h2 id="vue解决了什么"><a href="#vue解决了什么" class="headerlink" title="vue解决了什么"></a>vue解决了什么</h2><p>然后开始学习ECMAScript6，Webpack，NPM以及Vue-Cli的基本用法，最好对Node.js也要有所了解。</p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><p>beforeCreate(创建前):可以在这加个loading事件，在加载实例时触发</p><p>created(创建后):请求数据,获取数据,数据的回显</p><p>beforeMount(载入前) :</p><p>mounted(载入后) :cavas</p><p>beforeUpdate(更新前) </p><p>updated（更新后) </p><p>beforeDestroy(销毁前) :自定义的一些方法,释放内存</p><p>destroyed（销毁后)</p><p>this.$<em>nextTick</em>():获取输入框的焦点</p><h2 id="v-if跟v-show的区别"><a href="#v-if跟v-show的区别" class="headerlink" title="v-if跟v-show的区别"></a>v-if跟v-show的区别</h2><h2 id="vue组件通信几种方式"><a href="#vue组件通信几种方式" class="headerlink" title="vue组件通信几种方式"></a>vue组件通信几种方式</h2><p>content,introduce,stayCondition,mainBody,activityContent,details,overViewContent,questContent</p>]]></content>
      
      
      <categories>
          
          <category> 说明书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp开发,遇坑填坑 😘</title>
      <link href="/post/11314.html"/>
      <url>/post/11314.html</url>
      
        <content type="html"><![CDATA[<h1 id="登录输入框样式"><a href="#登录输入框样式" class="headerlink" title="登录输入框样式"></a>登录输入框样式</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../static/images/common/phone.png&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的手机号码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputnone&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../static/images/common/lock.png&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入短信验证码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sms_captcha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputnone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mcsure&quot;</span> <span class="attr">v-if</span>=<span class="string">&#x27;showcount&#x27;</span>&gt;</span></span><br><span class="line">        &#123;&#123;thiscount&#125;&#125;s重新获取</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mcsure&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;checkyzm&#x27;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        获取验证码</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login_input</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">580</span>rpx;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100</span>rpx;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login_input</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login_input</span> image&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">32</span>rpx <span class="number">32</span>rpx <span class="number">32</span>rpx <span class="number">0</span> ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">32</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加验证码倒计时功能</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">checkyzm</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phone</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$toast</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入正确的手机号码&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">user</span>.<span class="title function_">sendCaptcha</span>(&#123;</span><br><span class="line">            <span class="attr">phone</span>: <span class="variable language_">this</span>.<span class="property">phone</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">showcount</span> = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$toast</span>.<span class="title function_">text</span>(<span class="string">&#x27;短信验证码发送成功&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">startcount</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">startcount</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> start=<span class="number">60</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">thiscount</span> = start</span><br><span class="line">   <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">   <span class="keyword">var</span> myVar = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       that.<span class="property">thiscount</span> = that.<span class="property">thiscount</span> -<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span>(that.<span class="property">thiscount</span>==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="built_in">clearInterval</span>(myVar);</span><br><span class="line">           that.<span class="property">showcount</span> = <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//登录前做输入检验</span></span><br><span class="line"><span class="title function_">checkForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phone</span>) &#123;</span><br><span class="line">        uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;请输入正确的手机号&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">sms_captcha</span>) &#123;</span><br><span class="line">        uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;请输入正确的验证码&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> params = &#123;</span><br><span class="line">            <span class="attr">phone</span>: <span class="variable language_">this</span>.<span class="property">phone</span>,</span><br><span class="line">            <span class="attr">sms_captcha</span>: <span class="variable language_">this</span>.<span class="property">sms_captcha</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//登录前做弹出框提示</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">gotoaddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> params = <span class="variable language_">this</span>.<span class="title function_">checkForm</span>()</span><br><span class="line">     <span class="keyword">if</span> (!params) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$global</span>.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;登录中&#x27;</span>, <span class="attr">mask</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">news</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">user</span>.<span class="title function_">loginChkLogin</span>(params)</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">news</span>)</span><br><span class="line">         uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">             <span class="attr">url</span>: <span class="string">&#x27;./user/tab_bar/main&#x27;</span></span><br><span class="line">         &#125;)</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$global</span>.<span class="title function_">hideLoading</span>()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotogoodsdetails</span>(<span class="params">id</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">var</span> myVar = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        that.<span class="property">showpage</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">EndTime</span>= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="built_in">parseInt</span>(that.<span class="property">freetime</span>) * <span class="number">1000</span>); <span class="comment">//获取截止时间戳</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NowTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> t =<span class="title class_">EndTime</span>.<span class="title function_">getTime</span>() - <span class="title class_">NowTime</span>.<span class="title function_">getTime</span>();</span><br><span class="line">        <span class="keyword">var</span> d=<span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">var</span> h=<span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">var</span> m=<span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">1000</span>/<span class="number">60</span>%<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">var</span> s=<span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">1000</span>%<span class="number">60</span>);</span><br><span class="line">        that.<span class="property">nowtime</span> = (d*<span class="number">24</span>+h) + <span class="string">&quot; 时 &quot;</span> + m + <span class="string">&quot; 分 &quot;</span> + s + <span class="string">&quot; 秒&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(t/<span class="number">1000</span>)==<span class="number">0</span>)&#123;<span class="comment">//当倒计时到零时</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myVar&#x27;</span>,myVar)</span><br><span class="line">            <span class="built_in">clearInterval</span>(myVar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="uniappAndroid微信支付"><a href="#uniappAndroid微信支付" class="headerlink" title="uniappAndroid微信支付"></a>uniappAndroid微信支付</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/微信支付报错.jpg" alt="1"></p><p><img src= "/img/loading.gif" data-lazy-src="/img/微信支付后台填写包名签名.png" alt="2"></p><p>前端代码没啥要改的了，就是要在微信支付后台填写包名签名</p><p>即生成keystore（证书）文件的工具叫做 keytool，安装java环境应该就有</p><p>生成keystore文件命令：<br>keytool -genkey -alias key0 -keyalg RSA -keystore keystore.jks -keysize 2048 -validity 10000</p><p>查看keystore文件命令：<br>keytool -list -v -keystore keystore.jks</p><p>签名为MD5文字去掉冒号</p><p><img src= "/img/loading.gif" data-lazy-src="/img/签名.jpg" alt="3"></p><p>包名即应用打包的包名</p><p><img src= "/img/loading.gif" data-lazy-src="/img/包名.png" alt="4"></p><h1 id="uniapp阻止事件冒泡-click-stop失效"><a href="#uniapp阻止事件冒泡-click-stop失效" class="headerlink" title="uniapp阻止事件冒泡@click.stop失效"></a>uniapp阻止事件冒泡@click.stop失效</h1><p>配合.native使用：@click.native.stop</p><h1 id="关于vue-里-class-的几种使用方式"><a href="#关于vue-里-class-的几种使用方式" class="headerlink" title="关于vue 里:class 的几种使用方式"></a>关于vue 里:class 的几种使用方式</h1><p>以三元表达式来表示class 类名要加’冒号‘</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;item.functions?&#x27;list_item_name_items&#x27;:&#x27;list_item_name_item&#x27;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.cn_name&quot;</span>&gt;</span>&#123;&#123; item.cn_name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果存在两个动态class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;allCommon&quot;</span>  <span class="attr">:class</span>=<span class="string">&quot;[_module,&#123;&#x27;takePlace&#x27;:!arr.con.htmlData&#125;]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-伪类-not-用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation-pseudo-class）。"><a href="#CSS-伪类-not-用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation-pseudo-class）。" class="headerlink" title="CSS 伪类 :not() 用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation pseudo-class）。"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">伪类</a> <strong><code>:not()</code></strong> 用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为<em>反选伪类</em>（<em>negation pseudo-class</em>）。</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &amp;_items<span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>))<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">     <span class="attribute">display</span>: inline;</span><br><span class="line"> &#125;</span><br><span class="line">svg<span class="selector-class">.menu</span> &gt; g<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &gt; path &#123;</span><br><span class="line">    fill: <span class="number">#ffaec9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue项目中使用scss-sass"><a href="#vue项目中使用scss-sass" class="headerlink" title="vue项目中使用scss/sass"></a>vue项目中使用scss/sass</h1><p>1、安装scss 跟 scss-loader</p><blockquote><p>npm install scss-loader scss —save-dev</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    <span class="selector-class">.Myfollow</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">        <span class="selector-class">.text</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2、安装node-sass 跟 sass-loader</p><blockquote><p>npm install sass-loader node-sass —save-dev</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;sass&quot; scoped&gt;</span><br><span class="line">    <span class="selector-class">.Myfollow</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">        <span class="selector-class">.text</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="JS中find方法"><a href="#JS中find方法" class="headerlink" title="JS中find方法"></a>JS中find方法</h1><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>1.find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p>2.如果没有符合条件的元素返回 undefined</p><p>3.find() 对于空数组，函数是不会执行的。</p><p>4.find() 并没有改变数组的原始值。</p><p>5.array.find(function(currentValue, index, arr),thisValue)，其中currentValue为当前项，index为当前索引，arr为当前数组</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> a = test.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = test.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item == <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h1 id="javascript获取url参数"><a href="#javascript获取url参数" class="headerlink" title="javascript获取url参数"></a>javascript获取url参数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://abc.com:8080/dir/index.html?id=255</span></span><br><span class="line"><span class="keyword">const</span> parsedUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> allparser = &#123;&#125;</span><br><span class="line">parsedUrl.<span class="title function_">forEach</span>(<span class="function">(<span class="params">query</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;key&#x27;,query.split(&quot;=&quot;)[0],&#x27;value&#x27;,query.split(&quot;=&quot;)[1])</span></span><br><span class="line">    <span class="comment">//key = id</span></span><br><span class="line">    <span class="keyword">let</span> key = query.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//value = 255</span></span><br><span class="line">    <span class="keyword">let</span> value = query.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    allparser[key] = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="uniapp进度条"><a href="#uniapp进度条" class="headerlink" title="uniapp进度条"></a><a href="https://uniapp.dcloud.io/component/progress?id=progress">uniapp进度条</a></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">percent</span>=<span class="string">&quot;20&quot;</span> <span class="attr">show-info</span> <span class="attr">stroke-width</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JS如何判断一个数组是否为空、是否含有某个值"><a href="#JS如何判断一个数组是否为空、是否含有某个值" class="headerlink" title="JS如何判断一个数组是否为空、是否含有某个值"></a><a href="https://www.cnblogs.com/crackedlove/p/10039939.html">JS如何判断一个数组是否为空、是否含有某个值</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">if</span> (arr.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组为空&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数组不为空&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue项目刷新当前页面的三种方法"><a href="#vue项目刷新当前页面的三种方法" class="headerlink" title="vue项目刷新当前页面的三种方法"></a><a href="https://www.jb51.net/article/151984.htm">vue项目刷新当前页面的三种方法</a></h1><p>新建一个空白页面back.vue，点击确定的时候先跳转到这个空白页，然后再立马跳转回来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/back&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;back&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>空白页back.vue里面的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//跳转回当前页面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个方式，相比第一种不会出现一瞬间的空白页，只是地址栏有个快速的切换的过程，可采用</p><h1 id="JS-字符串截取方法汇总（slice、substring、substr等）"><a href="#JS-字符串截取方法汇总（slice、substring、substr等）" class="headerlink" title="JS - 字符串截取方法汇总（slice、substring、substr等）"></a><a href="https://www.hangge.com/blog/cache/detail_1887.html">JS - 字符串截取方法汇总（slice、substring、substr等）</a></h1><h3 id="1、使用-slice-截取"><a href="#1、使用-slice-截取" class="headerlink" title="1、使用 slice() 截取"></a>1、使用 slice() 截取</h3><h4 id="1，函数说明"><a href="#1，函数说明" class="headerlink" title="1，函数说明"></a>1，函数说明</h4><p><strong>slice()</strong> 方法可通过指定的开始和结束位置，提取字符串的某个部分，并以新的字符串返回被提取的部分。语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.slice(start, end)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>start</strong>（必需）：规定从何处开始选取。如果是负数，那么它规定从字符串尾部开始算起的位置。也就是说，<strong>-1</strong> 指最后一个字符，<strong>-2</strong> 指倒数第二个字符，以此类推。</li><li><strong>end</strong>（可选）：规定从何处结束选取，即结束处的字符下标。如果没有指定该参数，那么截取的字符串包含从 <strong>start</strong> 到结束的所有字符。如果这个参数是负数，那么它规定的是从数组尾部开始算起的字符。</li></ul><h3 id="2，使用样例"><a href="#2，使用样例" class="headerlink" title="2，使用样例"></a>2，使用样例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原始字符串：&quot;</span>, str);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从索引为3的字符起一直到结束：&quot;</span>, str.<span class="title function_">slice</span>(<span class="number">3</span>));  <span class="comment">//3456789</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从倒数第3个字符起一直到结束：&quot;</span>, str.<span class="title function_">slice</span>(-<span class="number">3</span>));  <span class="comment">//789</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从开始一直到索引为5的前一个字符：&quot;</span>, str.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">5</span>));  <span class="comment">//01234</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从开始一直到倒数第3个字符的前一个字符：&quot;</span>, str.<span class="title function_">slice</span>(<span class="number">0</span>,-<span class="number">3</span>));  <span class="comment">//0123456</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从索引为3的字符起到索引为5的前一个字符：&quot;</span>, str.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">5</span>));  <span class="comment">//34</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从索引为3的字符起到倒数第3个字符的前一个字符：&quot;</span>, str.<span class="title function_">slice</span>(<span class="number">3</span>,-<span class="number">3</span>));  <span class="comment">//3456</span></span><br></pre></td></tr></table></figure><h1 id="免费在线条形码生成器-条码生成制作工具"><a href="#免费在线条形码生成器-条码生成制作工具" class="headerlink" title="免费在线条形码生成器-条码生成制作工具"></a><a href="http://barcode.cnaidc.com/html/BCGcode128b.php">免费在线条形码生成器-条码生成制作工具</a></h1><h1 id="js-时间戳转为日期格式"><a href="#js-时间戳转为日期格式" class="headerlink" title="js 时间戳转为日期格式"></a><a href="https://www.cnblogs.com/jingwhale/p/4674946.html">js 时间戳转为日期格式</a></h1><p>首次加载的时候，需要将时间戳转换为规定时间样式，可使用工具类utli.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add0</span>(<span class="params">m</span>)&#123;<span class="keyword">return</span> m&lt;<span class="number">10</span>?<span class="string">&#x27;0&#x27;</span>+<span class="attr">m</span>:m &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">js_date_time</span>(<span class="params">unixtime,type</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="built_in">parseInt</span>(unixtime) * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">var</span> year = dateTime.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = dateTime.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = dateTime.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> hour = dateTime.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="keyword">var</span> minute = dateTime.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">var</span> second = dateTime.<span class="title function_">getSeconds</span>();</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> now_new = <span class="title class_">Date</span>.<span class="title function_">parse</span>(now.<span class="title function_">toDateString</span>()); <span class="comment">//typescript转换写法</span></span><br><span class="line">  <span class="keyword">var</span> milliseconds = now_new - dateTime;</span><br><span class="line">  <span class="keyword">if</span>(type)&#123;</span><br><span class="line">    <span class="keyword">var</span> timeSpanStr = year + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">add0</span>(month) + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">add0</span>(day) + <span class="string">&#x27; &#x27;</span> + <span class="title function_">add0</span>(hour) + <span class="string">&#x27;:&#x27;</span> + <span class="title function_">add0</span>(minute) + <span class="string">&#x27;:&#x27;</span> + <span class="title function_">add0</span>(second);</span><br><span class="line">    <span class="keyword">return</span> timeSpanStr;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeSpanStr = year + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">add0</span>(month) + <span class="string">&#x27;-&#x27;</span> + <span class="title function_">add0</span>(day);</span><br><span class="line">    <span class="keyword">return</span> timeSpanStr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">js_date_time</span>: js_date_time</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用法(引入即可调用方法使用):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/util.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">pig</span>.<span class="property">add_time</span> = util.<span class="title function_">js_date_time</span>(result.<span class="property">add_time</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue-内联样式style中的background"><a href="#vue-内联样式style中的background" class="headerlink" title="vue 内联样式style中的background"></a><a href="https://www.cnblogs.com/WoAiZmm/p/8227797.html">vue 内联样式style中的background</a></h1><p>注意 在vue中直接使用style时 花括号一定别忘记</p><p>还有就是你的url一定要加引号拼接</p><p>：style = ‘ { backgroundImage : “ url ( “ + item.img + “ ) “ } ‘ </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot; &#x27;background-image&#x27; : &#x27; url( &#x27; + 内容+&#x27; ) &#x27; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="土豆图床"><a href="#土豆图床" class="headerlink" title="土豆图床"></a><a href="https://images.ac.cn/simple.html">土豆图床</a></h1><h1 id="uni-设置placeholder颜色"><a href="#uni-设置placeholder颜色" class="headerlink" title="uni 设置placeholder颜色"></a><a href="https://blog.csdn.net/qq_43840143/article/details/103609962">uni 设置placeholder颜色</a></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:placeholder</span>=&quot;nichengzhi&quot; placeholder-class=&quot;cl&quot;//给此属性上样式</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cl</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#BBBBBB</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="uniapp监听webview值的变动（引入页面的title）"><a href="#uniapp监听webview值的变动（引入页面的title）" class="headerlink" title="uniapp监听webview值的变动（引入页面的title）"></a>uniapp监听webview值的变动（引入页面的title）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态修改标题</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pig_house_id</span> = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">platform</span>.<span class="property">pig_house_id</span></span><br><span class="line">uni.<span class="title function_">setNavigationBarTitle</span>(&#123;</span><br><span class="line"><span class="attr">title</span>:<span class="variable language_">this</span>.<span class="property">pig_house_id</span>+<span class="string">&#x27;号猪舍&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="uni-app-打开外链网址和打开内部网页的方法"><a href="#uni-app-打开外链网址和打开内部网页的方法" class="headerlink" title="uni-app 打开外链网址和打开内部网页的方法"></a><a href="https://blog.csdn.net/haibo0668/article/details/86349504">uni-app 打开外链网址和打开内部网页的方法</a></h1><p>打开外链网址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-view</span> <span class="attr">src</span>=<span class="string">&quot;https://uniapp.dcloud.io/static/web-view.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="小程序-在手机上如果不打开调试模式-不能正常请求接口-打开调试模试就可以正常请求-真机测试和开发者工具都可以正常显示"><a href="#小程序-在手机上如果不打开调试模式-不能正常请求接口-打开调试模试就可以正常请求-真机测试和开发者工具都可以正常显示" class="headerlink" title="小程序:在手机上如果不打开调试模式,不能正常请求接口,打开调试模试就可以正常请求,真机测试和开发者工具都可以正常显示"></a><a href="https://blog.csdn.net/czkcui123/article/details/87614410">小程序:在手机上如果不打开调试模式,不能正常请求接口,打开调试模试就可以正常请求,真机测试和开发者工具都可以正常显示</a></h1><p>因为真机测试和开发者工具都会配置      不检验合法域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书</p><p><img src= "/img/loading.gif" data-lazy-src="/img/配置.png" alt="8"></p><p>所以如果想手机能打开的话，把你的域名写在request和uploadFile里,如果需要下载,也把downloadFile也加上,当然写这篇文章主要是为了解决不能上传的问题,</p><p>这样就解决问题啦</p><h1 id="JS中对象转数组方法总结"><a href="#JS中对象转数组方法总结" class="headerlink" title="JS中对象转数组方法总结"></a><a href="https://www.cnblogs.com/JiAyInNnNn/p/11451000.html">JS中对象转数组方法总结</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&#x27;nihao&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;haha&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;gansha&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[&quot;nihao&quot;,&quot;haha&quot;,&quot;gansha&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="js-判断是否为空对象、空数组"><a href="#js-判断是否为空对象、空数组" class="headerlink" title="js 判断是否为空对象、空数组"></a><a href="https://www.cnblogs.com/xxhuan/p/6582114.html">js 判断是否为空对象、空数组</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检验 undefined 和 null</span></span><br><span class="line"><span class="keyword">if</span>(!obj &amp;&amp; obj !== <span class="number">0</span> &amp;&amp; obj !== <span class="string">&#x27;&#x27;</span>) &#123;&lt;br&gt;　　　　　　　　　　</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) === <span class="string">&#x27;&#123;&#125;&#x27;</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) === <span class="string">&#x27;[]&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="微信小程序引用页面调用组件内的方法（父组件调用子组件的方法）"><a href="#微信小程序引用页面调用组件内的方法（父组件调用子组件的方法）" class="headerlink" title="微信小程序引用页面调用组件内的方法（父组件调用子组件的方法）"></a><a href="https://blog.csdn.net/Syleapn/article/details/94591977">微信小程序引用页面调用组件内的方法（父组件调用子组件的方法）</a></h1><p><img src= "/img/loading.gif" data-lazy-src="/img/fuzhujian.png" alt="5"></p><p><img src= "/img/loading.gif" data-lazy-src="/img/fangfa.png" alt="6"></p><p><img src= "/img/loading.gif" data-lazy-src="/img/zizj.png" alt="7"></p><h1 id="浅谈前端常见的数组和对象的遍历问题"><a href="#浅谈前端常见的数组和对象的遍历问题" class="headerlink" title="浅谈前端常见的数组和对象的遍历问题"></a><a href="https://blog.csdn.net/mapbar_front/article/details/81046819">浅谈前端常见的数组和对象的遍历问题</a></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS文本溢出显示省略号"><a href="#CSS文本溢出显示省略号" class="headerlink" title="CSS文本溢出显示省略号"></a><a href="https://www.cnblogs.com/best-coder/p/11550185.html"><a href="https://www.cnblogs.com/best-coder/p/11550185.html">CSS文本溢出显示省略号</a></a></h1><ul><li>-webkit-line-clamp 用来限制在一个块元素显示的文本的行数,这是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</li><li>display: -webkit-box 将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 设置或检索伸缩盒对象的子元素的排列方式 。</li><li>text-overflow: ellipsis 以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><h1 id="微信小程序分享功能"><a href="#微信小程序分享功能" class="headerlink" title="微信小程序分享功能"></a>微信小程序分享功能</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getCouponConfBg</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserId</span>();</span><br><span class="line">  <span class="comment">// let old_user_id = wx.getStorageSync(&#x27;user_id&#x27;);</span></span><br><span class="line">  <span class="comment">// this.setData(&#123; old_user_id: old_user_id &#125;);</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">onShow</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="comment">//微信小程序分享转发功能</span></span><br><span class="line"><span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">from</span> === <span class="string">&#x27;button&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this.data.shareurl&#x27;</span>, <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">old_user_id</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hidepickbox</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//修改标题</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;凯螺工友惠开启啦！快来领取最高500元大红包！！&#x27;</span>,</span><br><span class="line">    <span class="comment">//编写入口和参数</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/pages/index/index?old_user_id=&#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">old_user_id</span>,</span><br><span class="line">    <span class="comment">// 自定义分享图片，不写默认为当前页面截图</span></span><br><span class="line">    <span class="comment">// imageUrl:&#x27;https://ae01.alicdn.com/kf/H8e5cfc3b44d147c8a7b3eadec5560da3i.jpg&#x27;,</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="微信小程序分享二维码背景图，并自动保存下载下来"><a href="#微信小程序分享二维码背景图，并自动保存下载下来" class="headerlink" title="微信小程序分享二维码背景图，并自动保存下载下来"></a>微信小程序分享二维码背景图，并自动保存下载下来</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">&quot;shareCanvas&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;showdown&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&#x27;width:&#123;&#123;windowW&#125;&#125;px;height:&#123;&#123;windowH&#125;&#125;px&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; base64src &#125; <span class="keyword">from</span> <span class="string">&#x27;./b64.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">API</span> <span class="keyword">from</span> <span class="string">&#x27;../../api/api&#x27;</span>;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tempFilePath</span>:</span><br><span class="line">      <span class="string">&#x27;https://ae01.alicdn.com/kf/Hc004de7ec3744190812bbd5a28367104r.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">windowW</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">windowH</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">shareewmurl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">moment_bg</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">showdown</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getCouponConfBg</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getUserId</span>();</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//获取设备的宽高，全屏描画</span></span><br><span class="line">    wx.<span class="title function_">getSystemInfo</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">windowW</span>: res.<span class="property">windowWidth</span>,</span><br><span class="line">          <span class="attr">windowH</span>: res.<span class="property">windowHeight</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取用户ID</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserId</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable constant_">API</span>.<span class="title function_">couponFissionGetShareWxQRCode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">shareewmurl</span>: <span class="string">&#x27;data:image/png;base64,&#x27;</span> + res &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showimg</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取优惠券活动背景图</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getCouponConfBg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable constant_">API</span>.<span class="title function_">getCouponConfBg</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">moment_bg</span>: res.<span class="property">moment_bg</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">moment_bg</span>, <span class="string">&#x27;res&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">showimg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 根据id创建画布</span></span><br><span class="line">    <span class="keyword">const</span> ctx = wx.<span class="title function_">createCanvasContext</span>(<span class="string">&#x27;shareCanvas&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> rpxw = self.<span class="property">data</span>.<span class="property">windowW</span>;</span><br><span class="line">    <span class="keyword">var</span> rpxh = self.<span class="property">data</span>.<span class="property">windowH</span>;</span><br><span class="line">    <span class="comment">// 分两步走，第一步wx.downloadFile下载</span></span><br><span class="line">    wx.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: self.<span class="property">data</span>.<span class="property">moment_bg</span>, <span class="comment">//仅为示例，并非真实的资源</span></span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> path = res1.<span class="property">tempFilePath</span>;</span><br><span class="line">        <span class="comment">// base64转成img</span></span><br><span class="line">        <span class="title function_">base64src</span>(self.<span class="property">data</span>.<span class="property">shareewmurl</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">          <span class="comment">// 画下好的图片路径，开始x，y轴参数，画多宽，多高</span></span><br><span class="line">          ctx.<span class="title function_">drawImage</span>(path, <span class="number">0</span>, <span class="number">0</span>, rpxw, rpxh);</span><br><span class="line">          ctx.<span class="title function_">drawImage</span>(res, <span class="number">0.4</span> * rpxw, <span class="number">0.69</span> * rpxh, <span class="number">0.18</span> * rpxw, <span class="number">0.18</span> * rpxw);</span><br><span class="line">          ctx.<span class="title function_">draw</span>(</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 开始画画</span></span><br><span class="line">              wx.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">                <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">canvasId</span>: <span class="string">&#x27;shareCanvas&#x27;</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="comment">// 下载画好的图片</span></span><br><span class="line">                  wx.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">                    <span class="attr">filePath</span>: res.<span class="property">tempFilePath</span>,</span><br><span class="line">                    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&#x27;保存成功&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">2000</span> <span class="comment">//持续的时间</span></span><br><span class="line">                      &#125;);</span><br><span class="line"></span><br><span class="line">                      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">                          <span class="attr">url</span>: <span class="string">`/pages/share/index`</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;, <span class="number">500</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                      wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">                        <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                          <span class="keyword">if</span> (</span><br><span class="line">                            !res.<span class="property">authSetting</span> ||</span><br><span class="line">                            !res.<span class="property">authSetting</span>[<span class="string">&#x27;scrop.writePhotoAlbum&#x27;</span>]</span><br><span class="line">                          ) &#123;</span><br><span class="line">                            wx.<span class="title function_">openSetting</span>();</span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b64.js是将base64的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">FILE_BASE_NAME</span> = <span class="string">&#x27;tmp_base64src&#x27;</span>; <span class="comment">//自定义文件名</span></span><br><span class="line"><span class="keyword">const</span> fsm = wx.<span class="title function_">getFileSystemManager</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64src</span>(<span class="params">base64data, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [, format, bodyData] = <span class="regexp">/data:image\/(\w+);base64,(.*)/</span>.<span class="title function_">exec</span>(base64data) || [];</span><br><span class="line">  <span class="keyword">if</span> (!format) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;ERROR_BASE64SRC_PARSE&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="string">`<span class="subst">$&#123;wx.env.USER_DATA_PATH&#125;</span>/<span class="subst">$&#123;FILE_BASE_NAME&#125;</span>.<span class="subst">$&#123;format&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> buffer = wx.<span class="title function_">base64ToArrayBuffer</span>(bodyData);</span><br><span class="line">  fsm.<span class="title function_">writeFile</span>(&#123;</span><br><span class="line">    filePath,</span><br><span class="line">    <span class="attr">data</span>: buffer,</span><br><span class="line">    <span class="attr">encoding</span>: <span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(filePath);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;ERROR_BASE64SRC_WRITE&#x27;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; base64src &#125;;</span><br></pre></td></tr></table></figure><h1 id="uni-app-中保持用户登录状态"><a href="#uni-app-中保持用户登录状态" class="headerlink" title="uni-app 中保持用户登录状态"></a>uni-app 中保持用户登录状态</h1><p>登录成功时，调用uni.setStorage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">gotoaddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> params = <span class="variable language_">this</span>.<span class="title function_">checkForm</span>()</span><br><span class="line">        <span class="keyword">if</span> (!params) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$global</span>.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;登录中&#x27;</span>, <span class="attr">mask</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">news</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">user</span>.<span class="title function_">loginChkLogin</span>(params)</span><br><span class="line">          uni.<span class="title function_">setStorage</span>(&#123;<span class="comment">//将用户信息保存在本地</span></span><br><span class="line">              <span class="attr">key</span>: <span class="string">&#x27;uerInfo&#x27;</span>,</span><br><span class="line">              <span class="attr">data</span>: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">news</span>)</span><br><span class="line">          uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;./user/tab_bar/main&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$global</span>.<span class="title function_">hideLoading</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">           <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">           <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>back.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    uni.<span class="title function_">getStorage</span>(&#123;<span class="comment">//获得保存在本地的用户信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&#x27;uerInfo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uerInfo&#x27;</span>,res.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">if</span>(res.<span class="property">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             uni.<span class="title function_">switchTab</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">url</span>: <span class="string">&#x27;./user/tab_bar/main&#x27;</span></span></span><br><span class="line"><span class="language-javascript">             &#125;)</span></span><br><span class="line"><span class="language-javascript">           &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">             uni.<span class="title function_">navigateTo</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">url</span>: <span class="string">&#x27;./platform/tab_bar/main&#x27;</span></span></span><br><span class="line"><span class="language-javascript">             &#125;)</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="attr">fail</span>:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uerInfo&#x27;</span>,res)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            uni.<span class="title function_">navigateTo</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;./login&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="uniapp标题不想要返回按钮-lt"><a href="#uniapp标题不想要返回按钮-lt" class="headerlink" title="uniapp标题不想要返回按钮 &lt;"></a>uniapp标题不想要返回按钮 &lt;</h1><p>物理隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;pages/platform/tab_bar/main&quot;</span>,</span><br><span class="line">      <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">        <span class="string">&quot;app-plus&quot;</span>:&#123;          <span class="comment">//App端扩展配置</span></span><br><span class="line">                 <span class="string">&quot;titleNView&quot;</span>:&#123;<span class="comment">//原生导航栏配置参数</span></span><br><span class="line">                     <span class="string">&quot;backButton&quot;</span>:&#123;</span><br><span class="line">                       <span class="string">&quot;color&quot;</span>:<span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;colorPressed&quot;</span>:<span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">                     &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>功能清除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onBackPress</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="扫码登记"><a href="#扫码登记" class="headerlink" title="扫码登记"></a>扫码登记</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许从相机和相册扫码</span></span><br><span class="line">   <span class="title function_">scanCode</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">// #ifndef H5</span></span><br><span class="line">       <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">       uni.<span class="title function_">scanCode</span>(&#123;</span><br><span class="line">           <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res1</span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;条码类型：&#x27;</span> + res1.<span class="property">scanType</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;条码内容：&#x27;</span> + res1.<span class="property">result</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;条码字符集：&#x27;</span> + res1.<span class="property">charSet</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">               uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                   <span class="attr">title</span>: <span class="string">&#x27;条码类型：&#x27;</span> + res1.<span class="property">scanType</span> + <span class="string">&quot;&quot;</span>,</span><br><span class="line">                   <span class="attr">content</span>: <span class="string">&#x27;条码内容：&#x27;</span> + res1.<span class="property">result</span> + <span class="string">&quot;&quot;</span>,</span><br><span class="line">                   <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                         that.<span class="property">user</span>.<span class="property">pk_no</span> = res1.<span class="property">result</span></span><br><span class="line">                           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户点击确定&#x27;</span>);</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户点击取消&#x27;</span>);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">fail</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;扫描fail：&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e));</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;扫描complete&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">// #endif</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><h1 id="获取当前年月日"><a href="#获取当前年月日" class="headerlink" title="获取当前年月日"></a>获取当前年月日</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">nowday</span>:<span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nowday</span> = myDate.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span> + (myDate.<span class="title function_">getMonth</span>() + <span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span> + myDate.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="comment">// 获取当前时间戳</span></span><br><span class="line">    <span class="comment">// new Date() new一个data对象，当前日期和时间</span></span><br><span class="line">    <span class="comment">// toLocaleString() 方法可根据本地时间把 Date 对象转换为字符串，并返回结果。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nowtime</span> = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()/<span class="number">1000</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="uniapp当前进层级太深时，拦截监听，重定向"><a href="#uniapp当前进层级太深时，拦截监听，重定向" class="headerlink" title="uniapp当前进层级太深时，拦截监听，重定向"></a>uniapp当前进层级太深时，拦截监听，重定向</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onBackPress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./tab_bar/mine&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="uniapp下拉选择"><a href="#uniapp下拉选择" class="headerlink" title="uniapp下拉选择"></a>uniapp下拉选择</h1><p>普通输入框必须禁止输入，添加disabled 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inputbox flcm pickbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label fsize28l&quot;</span>&gt;</span>品种：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker</span> @<span class="attr">change</span>=<span class="string">&quot;bindPickerTypeChange&quot;</span> <span class="attr">:range</span>=<span class="string">&quot;typearray&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输选择&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;result.type_name&quot;</span> <span class="attr">disabled</span> <span class="attr">class</span>=<span class="string">&quot;standard smallinput&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../../static/images/platform/down.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img32 pickdownbtn&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">typearray</span>:[<span class="string">&#x27;大白猪&#x27;</span>,<span class="string">&#x27;长白猪&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">bindPickerTypeChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">result</span>.<span class="property">type_name</span> = <span class="variable language_">this</span>.<span class="property">typearray</span>[e.<span class="property">target</span>.<span class="property">value</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间选择器picker的mode=”date”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inputbox flcm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label fsize28l&quot;</span>&gt;</span>出生日期：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">&quot;date&quot;</span>  @<span class="attr">change</span>=<span class="string">&quot;bindDateChange&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入内容&quot;</span> <span class="attr">class</span>=<span class="string">&quot;standard&quot;</span> <span class="attr">disabled</span> <span class="attr">v-model</span>=<span class="string">&quot;result.birthdate&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">bindDateChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span>.<span class="property">birthdate</span> = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">nowday</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="uniapp导航栏示例应用"><a href="#uniapp导航栏示例应用" class="headerlink" title="uniapp导航栏示例应用"></a><a href="https://ext.dcloud.net.cn/plugin?id=1765">uniapp导航栏示例应用</a></h1><p>导航栏右上角回到首页样式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/doctor/prescription_add_success&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提交成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;app-plus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;titleNView&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;padding-right&quot;</span><span class="punctuation">:</span><span class="string">&quot;6px&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;buttons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;home&quot;</span></span><br><span class="line">             <span class="punctuation">&#125;</span></span><br><span class="line">           <span class="punctuation">]</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>功能实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="comment">//监听右上角点击事件</span></span><br><span class="line">      <span class="title function_">onNavigationBarButtonTap</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;./main&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">gohome</span>(<span class="params"></span>)&#123;</span><br><span class="line">        uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;./main&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="filter-方法创建一个新的数组，里面元素是通过检查指定数组中符合条件的所有元素。"><a href="#filter-方法创建一个新的数组，里面元素是通过检查指定数组中符合条件的所有元素。" class="headerlink" title="filter() 方法创建一个新的数组，里面元素是通过检查指定数组中符合条件的所有元素。"></a>filter() 方法创建一个新的数组，里面元素是通过检查指定数组中符合条件的所有元素。</h1><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p><p><strong>注意：</strong> filter() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组 ages 中所有元素都大于 18 的元素:</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 32,33,40</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">filter</span>(checkAdult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FinalShell云服务器命令行-文件上传下载一体"><a href="#FinalShell云服务器命令行-文件上传下载一体" class="headerlink" title="FinalShell云服务器命令行+文件上传下载一体"></a><a href="http://www.hostbuf.com/t/988.html">FinalShell云服务器命令行+文件上传下载一体</a></h1><h1 id="uni-ui的使用"><a href="#uni-ui的使用" class="headerlink" title="uni-ui的使用"></a><a href="https://github.com/dcloudio/uni-ui">uni-ui的使用</a></h1><p><strong>安装 uni-ui</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @dcloudio/uni-ui</span><br></pre></td></tr></table></figure><p>在 <code>script</code> 中引用组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;uniNoticeBar&#125; <span class="keyword">from</span> <span class="string">&#x27;@dcloudio/uni-ui&#x27;</span></span><br><span class="line"><span class="comment">//import uniNoticeBar from &#x27;@dcloudio/uni-ui/lib/uni-badge/uni-badge.vue&#x27; //也可使用此方式引入组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;uniNoticeBar&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>template</code> 中使用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-notice-bar</span> <span class="attr">single</span>=<span class="string">&quot;true&quot;</span> <span class="attr">text</span>=<span class="string">&quot;[单行] 这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-notice-bar</span> <span class="attr">text</span>=<span class="string">&quot;[多行] 这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文字滚动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-notice-bar</span> <span class="attr">scrollable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">single</span>=<span class="string">&quot;true&quot;</span> <span class="attr">text</span>=<span class="string">&quot;[单行] 这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-notice-bar</span> <span class="attr">showIcon</span>=<span class="string">&quot;true&quot;</span> <span class="attr">text</span>=<span class="string">&quot;[多行] 这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示关闭按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uni-notice-bar</span> <span class="attr">showClose</span>=<span class="string">&quot;true&quot;</span> <span class="attr">showIcon</span>=<span class="string">&quot;true&quot;</span> <span class="attr">text</span>=<span class="string">&quot;这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查看更多 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">uni-notice-bar</span> @<span class="attr">getmore</span>=<span class="string">&quot;getMore&quot;</span> <span class="attr">:showGetMore</span>=<span class="string">&quot;true&quot;</span> <span class="attr">moreText</span>=<span class="string">&quot;查看更多&quot;</span> <span class="attr">single</span>=<span class="string">&quot;true&quot;</span> <span class="attr">text</span>=<span class="string">&quot;[单行] 这是 NoticeBar 通告栏，这是 NoticeBar 通告栏，这是 NoticeBar 通告栏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-notice-bar</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h1><p>Nginx配置一下</p><p>反向代理</p><p>Webpack也可以配置：在根目录下添加vue.config.js文件，代码如下</p><p>注意每次修改vue.config.js文件都要npm run serve重启一遍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 打包后的根路径</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;https://gis-h5.oss-accelerate.aliyuncs.com/static&#x27;</span></span><br><span class="line"><span class="comment">// Webpack配置解决跨域</span></span><br><span class="line"><span class="comment">// configureWebpack:&#123;</span></span><br><span class="line"><span class="comment">//     devServer:&#123;</span></span><br><span class="line"><span class="comment">//       proxy:&#123;</span></span><br><span class="line"><span class="comment">//         &#x27;/api&#x27;:&#123;</span></span><br><span class="line"><span class="comment">//           target:&#x27;http://h5.hrkjkq.cn&#x27;,</span></span><br><span class="line"><span class="comment">//   changeOrigin:true,</span></span><br><span class="line"><span class="comment">//           pathRewrite:&#123;&quot;^/api&quot; : &quot;/api&quot;&#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="uni-app-ios-苹果真机运行"><a href="#uni-app-ios-苹果真机运行" class="headerlink" title="uni-app ios 苹果真机运行"></a><a href="https://www.cnblogs.com/yunsun/p/11506444.html">uni-app ios 苹果真机运行</a></h1><p><a href="qipanxy@gmail.com">大佬</a></p><p><a href="http://www.i4.cn/">装个爱思助手就行了</a></p><p><a href="https://www.jianshu.com/p/59f1818a19bc">iPhone获取设备UDID的方法</a></p><h1 id="上传ipa文件最新版本"><a href="#上传ipa文件最新版本" class="headerlink" title="上传ipa文件最新版本"></a>上传ipa文件最新版本</h1><p>先确定上App Store，确定Transporter和Xcode是最新版本</p><p>就可以在Transporter上传.ipa文件</p><p>最后在<a href="https://appstoreconnect.apple.com/login">App Store Connect的网站</a>上添加新版本上传好的.ipa文件就好了</p><h1 id="如果需要图片响应式等比例放大缩小"><a href="#如果需要图片响应式等比例放大缩小" class="headerlink" title="如果需要图片响应式等比例放大缩小"></a>如果需要图片响应式等比例放大缩小</h1><h1 id="如何申请证书"><a href="#如何申请证书" class="headerlink" title="如何申请证书"></a><a href="https://ask.dcloud.net.cn/article/152">如何申请证书</a></h1><h1 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a></h1><h1 id="ios-app真机测试到上架App-Store详细教程-必看"><a href="#ios-app真机测试到上架App-Store详细教程-必看" class="headerlink" title="ios app真机测试到上架App Store详细教程-必看"></a><a href="http://blog.applicationloader.net/blog/zh/88.html">ios app真机测试到上架App Store详细教程-必看</a></h1><p><img src= "/img/loading.gif" data-lazy-src="/img/未越狱.png" alt="9"></p><h1 id="mumu模拟器运行会遇到这种情况，真机运行正常"><a href="#mumu模拟器运行会遇到这种情况，真机运行正常" class="headerlink" title="mumu模拟器运行会遇到这种情况，真机运行正常"></a>mumu模拟器运行会遇到这种情况，真机运行正常</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/code1.png" alt="10"></p><p>打包遇到了，再配置项中勾选了一个，就没事了</p><p><img src= "/img/loading.gif" data-lazy-src="/img/code2.png" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 经验记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly启动说明书</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p>     写博客这个不是已经过时了吗，现在都流行看抖音了。确实如此，但，每当从谷歌或者百度上找到一篇优质的资料时很多时候都出自于个人博客。曾经问过一个大佬在学习上又没有什么习惯或者技巧，他说“我每当解决一个问题之后都会总结并记录下来”。是的自己也深有体会，每次百度半天解决的问题，不做记录的话过一段时间再遇到一样会去百度半天去找，可能这就是平常人与大佬们的区别吧。</p><p>     以某某大佬的一句话作为结尾，以此共勉：</p><p>     “对任何渴望进步的人来说，写博客/文章/回答对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。因为坚持写作的那一刻起，你就已经开始受益。”</p><p>​        自律逻辑：总而言之，就是 慢 下 来<br>1.当你想放纵的时候，慢慢地去感受自己的情绪的变化，当你发现自己并没有因为放纵而变得更好的时候，你反而会更自律。<br>2.停止幻想明天，慢下来，尽全力把今天做好。<br>3.慢慢来，坚持做好一件事。<br>4.让自己慢下来，把所有注意力都放在自己身上。</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><img src= "/img/loading.gif" data-lazy-src="https://picsum.photos/id/15/2500/1667" alt="头像"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 说明书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习总结</title>
      <link href="/post/2020715.html"/>
      <url>/post/2020715.html</url>
      
        <content type="html"><![CDATA[<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>传智讲师   刘晓强     江湖人称  强哥  </p><p>但是不是</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/qq.jpg" /></p><p>也不是：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/lk.jpg" /></p><p>其实这是我：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/gt.jpg" /></p><p>前端基础  html +css    基础班        html 2 +css  7天    9 天 传统布局    +  3天 html 5 +css3 基础</p><p>就业班   js     移动web       php + 项目  15      node      vue     框架  微信 …  大前端    </p><h1 id="HTML-第一天目标"><a href="#HTML-第一天目标" class="headerlink" title="HTML 第一天目标"></a>HTML 第一天目标</h1><p>能够写出基本的页面（里面包含图片、各种标签和链接）</p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>我们主要用的 开发工具有   chrome  、  sublime 、  photoshop</p><h2 id="浏览器（显示）"><a href="#浏览器（显示）" class="headerlink" title="浏览器（显示）"></a>浏览器（显示）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/b.png" /></p><h3 id="查看浏览器占有的市场份额（知晓）"><a href="#查看浏览器占有的市场份额（知晓）" class="headerlink" title="查看浏览器占有的市场份额（知晓）"></a>查看浏览器占有的市场份额（知晓）</h3><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/count.png" /></p><p> 这些工具你认识几个？</p><h2 id="sublime（书写）"><a href="#sublime（书写）" class="headerlink" title="sublime（书写）"></a>sublime（书写）</h2><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/s.png" /></p><p>  普通青年    Dreamweaver</p><p>  文艺青年    sublime</p><p>  高手和傻子  用记事本</p><p>  其实。。。。</p><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/node.png" /></p><h2 id="Photoshop-协助"><a href="#Photoshop-协助" class="headerlink" title="Photoshop(协助)"></a>Photoshop(协助)</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498465020015.png" alt="1498465020015"></p><p>PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：</p><ol><li><strong>熟练的切图</strong></li><li>能和网站美工美眉有共同话题。。。。。</li></ol><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="media/mi.png"alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思考：  网页是如何形成的呢?</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/web.png" /></p><h1 id="常见浏览器内核介绍"><a href="#常见浏览器内核介绍" class="headerlink" title="常见浏览器内核介绍"></a>常见浏览器内核介绍</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/b.png" /></p><h2 id="浏览器内核（理解）"><a href="#浏览器内核（理解）" class="headerlink" title="浏览器内核（理解）"></a>浏览器内核（理解）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。</span><br><span class="line">渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</span><br><span class="line">JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</span><br><span class="line"></span><br><span class="line">最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</span><br></pre></td></tr></table></figure><p>（1）Trident(IE内核) </p><p>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p><p>代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p><p>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><p>（2）Gecko(firefox) </p><p>Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>（3） webkit(Safari)  </p><p> Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p><p> 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p> 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，</p><p>（4） Chromium/Blink(chrome) </p><p>   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 </p><p>​     大部分国产浏览器最新版都采用Blink内核。二次开发</p><p>（5） Presto(Opera) </p><p>  Presto（已经废弃） 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">了解一点：</span><br></pre></td></tr></table></figure><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</p><p>iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的</p><h1 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h1><p>通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问：  哪个语言再全国基本都可以听得懂？ </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/bz.png" /></p><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p> Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。</p><p>主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 最重要</span><br><span class="line">表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。</span><br><span class="line">行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript</span><br></pre></td></tr></table></figure><p>理想状态我们的源码： .HTML    .css   .js </p><p>直观感受：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/gx.png" /></p><p>总结WEB标准：</p><p>结构标准：   <img src= "/img/loading.gif" data-lazy-src="/img/media/hb1.png" />  决定你是否有个好天然身体 </p><p>表现标准：   <img src= "/img/loading.gif" data-lazy-src="/img/media/hb2.png" />  决定你是否打扮的美丽外观</p><p>行为标准：   <img src= "/img/loading.gif" data-lazy-src="/img/media/hb3.jpg"  width="420"   />  决定你是否有吸引人的行为</p><h2 id="课堂一练："><a href="#课堂一练：" class="headerlink" title="课堂一练："></a>课堂一练：</h2><p><strong>1.关于WEB标准下列说法正确的是: </strong></p><p>A html决定页面的行为，css决定页面的样式，js决定页面的结构</p><p>B html决定页面的样式，css决定页面的结构，js决定页面的行为</p><p>C html决定页面的结构，css决定页面的样式，js决定页面的行为</p><p>D 以上都不正确</p><p>2 <strong>web 标准里边规定三层分离不包括哪部分</strong></p><p>A．HTML</p><p>B．CSS</p><p>C．JavaScript</p><p>D．PHP</p><p>3.<strong>关于WEB标准下列说法正确的是</strong></p><p>A．html相当于人的动作行为，CSS相当于人的穿着打扮，javascript相当于人的骨架结构；</p><p>B．html相当于人的骨架结构，CSS相当于人的穿着打扮，javascript相当于人的动作行为；</p><p>C．html相当于人的穿着打扮，CSS相当于人的骨架结构，javascript相当于人的动作行为；</p><p>D．html相当于人的骨架结构，CSS相当于人的动作行为，javascript相当于人的穿着打扮；</p><h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。</p><p>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”。是用来描述网页的一种语言。</p><p>所谓超文本，因为它可以加入图片、声音、动画、多媒体等内容，不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一个大标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   注意：   体会 文本    标签    语言   几个词语</p><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li></ul><p>总结： HTML 作用就是用标记标签来描述网页，把网页内容在浏览器中展示出来。 </p><p>用文字来描述网页标签</p><h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/mess.png" alt=""></p><p>同理：HTML 有自己的语言语法骨架格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>课堂练习1：    书写我们的第一个HTML 页面！</p><ol><li>新建一个demo 的 TXT 文件。</li><li>里面写入刚才的HTML 骨架。月薪过万 你我之间  黑马洗练  一飞冲天</li><li>把后缀名改为 .HTML。</li><li>右击—谷歌浏览器打开。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1 HTML标签：</span><br><span class="line"></span><br><span class="line">作用所有HTML中标签的一个根节点。 最大的标签   根标签</span><br><span class="line"></span><br><span class="line">2 head标签： 文档的头部</span><br><span class="line"></span><br><span class="line">文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</span><br><span class="line"></span><br><span class="line">注意在head标签中我们必须要设置的标签是title</span><br><span class="line"></span><br><span class="line">3.title标签： 文档的标题</span><br><span class="line"></span><br><span class="line">作用：让页面拥有一个属于自己的标题。</span><br><span class="line"></span><br><span class="line">4.body标签：文档的主体  以后我们的页面内容 基本都是放到body里面的</span><br><span class="line"></span><br><span class="line">body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</span><br></pre></td></tr></table></figure><p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/pig.png" /></p><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p>  在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素</p><p>1.双标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>2.单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>标签的相互关系就分为两种：</p><p>1.嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/father.jpg"></p><p>2.并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/xiong.jpg"></p><p>倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。</p><h2 id="课堂一练"><a href="#课堂一练" class="headerlink" title="课堂一练"></a>课堂一练</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请问下列哪个标签是错误的？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A  &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B  &lt;strong&gt;&lt;div&gt;&lt;/div&gt;&lt;/strong&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C  &lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D  &lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>  <a href="key.HTML" target="_blank">sublime 一些常用快捷键  点我查看 </a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">再页面中输入 以下2个单词</span><br><span class="line">1.  html: 5   </span><br><span class="line">2.  !</span><br><span class="line">   在sublime里面然后按下tab键盘即可生成HTML骨架</span><br></pre></td></tr></table></figure><h1 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>同学你用啥手机？你咋回答？  </p><p>这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p><p>&lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><p>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><meta charset="UTF-8" /><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。</span><br></pre></td></tr></table></figure><h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p><h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><p>核心：合适的地方给一个最为合理的标签。</p><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p><p>白话，一眼看去，就知道那个是重点，结构是什么，知道每块的内容是干啥的。</p><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p><h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><p> 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p> HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="标题标签-熟记"><a href="#标题标签-熟记" class="headerlink" title="标题标签 (熟记)"></a>标题标签 (熟记)</h3><p> 单词缩写：  head   头部. 标题     title  文档标题</p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标题标签语义：  作为标题使用，并且依据重要性递减</span><br></pre></td></tr></table></figure><p>其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hn&gt;   标题文本   &lt;/hn&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用，或者页面中最重要标题信息。</p></blockquote><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/dog.gif" /></p><h3 id="段落标签-熟记"><a href="#段落标签-熟记" class="headerlink" title="段落标签( 熟记)"></a>段落标签( 熟记)</h3><p>单词缩写：  paragraph  段落  [ˈpærəgræf]    无须记这个单词</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="水平线标签-认识"><a href="#水平线标签-认识" class="headerlink" title="水平线标签(认识)"></a>水平线标签(认识)</h3><p>单词缩写：  horizontal  横线    [ˌhɔrəˈzɑntl]    同上</p><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr />就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p> 在网页中显示默认样式的水平线。</p><p>课堂练习2：    新闻页面 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/sh.png" /> </p><h3 id="换行标签-熟记"><a href="#换行标签-熟记" class="headerlink" title="换行标签(熟记)"></a>换行标签(熟记)</h3><p>单词缩写：  break   打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><h2 id="课堂一练-1"><a href="#课堂一练-1" class="headerlink" title="课堂一练"></a>课堂一练</h2><p>1关于标签下列说法正确的是 </p><p>(A) P1是段落标签</p><p>(B) H1 是标题标签</p><p>(C) Hr是换行标签</p><p>(D) Br 是一条直线</p><p> 2 关于标签下列说法不正确的是</p><p>(A) H标签有6个等级分别是<code>&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt;和&lt;h6&gt;</code></p><p>(B) h1到h6 文字从小到大 </p><p>(C) p标签一行只能放一个</p><p>(D) P是段落标签会给文字加上段落的语义</p><h3 id="div-span标签-重点"><a href="#div-span标签-重点" class="headerlink" title="div span标签(重点)"></a>div span标签(重点)</h3><p>div  span    是没有语义的     是我们网页布局主要的2个盒子     css+div</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>span, 跨度，跨距；范围    </p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本格式化标签-熟记"><a href="#文本格式化标签-熟记" class="headerlink" title="文本格式化标签(熟记)"></a>文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/tab.png" /></p><p>  b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈</p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ttt.jpg" width="300"  /></p><p>属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><p>手机的颜色是黑色   手机的尺寸是 8寸</p><p>水平线的长度是 200  </p><p>图片的宽度 是  300    键  值对</p><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">属性1</span>=<span class="string">&quot;属性值1&quot;</span> <span class="attr">属性2</span>=<span class="string">&quot;属性值2&quot;</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中，</p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p><p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>3.任何标签的属性都有默认值，省略该属性则取默认值。</p><p>采取  键值对 的格式   key=”value”  的格式  </p><p>比如:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>属性  是 宽度  </p><p>值    是 400 </p><p>提倡：   尽量不使用 样式属性。   <img src= "/img/loading.gif" data-lazy-src="/img/media/sm.jpg" /> </p><h2 id="图像标签img-重点"><a href="#图像标签img-重点" class="headerlink" title="图像标签img (重点)"></a>图像标签img (重点)</h2><p>单词缩写：   image  图像</p><p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img />以及和他相关的属性。其基本语法格式如下：</p><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/img.png" /></p><p><strong>当网页显示图片时,鼠标滑上图片显示文字描述是以下哪个属性<em>**</em></strong></p><p>(A) 设置alt属性</p><p>(B) 设置title属性</p><p>(C) 设置href 属性</p><p>(D) 设置src 属性</p><p><strong>2  在HTML中，使用<img>标签插入图像，下列选项关于<img>的src属性说法正确的是 </strong></p><p>(A) 用来设置图片的格式</p><p>(B) 用来设置图片的所在位置</p><p>(C) 用来设置鼠标指向图片时显示的文字</p><p>(D) 用来设置图片是否能正确显示 </p><h2 id="链接标签-重点"><a href="#链接标签-重点" class="headerlink" title="链接标签(重点)"></a>链接标签(重点)</h2><p>单词缩写：  anchor 的缩写  [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的</p><p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p><p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>注意：</p><p>1.外部链接 需要添加 http:// www.baidu.com</p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 &lt;/a &gt;</p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p><h3 id="锚点定位-（难点）"><a href="#锚点定位-（难点）" class="headerlink" title="锚点定位 （难点）"></a>锚点定位 （难点）</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本&quot;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的）</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="base-标签-基本的"><a href="#base-标签-基本的" class="headerlink" title="base 标签   基本的"></a>base 标签   基本的</h3><p>base 可以设置整体链接的打开状态   </p><p>base 写到  <head>  </head>  之间</p><p>把所有的连接 都默认添加 target=”_blank”</p><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/base.png" /></p><h2 id="课堂一练-2"><a href="#课堂一练-2" class="headerlink" title="课堂一练"></a>课堂一练</h2><p> 1在HTML中，关于a标签说法不正确的是（）</p><p>(A) a标签可以通过href属性跳转到另外一个页面</p><p>(B) a标签可以通过targer属性设置在是否在新窗口中打开</p><p>(C) a标签只能在当前页面设置锚点链接，让用户能够快速定位到目标内</p><p>(D) a标签可以通过href=”#”设置一个空链接</p><p>2如果想跳转到当前页面里名为show的锚点，下列写法是正确的</p><p>A  &lt; a href=”.show”&gt;跳转&lt;/a&gt;</p><p>B &lt; a href=”#show”&gt;跳转&lt;/a&gt;</p><p>C &lt; a href=” show”&gt;跳转&lt;/a&gt;</p><p>D &lt; a src=” #show”&gt;跳转&lt;/a&gt;</p><p>3如果想跳转到同目录下的名为success.html文件里名为show的锚点，下列写法是正确的</p><p>(A) &lt; a href=”success.html#show”&gt;跳转&lt;/a&gt;</p><p>(B)  &lt; a href=”#show”&gt;跳转&lt;/a&gt; </p><p>(C)  &lt; a href=”success#show”&gt;跳转&lt;/a&gt;<br>(D) &lt; a src=”success.html#show”&gt;跳转&lt;/a&gt;</p><h2 id="特殊字符标签-（理解）"><a href="#特殊字符标签-（理解）" class="headerlink" title="特殊字符标签 （理解）"></a>特殊字符标签 （理解）</h2><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/zifu.png" /></p><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>   ctrl + /       或者 ctrl +shift + / </span><br></pre></td></tr></table></figure><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>注释重要性：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zs.png" /></p><h1 id="路径-重点、难点"><a href="#路径-重点、难点" class="headerlink" title="路径(重点、难点)"></a>路径(重点、难点)</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/media/dt.png" width="400" /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/lj.png" /></p><p>实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。</p><p>根目录  当前目录 </p><p>路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li></ol><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。">http://www.itcast.cn/images/logo.gif”。</a></p><h2 id="课堂一练-3"><a href="#课堂一练-3" class="headerlink" title="课堂一练"></a>课堂一练</h2><p>1.<strong>在下面结构中，哪种写法可以在index页面中有输出img.gif</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1512226080266.png" alt="1512226080266"></p><p>(A) <code>&lt;img src=&quot;../image/img.gif&quot; /&gt;</code>        </p><p>(B) <code>&lt;img src=&quot;image/img.gif&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;image../img.gif&quot; /&gt;</code></p><p>(D) <code>&lt;img src=&quot;img.gif/image&quot; /&gt;</code></p><p><strong>2在下面结构中，哪种写法可以在index页面中有输出1.jpg</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1512226099480.png" alt="1512226099480"></p><p>(A) <code>&lt;img src=&quot;../1/2/1.jpg&quot; /&gt;</code></p><p>(B) <code>&lt;img src=&quot;/1/2/1.jpg&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;1/2/1.jpg&quot; /&gt;</code></p><p>(D)<code>&lt;img src=&quot;1.jpg&quot; /&gt;</code></p><p>3在下面结构中哪种写法可以在index页面中有输出img.gif</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1512226121609.png" alt="1512226121609"></p><p>(A) <code>&lt;img src=&quot;demo/image/img.gif&quot; /&gt;</code></p><p>(B) <code>&lt;img src=&quot;image/img.gif&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;image../img.gif&quot; /&gt;</code>    </p><p>(D) <code>&lt;img src=&quot;img.gif/image/demo&quot; /&gt;</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;</p><p>学HTML 之前 觉得 很神秘  </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/z.png" /></p><p>等你学完之后忽然发现</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/rh.jpg" width="615" /></p><p>总结今天的思路贯穿线：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/a.png" width="1000" /></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>什么是列表？</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/list.png" /></p><p>把…制成表,以表显示</p><p>容器里面装载着文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是  整齐 、整洁、 有序</p><h2 id="无序列表-ul-（重点）"><a href="#无序列表-ul-（重点）" class="headerlink" title="无序列表 ul （重点）"></a>无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ul.png" /></p><p>脚下留心：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure><h2 id="有序列表-ol-（了解）"><a href="#有序列表-ol-（了解）" class="headerlink" title="有序列表 ol （了解）"></a>有序列表 ol （了解）</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/gold.png" /></p><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  </p><p>  但是实际工作中， 较少用 ol img src=”media/1.jpg” /&gt;</p><h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/2.jpg" /> </p><p>用的还可以：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/mix.png" /></p><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p><img src= "/img/loading.gif" data-lazy-src="http://zcr4.ncfstatic.com/attachment/201403/27/10/5333888008f05_thumb_670x0.jpg" alt="img"></p><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理、显示表格式数据。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/table.png" /></p><p>ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.table用于定义一个表格。</span><br><span class="line"></span><br><span class="line">2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</span><br><span class="line"></span><br><span class="line">3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</span><br></pre></td></tr></table></figure><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/tt.png" /></p><h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/th.png" /></p><h2 id="表格结构（了解）"><a href="#表格结构（了解）" class="headerlink" title="表格结构（了解）"></a>表格结构（了解）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</span><br><span class="line"></span><br><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。</span><br><span class="line"></span><br><span class="line">必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。</span><br><span class="line"></span><br><span class="line">位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/thead.png" /></p><h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><p><strong>表格的标题： caption</strong></p><p><strong>定义和用法</strong></p><p>caption 元素定义表格标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p><h2 id="合并单元格-难点"><a href="#合并单元格-难点" class="headerlink" title="合并单元格(难点)"></a>合并单元格(难点)</h2><p>跨行合并：rowspan    跨列合并：colspan</p><p>合并单元格的思想：</p><p>​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p>​     公式：  删除的个数  =  合并的个数  - 1   </p><p>   合并的顺序 先上   先左 </p><h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol><li><p>表格提供了HTML 中定义表格式数据的方法。</p></li><li><p>表格中由行中的单元格组成。</p></li><li><p>表格中没有列元素，列的个数取决于行的单元格个数。</p></li><li><p>表格不要纠结于外观，那是CSS 的作用。</p></li></ol><p>   <strong>表格的学习要求：  能手写表格结构，并且能合并单元格。</strong></p><h1 id="表单标签-掌握"><a href="#表单标签-掌握" class="headerlink" title="表单标签(掌握)"></a>表单标签(掌握)</h1><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/car.jpg"  width="500" /></p><p>目的是为了收集用户信息。</p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/bd.png" /></p><p>  表单控件：</p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  提示信息：</p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  表单域：  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="input-控件-重点"><a href="#input-控件-重点" class="headerlink" title="input 控件(重点)"></a>input 控件(重点)</h2><p>在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/input.png" /></p><h2 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h2><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;每行中的字符数&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;显示的行数&quot;</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/textarea.png" /></p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><ol><li>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li><li>method<br>用于设置表单数据的提交方式，其取值为get或post。</li><li>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</li></ol><p>注意：  每个表单都应该有自己表单域。</p><h1 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h1><p>经常查阅文档是一个非常好的学习习惯。</p><p>W3C :  <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习总结</title>
      <link href="/post/1038.html"/>
      <url>/post/1038.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><p>CSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   </p><p>CSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/baby.jpeg" /></p><p>ps:  你跟Angelababy只差了一个妆容的距离</p><p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p><p>我想说， 没有不好看的网页，只有不会CSS的前端。</p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>CSS(Cascading Style Sheets)    美化样式</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/CSS&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    选择器 &#123;属性<span class="number">1</span>:属性值<span class="number">1</span>; 属性<span class="number">2</span>:属性值<span class="number">2</span>; 属性<span class="number">3</span>:属性值<span class="number">3</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p><p>type=”text/CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;CSS文件的路径&quot;</span>  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：  link 是个单标签哦!!!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</span><br><span class="line">type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</span><br><span class="line">rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span><br></pre></td></tr></table></figure><h2 id="三种样式表总结（位置）"><a href="#三种样式表总结（位置）" class="headerlink" title="三种样式表总结（位置）"></a>三种样式表总结（位置）</h2><div class="table-container"><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table></div><h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/gz.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在上面的样式规则中:</span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line">4.属性和属性值之间用英文“:”连接。</span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure><h1 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h1><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ax.png" /></p><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><p>选择器干啥的？   选择标签用的</p><p>这就用到基础选择器组：</p><h1 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h1><h2 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  或者</span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><p>标签选择器 可以把某一类标签全部选择出来  div  span  </p><p>课堂案例：</p><p> 传智简介</p><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签调用的时候用 class=“类名”  即可。</span><br></pre></td></tr></table></figure><p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/good.png" />小技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line">2.不建议使用“_”下划线来命名CSS选择器。</span><br></pre></td></tr></table></figure><p>​    输入的时候少按一个shift键;<br>　浏览器兼容问题 (比如使用<em>tips的选择器命名，在IE6是无效的)<br>　能良好区分JavaScript变量命名(JS变量命名是用“</em>”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</span><br></pre></td></tr></table></figure><p>猜谜底游戏：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/midi.png" width="450" />   你猜？</p><p>命名规范：  见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><p>课堂案例：</p><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/go.png" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/lei.png" /></p><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</span><br><span class="line">2. 各个类名中间用空格隔开。</span><br></pre></td></tr></table></figure><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类名选择器 ：&lt; div    class=“nav”&gt;      这个 div 的名字 就是 nav      nav 就是  div     这个 div 也是 nav  </p><p>&lt;  人    class  = 刘德华     &gt;      我们想要吧div  找到     div {}      .nav {}     </p><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p><p>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</p><p>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zfb.jpg" /></p><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符   选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 </p><h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/dd.png" /></p><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p><p>p{ font-family:”微软雅黑”;}</p><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><blockquote><p><img src= "/img/loading.gif" data-lazy-src="/img/media/good.png" />常用技巧：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 现在网页中普遍使用14px+。</span><br><span class="line">2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</span><br><span class="line">3. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/shs.png" /></p><p>可以通过escape()  来测试属于什么字体。</p><div class="table-container"><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table></div><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/good.png" />小技巧： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字 <span class="number">400</span> 等价于 <span class="attribute">normal</span>，而 <span class="number">700</span> 等价于 bold。  但是我们更喜欢用数字来表示。  </span><br></pre></td></tr></table></figure><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/good.png" />小技巧： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line"></span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br></pre></td></tr></table></figure><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p><p>一般情况下，行距比字号大7.8像素左右就可以了。</p><h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</span><br></pre></td></tr></table></figure><p>left：左对齐（默认值）</p><p>right：右对齐</p><p>center：居中对齐</p><p>是让盒子里面的内容水平居中， 而不是让盒子居中对齐</p><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p><h2 id="text-decoration-文本的装饰"><a href="#text-decoration-文本的装饰" class="headerlink" title="text-decoration 文本的装饰"></a>text-decoration 文本的装饰</h2><p>text-decoration   通常我们用于给链接修改装饰效果</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的</td></tr><tr><td>overline</td><td>定义文本上的一条线。</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。</td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p><p>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p>菜单：   右击网页空白出—-查看 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/chrome.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/good.png" />小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/jiao.png" /></p><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。  </span><br></pre></td></tr></table></figure><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/bing.png" /></p><p>记忆技巧：</p><p>并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/hu.gif" />  他和他，在一起， 在一起    一起的意思</p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/hou.png" /></p><p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/li.png" /></p><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zi1.png" /></p><p>白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/san.jpg" /></p><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sitenav&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-l&quot;</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-r&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上代码的前提下，完成以下任务：</p><ol><li>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为橙色     (简单)</li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)</li><li>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</li></ol><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><p> 伪娘    </p><p>类  .one  </p><p>伪类 :link</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 <span class="selector-class">.demo</span> &#123;&#125;   而我们的伪类 用 <span class="number">2</span>个点 就是 冒号  比如  <span class="selector-pseudo">:link</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul><li>:link      /<em> 未访问的链接 </em>/</li><li>:visited   /<em> 已访问的链接 </em>/</li><li>:hover     /<em> 鼠标移动到链接上 </em>/</li><li>:active    /<em> 选定的链接 </em>/</li></ul><p>   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</span><br></pre></td></tr></table></figure><p>   例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sublime快捷方式"><a href="#sublime快捷方式" class="headerlink" title="sublime快捷方式"></a>sublime快捷方式</h1><p>sublime可以快速提高我们代码的书写方式</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 <em> 就可以了 比如   div</em>3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li></ol><h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/media/people.png" /></p><p>非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p><p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色</p><p>传智黄人：  我中间的。。。  <img src= "/img/loading.gif" data-lazy-src="/img/media/h.jpg" alt="" /></p><p>最重要的总结：  是为了更好的适应环境而完成的自然选择。 </p><p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p><p>标签的类型(显示模式)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。 霸道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/xtf.jpg" /></p><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/wf.jpg" />  我一样重要</p><p>行内元素的特点：</p><p>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊 a里面可以放块级元素 ）</p><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/w.jpg" />    注意：</p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li>链接里面不能再放链接。</li><li>a里面可以放块级元素</li></ol><h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">块级元素的特点：</span><br><span class="line">（1）总是从新行开始</span><br><span class="line">（2）高度，行高、外边距以及内边距都可以控制。</span><br><span class="line">（3）宽度默认是容器的100%</span><br><span class="line">（4）可以容纳内联元素和其他块元素。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内元素的特点：</span><br><span class="line">（1）和相邻行内元素在一行上。</span><br><span class="line">（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</span><br><span class="line">（3）默认宽度就是它本身内容的宽度。</span><br><span class="line">（4）行内元素只能容纳文本或则其他行内元素。</span><br></pre></td></tr></table></figure><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点：</span><br><span class="line">（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</span><br><span class="line">（2）默认宽度就是它本身内容的宽度。</span><br><span class="line">（3）高度，行高、外边距以及内边距都可以控制。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/lyc.jpg" width="400" /></p><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p><p>行内转块：display:block;</p><p>块、行内元素转换为行内块： display: inline-block;</p><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h2 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h2><p>1.写 三个 div  给定 100 * 100 的红色盒子     —  宽度 高度  背景色 </p><p>2.三个 span   也要求  150 * 150 绿色盒子 </p><ol><li>三个  a 链接   80 * 20  蓝色 盒子  要求 必须一行显示 这三个盒子</li><li>鼠标经过3个a链接的时候， 背景颜色变为  橙色     hover   bgc</li><li>导航栏案例</li></ol><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： .selector { }</p><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><p>font-size: 12px;</p><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">#username input &#123;&#125;</span><br><span class="line">.comment .avatar &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.page .header .login #username input &#123;&#125;</span><br><span class="line">.comment div * &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="行高的测量"><a href="#行高的测量" class="headerlink" title="行高的测量"></a>行高的测量</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/media/line1.png"  /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/line2.png"  /></p><p>行高我们利用最多的一个地方是： 可以让一行文本在盒子中垂直居中对齐。</p><p>做法就是： 文字的行高等于盒子的高度。</p><p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1.png"  /></p><p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p>如果 行高 等 height 高度  文字会 垂直居中</p><p>如果行高 大于 高度   文字会 偏下 </p><p>如果行高小于高度   文字会  偏上 </p><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。  就近原则</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/hai.gif"  width="600" height="400" /></p><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是：  子承父业。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/shu.gif" /></p><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</span><br></pre></td></tr></table></figure><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</span><br><span class="line"></span><br><span class="line">行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</span><br><span class="line"></span><br><span class="line">权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</span><br><span class="line"></span><br><span class="line">CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</span><br></pre></td></tr></table></figure><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><div class="table-container"><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值  重要的</td><td>∞ 无穷大</td></tr></tbody></table></div><p>权重是可以叠加的</p><p> 比如的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line"></span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line"></span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line"></span><br><span class="line">.nav a       ------&gt;      0,0,1,1   </span><br><span class="line"></span><br><span class="line">#nav p       -----&gt;       0,1,0,1</span><br></pre></td></tr></table></figure><p>​      </p><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/w.jpg" /> 注意： </p><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol><li>继承的 权重是 0  </li></ol><p>总结优先级：</p><ol><li>使用了 !important声明的规则。</li><li>内嵌在 HTML 元素的 style属性里面的声明。</li><li>使用了 ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：权重是优先级的算法，层叠是优先级的表现</span><br></pre></td></tr></table></figure><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p><div class="table-container"><table><thead><tr><th>background-color</th><th>背景颜色</th></tr></thead><tbody><tr><td>background-image</td><td>背景图片地址</td></tr><tr><td>background-repeat</td><td>是否平铺</td></tr><tr><td>background-position</td><td>背景位置</td></tr><tr><td>background-attachment</td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr></tbody></table></div><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | url (url) </span><br></pre></td></tr></table></figure><p>参数： </p><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p><p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p><p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure><p>参数： </p><p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat : 　背景图像不平铺</p><p>repeat-x : 　背景图像在横向上平铺</p><p>repeat-y : 　背景图像在纵向平铺 </p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p>repeat-x : 　背景图像在横向上平铺  </p><p>repeat-y : 　背景图像在纵向平铺 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/y.png" width="600"/></p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/q.png" width="600"/></p><h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure><p>参数： </p><p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p><p>说明： </p><p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p><p>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p>实际工作用的最多的，就是背景图片居中对齐了。</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll | fixed </span><br></pre></td></tr></table></figure><p>参数： </p><p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p><p>说明： </p><p>设置或检索背景图像是随对象内容滚动还是固定的。</p><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll <span class="number">50%</span> <span class="number">0</span> ;</span><br></pre></td></tr></table></figure><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><p> 最后一个参数是alpha 透明度  取值范围 0~1之间</p><p> 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p><h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;  <span class="comment">/* 把a 行内元素转换为行内块元素 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;  <span class="comment">/* 文字水平居中 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">50px</span>;  <span class="comment">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>: none;  <span class="comment">/* 取消下划线 文本装饰 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过 给我们的链接添加背景图片*/</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/h.png</span>) no-repeat; </span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>专区说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>申请资格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>兑换奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>下载游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  </p><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/t.png" /></p><p>牛奶是怎样运输，让消费者购买的呢？</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/m.jpg" /></p><p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p><p>看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/t1.png" /></p><p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/j.jpg" width="300" /></p><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 </p><p>首先，我们来看一张图，来体会下什么是盒子模型。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/box.png"  width="700" /></p><p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/boxs.png"  width="700" /></p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p><p>语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br></pre></td></tr></table></figure><p>边框属性—设置边框样式（border-style）</p><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">none：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>设置内容</td><td>样式属性</td><td>常用属性值</td></tr><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td></tr></tbody></table></div><pre><code>    border-top: 1px solid red; /*上边框*/    border-bottom: 2px solid green; /*下边框*/    border-left: 1px solid blue;    border-right: 5px solid pink;    border: 1px solid red;</code></pre><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p><p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p><p>border-collapse:collapse; 表示相邻边框合并在一起。</p><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p><p>padding-top:上内边距</p><p>padding-right:右内边距</p><p>padding-bottom:下内边距</p><p>padding-left:左内边距</p><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/w.jpg"/>注意：  后面跟几个数值表示的意思是不一样的。</p><div class="table-container"><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td></tr><tr><td>2个值</td><td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td></tr><tr><td>3个值</td><td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td></tr></tbody></table></div><p>课堂案例：  新浪导航</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/al.gif" /></p><h3 id="关于盒子宽度下列正确的是（）"><a href="#关于盒子宽度下列正确的是（）" class="headerlink" title="关于盒子宽度下列正确的是（）"></a>关于盒子宽度下列正确的是（）</h3><p>(A) 盒子宽：就是width的大小</p><p>(B) 盒子宽： padding-left + width + padding-right </p><p>(C) 盒子宽： border-left + width + border-right </p><p>(D) 盒子宽： border-left+ padding-left + width + padding-right + border-right</p><p>w 100  padding 10  border 5  ? 实际大小 ？   130 </p><h3 id="3关于盒子高度下列正确的是（）"><a href="#3关于盒子高度下列正确的是（）" class="headerlink" title="3关于盒子高度下列正确的是（）"></a>3关于盒子高度下列正确的是（）</h3><p>(A) 盒子高：就是height的大小</p><p>(B) 盒子高：padding-top +height + padding-bottom </p><p>(C) 盒子高：border-top + height + border-bottom</p><p>(D) 盒子高：border-top + padding-top +height + padding-bottom + border-bottom</p><p><strong>4**</strong> 关于根据下列代码计算 盒子宽高下列说法正确的是（）<strong>**</strong></p><p>div {</p><p>​            width: 200px;</p><p>​            height: 200px;</p><p>​            border: 1px solid #000000;</p><p>​            border-top: 5px solid blue;</p><p>​            padding: 50px;</p><p>​            padding-left: 100px;</p><p>​        }</p><p>(A) 宽度为200px 高度为200px</p><p>(B) 宽度为352px 高度为306px</p><p>(C) 宽度为302px 高度为307px</p><p>(D) 宽度为302px 高度为252px</p><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><p>margin:上外边距 右外边距  下外边距  左外边</p><p>取值顺序跟内边距相同。</p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><h3 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h3><ol><li>文字水平居中是  text-align: center</li><li>盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> auto;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure><ol><li>插入图片 我们用的最多 比如产品展示类</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line"><span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">images/sun.jpg</span>) no-repeat;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/www.png" /></p><p>解决方案：  避免就好了。</p><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/n.png" /></p><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><p>待续。。。。</p><h2 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h2><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素实际大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p><p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p><p>3、<strong>如果一个盒子则会和父亲一样宽 占满父亲的宽度， 如果此盒子没有给定宽度 则padding 不会影响本盒子大小</strong>。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p><p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p><p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin   </span><br></pre></td></tr></table></figure><p>原因：</p><ol><li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p></li><li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p></li><li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p></li></ol><h2 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h2><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;   让一个正方形  变成圆圈</span><br></pre></td></tr></table></figure><h2 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h2><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498467567011.png" alt="1498467567011"></p><ol><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line"><span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line"><span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p><p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>html语言当中另外一个相当重要的概念—————标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/t.jpg" /></p><h2 id="浮动-float-1"><a href="#浮动-float-1" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/l.png" style="width: 600px; border: 2px solid #000;"/></p><p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/d.png" /></p><h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准标准流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table></div><h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，====脱标==== 不占位置，会影响标准流。浮动只有左右浮动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 </span><br></pre></td></tr></table></figure><p>   <img src= "/img/loading.gif" data-lazy-src="/img/media/one.jpg" width="500" /> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</span><br></pre></td></tr></table></figure><p>总结：  浮动 —-&gt;    </p><p>浮动的目的就是为了让多个块级元素同一行上显示。  最核心的关键点就是   怎么排列的， 是否占有位置</p><p>float      浮 漏 特   </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p><p>1、确定页面的版心（可视区）。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。</p><p>3、制作HTML结构 。</p><p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/yl.jpg" width="400" /></p><p>最普通的，最为常用的结构</p><h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ll.jpg" width="400" /></p><p>比如小米    <a href="http://www.mi.com" target="_blank"> 小米官网 </a></p><h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/tl.jpg" width="600" /></p><p>比如锤子    <a href="http://www.smartisan.com/" target="_blank"> 锤子官网 </a></p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p><p>途经国贸，羡慕繁华；</p><p>途经天安门，幻想权力；</p><p>途经金融街，梦想发财；</p><p>经过公主坟，遥想华丽家族；</p><p>经过玉泉路，依然雄心勃勃…</p><p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p><p>顿时醒悟：人生苦短，有始有终。 </p><p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p><h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src= "/img/loading.gif" data-lazy-src="/img/media/wq.jpg" height="100" />。  </p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p><h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/n.jpg" /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/no.jpg" /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/kc.jpg" /></p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table></div><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： <span class="attribute">overflow</span>为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;*zoom: <span class="number">1</span>;&#125;   <span class="comment">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure><p>优点： 符合闭合浮动思想  结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/163.png" style="border: 1px dashed #3c3c3c;"/></p><p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p><h2 id="Photoshop基本使用"><a href="#Photoshop基本使用" class="headerlink" title="Photoshop基本使用"></a>Photoshop基本使用</h2><h2 id="PS界面组成："><a href="#PS界面组成：" class="headerlink" title="PS界面组成："></a>PS界面组成：</h2><p>ctrl + r  显示隐藏标尺      右击 标尺 —- 把里面的单位一律改为像素</p><p>ctrl+ d  取消选区    </p><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​    窗口菜单，可显示隐藏所有面板</p><p>工作区：（新建）</p><p>调整浮动面板</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/jiemian.png"/></p><h2 id="图层操作-重点"><a href="#图层操作-重点" class="headerlink" title="图层操作(重点)"></a>图层操作(重点)</h2><p> 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/tuceng.png" /></p><p> 图层选择： 使用移动工具V </p><p> 1、图层缩览图判断</p><p> 2、按住CTRL,在目标图像上单击</p><p> 3、将光标放置在目标图像上右键，选择图层名称</p><p>图层面板中加选图层：</p><p>1、按SHIFT，单击另一目标图层     中间所有图层被选中</p><p>2、按CTRL，单击另一目标图层     只选中目标图层</p><p>复制图层：选中目标图层后（移动工具状态下）</p><p>   1、按ALT拖拽图像</p><p>   2、CTRL+J      （重合）</p><p>案例： 摆放一个自行车</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/bike.jpg" /></p><h2 id="图层编组"><a href="#图层编组" class="headerlink" title="图层编组"></a>图层编组</h2><p>选中目标图层，CTRL+G   </p><p>取消编组：CTRL+SHIFT+G</p><p>双击图层名称可重新命名</p><p>双击组名称，可命名组</p><p>  移动工具V选择组或图层时，需设置选项栏</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498465862231.png" alt="1498465862231"></p><h2 id="图层上下位置移动"><a href="#图层上下位置移动" class="headerlink" title="图层上下位置移动"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p><p>2、CTRL+]    向上移动图层<br>​       CTRL+[    向下移动图层</p><p>3、CTRL+SHIFT+]   图层置顶<br>​       CTRL+SHIFT+[   图层置底</p><p>移动选区或图像时：</p><p>移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。</p><p>ps中的撤销操作是：</p><p>ctrl+z  撤销一步</p><p>ctrl+alt+z  撤销多步</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p>PS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498466173246.png" alt="1498466173246"></p><ol><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—-新建基于图层的切片</p></li><li><p>利用标尺   基于参考线的切片 （选择切片工具）</p></li></ol><p>   <img src= "/img/loading.gif" data-lazy-src="/img/media/1498466734205.png" alt="1498466734205"></p><ol><li>先选个一个整个的切片，  切片选择工具— 属性面板中有 “划分”   —可以等分数平分切图</li></ol><p>导出切片： 文件— 存储为web设备所用格式</p><h3 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h3><p>视图菜单— 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/sample1.gif" /></p><h1 id="项目案例：-云道页面"><a href="#项目案例：-云道页面" class="headerlink" title="项目案例： 云道页面"></a>项目案例： 云道页面</h1><p>案例练习目的是总结以前的css和html</p><p>还有ps的使用。</p><p>制作步骤：</p><ol><li>准备相关文件。（内部样式表) html文件(index.html)   图片文件</li><li>准备CSS 初始化。 书写结构和样式</li><li>确定版心（是1200像素)和各个模块。</li></ol><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p><p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p><h2 id="为什么要用定位？"><a href="#为什么要用定位？" class="headerlink" title="为什么要用定位？"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！</p><p>第一幅图， 小黄色块可以再图片上移动：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1.gif" style="border: 1px dashed #3c3c3c;"/></p><p>第二幅图， 左右箭头压住图片：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/2.gif" style="border: 1px dashed #3c3c3c;"/></p><p>第三幅图,  hot 再盒子外面多出一块，更加突出：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/it.png" style="border: 1px dashed #3c3c3c;"/></p><p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><p>1、边偏移</p><div class="table-container"><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table></div><p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p><p>2、定位模式(定位的分类)</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p>选择器{position:属性值;}</p><p>position属性的常用值</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table></div><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p><p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p><p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><p>PS： 静态定位其实没啥可说的。</p><h2 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小笑话： </span><br><span class="line">刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/smail.gif" width="100"/></p><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/r.png"  /></p><p>注意：   </p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li></ol><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p><h2 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小笑话：</span><br><span class="line"></span><br><span class="line">吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">我一阵感动，刚想夸他两句。 </span><br><span class="line"></span><br><span class="line">儿子接着说：“以后全靠你让我拼爹了！”</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/smail.gif" width="100"/></p><p>　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ab.png" /></p><h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ab1.png" /></p><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p><p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p><p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p><p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p><p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zi.png"  style="border: 1px dashed #3c3c3c;"/></p><p>所以，我们可以得出如下结论：</p><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p><p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位. </p><p>这就是子绝父相的由来。</p><h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p><p>定位的盒子也可以水平或者垂直居中，有一个算法。</p><ol><li><p>首先left 50%   父盒子的一半大小</p></li><li><p>然后走自己外边距负的一半值就可以了 margin-left。</p></li></ol><h2 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li></ol><p>记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/sun.jpg" width="100"></p><p>ie6等低版本浏览器不支持固定定位。</p><h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zzz.png" /></p><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><p>比如：  z-index: 2;</p><p>注意：</p><ol><li><p>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p></li><li><p>如果取值相同，则根据书写顺序，后来居上。</p></li><li><p>后面数字一定不能加单位。</p></li><li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p></li></ol><h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><div class="table-container"><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动（自恋型）</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置（拼爹型）</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置（认死理型）</td></tr></tbody></table></div><h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p><p><strong> 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。</strong></p><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p><h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p><p>visible : 　对象可视</p><p>hidden : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p><h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p>visible : 　不剪切内容也不添加滚动条。</p><p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p><p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p>scroll : 　不管超出内容否，总是显示滚动条</p><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure><p> 鼠标放我身上查看效果哦：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:default&quot;</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:move&quot;</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:text&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color ||outline-style || outline-width </span><br></pre></td></tr></table></figure><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p><p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;outline: 0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><p>右下角可以拖拽： </p><textarea></textarea><p>右下角不可以拖拽： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;</p><p>以前我们还讲过让文字居中对齐，是 text-align: center;</p><p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p><p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/xian.jpg" /></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。 </p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498467742995.png" alt="1498467742995"></p><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/3.jpg" /></p><p>解决的方法就是：  </p><ol><li>给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src= "/img/loading.gif" data-lazy-src="/img/media/1633.png"  width="500"  style="border: 1px dashed #ccc;" /></li></ol><ol><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src= "/img/loading.gif" data-lazy-src="/img/media/sina1.png" width="500" style="border: 1px dashed #ccc;"/></li></ol><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><p>normal   使用浏览器默认的换行规则。</p><p>break-all   允许在单词内换行。</p><p>keep-all    只能在半角空格或连字符处换行。</p><p>主要处理英文单词</p><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p><p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p><p>可以处理中文</p><h2 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><p>clip : 　不显示省略标记（…），而是简单的裁切 </p><p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p><p>注意一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><h1 id="CSS精灵技术（sprite）-小妖精-雪碧"><a href="#CSS精灵技术（sprite）-小妖精-雪碧" class="headerlink" title="CSS精灵技术（sprite） 小妖精  雪碧"></a>CSS精灵技术（sprite） 小妖精  雪碧</h1><h2 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h2><p><img src= "/img/loading.gif" data-lazy-src="/img/media/sss.png" /></p><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h3><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/jds.png"  style="border: 1px dashed #ccc;" /></p><h3 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p><h3 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们精灵图的宽度取决于最宽的那个背景。 </span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h1 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h1><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/h.gif" /></p><h2 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h2><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/wxx.jpg" /></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h1 id="学成在线综合案例"><a href="#学成在线综合案例" class="headerlink" title="学成在线综合案例"></a>学成在线综合案例</h1><h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p><h2 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..</span><br><span class="line">但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...</span><br><span class="line">本身体积更小，但携带的信息并没有削减。</span><br><span class="line">几乎支持所有的浏览器</span><br><span class="line">移动端设备必备良药...</span><br></pre></td></tr></table></figure><h2 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h2><p>总体来说，字体图标按照如下流程：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/fontt.png" /></p><h3 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h3><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/03.jpg" /></p><p>  之后保存为svg格式，然后给我们前端人员就好了。 </p><p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h3 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h3><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>​    推荐网站： <a href="http://icomoon.io">http://icomoon.io</a></p><p><strong>icomoon字库</strong></p><p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>   推荐网站： <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></p><p><strong>阿里icon font字库</strong></p><p><a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></p><p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><p><strong>fontello</strong></p><p><a href="http://fontello.com/">http://fontello.com/</a></p><p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p><p><strong>Font-Awesome</strong></p><p><a href="http://fortawesome.github.io/Font-Awesome/">http://fortawesome.github.io/Font-Awesome/</a></p><p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p><p><strong>Glyphicon Halflings</strong></p><p><a href="http://glyphicons.com/">http://glyphicons.com/</a></p><p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p><p><strong>Icons8</strong></p><p><a href="https://icons8.com/">https://icons8.com/</a></p><p>提供PNG免费下载，像素大能到500PX</p><h3 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h3><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p><p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/fontt1.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/fontt2.png" /></p><h3 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h3><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498032122244.png" alt="1498032122244"></p><h5 id="第一步：在样式里面声明字体：-告诉别人我们自己定义的字体"><a href="#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体" class="headerlink" title="第一步：在样式里面声明字体： 告诉别人我们自己定义的字体"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：给盒子使用字体"><a href="#第二步：给盒子使用字体" class="headerlink" title="第二步：给盒子使用字体"></a>第二步：给盒子使用字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：盒子里面添加结构"><a href="#第三步：盒子里面添加结构" class="headerlink" title="第三步：盒子里面添加结构"></a>第三步：盒子里面添加结构</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;\e900&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">或者  </span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;  </span><br></pre></td></tr></table></figure><h3 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p><p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/fontt5.png" /></p></li></ol><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h1 id="京东项目-一"><a href="#京东项目-一" class="headerlink" title="京东项目(一)"></a>京东项目(一)</h1><h2 id="京东项目介绍"><a href="#京东项目介绍" class="headerlink" title="京东项目介绍"></a>京东项目介绍</h2><p>项目名称：京东网<br>项目描述：京东首页公共部分的头部和尾部制作，京东首页中间部分。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/jd.png" /></p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>现阶段电商类网站很流行，很多同学毕业之后会进入电商类企业工作，同时电商类网站需要的技术也是较为复杂的，这里用京东电商网站复习、总结、提高前面所学布局技术。其实，最主要的原因还是，为啥写京东？  因为刘强东，赚了我们的钱，抢了我们的女神， 我们也要学刘强东，赚别人的钱，抢别人..额，自己的女神。。。</p><h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><ul><li>保证浏览器 ie7及以上, 火狐, 360, safari，chrome等。谁让我再测ie6，就跟谁急。。</li><li>熟悉CSS+DIV布局，页面的搭建工作</li><li>了解常用电商类网站的布局模式</li><li>为后期京东移动端做铺垫</li></ul><h2 id="几点思考"><a href="#几点思考" class="headerlink" title="几点思考"></a>几点思考</h2><p>(1). 开发工具  sublime  、fireworks（ps）、各种浏览器(ie6.7 要测看心情)</p><p>(2). CSS Rest 类库,为跨浏览器兼容做准备(也可以直接运用jd网站的初始化)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">normalize.css   只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。Normalize.css现在已经被用于Twitter Bootstrap、HTML5 Boilerplate、GOV.UK、Rdio、CSS Tricks 以及许许多多其他框架、工具和网站上。 你值得拥有。。 </span><br><span class="line"></span><br><span class="line">- 保护有用的浏览器默认样式而不是完全去掉它们</span><br><span class="line"></span><br><span class="line">- 一般化的样式：为大部分HTML元素提供</span><br><span class="line"></span><br><span class="line">- 修复浏览器自身的bug并保证各浏览器的一致性</span><br><span class="line"></span><br><span class="line">- 优化CSS可用性：用一些小技巧</span><br><span class="line"></span><br><span class="line">- 解释代码：用注释和详细的文档来</span><br></pre></td></tr></table></figure><p>(3). 技术栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML5 结构 + CSS3  布局 (因为我们就会这些。。。嘻嘻)</span><br></pre></td></tr></table></figure><p>(4). 低版本浏览器 单独制作一个跳转页面 (都是孩子，也舍不得打，舍不得扔)</p><p><a href="https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html">https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html</a></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/di.png" width="600" /></p><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p>要实现结构和样式相分离的设计思想。 根目录下有这4个文件（目录）。</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>用于存放CSS文件</td></tr><tr><td>images</td><td>用于存放图片</td></tr><tr><td>index</td><td>京东首页 HTML</td></tr><tr><td>js</td><td>用于后期存放javascript文件</td></tr></tbody></table></div><h2 id="运用知识点"><a href="#运用知识点" class="headerlink" title="运用知识点"></a>运用知识点</h2><h3 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ico.png"  style="border: 1px dashed #ccc; padding:3px;" />  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：  &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot;  type=&quot;image/x-icon&quot;/&gt;     </span><br></pre></td></tr></table></figure><p>注意： </p><ol><li><p>她(它)不是iconfont字体哦。</p></li><li><p>位置是放到 head 标签中间。</p></li><li><p>后面的type=”image/x-icon”  属性可以省略。（我相信你也愿意省略。）</p></li><li><p>为了兼容性，请将favicon.ico 这个图标放到根目录下。（我们就不要任性了，听话放位置，省很多麻烦。。你好，我也好）</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/icotu.png" /></p></li></ol><h3 id="转换ico图标"><a href="#转换ico图标" class="headerlink" title="转换ico图标"></a>转换ico图标</h3><p>我们可以自己做的图片，转换为 ico图标，以便放到我们站点里面。 <a href="http://www.bitbug.net/">http://www.bitbug.net/</a></p><h3 id="网站优化三大标签"><a href="#网站优化三大标签" class="headerlink" title="网站优化三大标签"></a>网站优化三大标签</h3><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等)和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。 简单的说就是，把产品做好，搜索引擎就会介绍客户来。  </p><p> 我们现在阶段主要进行站内优化。网站优化，我们应该要懂。。。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/san.png" /></p><h4 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h4><p>title具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/title.png" width="500" /></p><p>建议：</p><p>首页标题：网站名（产品名）- 网站的介绍    </p><p>例如：</p><p>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p><p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p><h4 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description  网站说明"></a>Description  网站说明</h4><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。<br>我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。</p><p>京东网：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot; /&gt;</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。</li><li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。</li><li>补充在 title  和 keywords  中未能充分表述的说明.</li><li>用英文逗号 关键词1,关键词2</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="Keywords-关键字"><a href="#Keywords-关键字" class="headerlink" title="Keywords 关键字"></a>Keywords 关键字</h4><p>Keywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。</p><p>京东网：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;Keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东&quot; /&gt;</span><br></pre></td></tr></table></figure><p>小米网：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;小米,小米6,红米Note4,小米MIX,小米商城&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="顶部（快捷菜单）所用知识点"><a href="#顶部（快捷菜单）所用知识点" class="headerlink" title="顶部（快捷菜单）所用知识点"></a>顶部（快捷菜单）所用知识点</h2><div class="table-container"><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>通栏的盒子</td><td>不用给宽度  默认为 100% &nbsp;但是加了浮动和定位的盒子需要 添加 100%</td></tr><tr><td>盒子居中对齐</td><td>margin: auto;  注意必须有宽度的块级元素，文字水平居中对齐是 text-align:center;</td></tr><tr><td>行高会继承</td><td>文字性质的，比如 颜色、文字大小、字体、行高等会继承父级元素</td></tr><tr><td>浮动元素、固定定位，绝对定位会模式转换</td><td>具有行内块特性，比如一行放多个，有高度和宽度，如果没有指定宽度，则会根据内容多少撑开。</td></tr></tbody></table></div><h2 id="logo-和搜索-header-区域所用知识点"><a href="#logo-和搜索-header-区域所用知识点" class="headerlink" title="logo 和搜索 header 区域所用知识点"></a>logo 和搜索 header 区域所用知识点</h2><h3 id="网页布局稳定性"><a href="#网页布局稳定性" class="headerlink" title="网页布局稳定性"></a>网页布局稳定性</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/x.png" /></p><h3 id="宽度剩余法："><a href="#宽度剩余法：" class="headerlink" title="宽度剩余法："></a>宽度剩余法：</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/w.png" /></p><div class="table-container"><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>浮动元素特性</td><td>1. 浮动可以让多个元素同一行显示 2. 浮动的元素是顶部对齐</td></tr><tr><td>logo优化</td><td>text-indent: -20000px; 隐藏文字， 背景图片</td></tr><tr><td>清除浮动</td><td>清除浮动的目的就是为了解决父亲高度为0的问题</td></tr><tr><td>鼠标样式</td><td>cursor: pointer;           小手      cursor: move;            四角箭头     cursor: text;  插入光标     cursor: default;  小白</td></tr><tr><td>不允许换行</td><td>white-space: nowrap;</td></tr></tbody></table></div><h2 id="nav导航栏所用知识点"><a href="#nav导航栏所用知识点" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table></div><h2 id="页面底部所用知识点"><a href="#页面底部所用知识点" class="headerlink" title="页面底部所用知识点"></a>页面底部所用知识点</h2><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>绝对定位的盒子居中对齐</td><td>盒子 left 50%  然后通过 margin 负值自己的宽度一半（固定定位也是如此）</td></tr></tbody></table></div><h3 id="固定定位的盒子靠近版心右侧对齐"><a href="#固定定位的盒子靠近版心右侧对齐" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/guding.png" width="500" /></p><p>学习目标:</p><ul><li><p>掌握京东中间部分制作</p></li><li><p>理解BFC使用</p></li><li><p>了解优雅降级和渐进增强</p></li><li><p>了解CSS压缩和验证工具</p><p>typora-copy-images-to: /img/media</p></li></ul><hr><h1 id="京东项目-二"><a href="#京东项目-二" class="headerlink" title="京东项目(二)"></a>京东项目(二)</h1><h2 id="nav导航栏所用知识点-1"><a href="#nav导航栏所用知识点-1" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table></div><h3 id="固定定位的盒子靠近版心右侧对齐-1"><a href="#固定定位的盒子靠近版心右侧对齐-1" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/guding.png" width="500" /></p><h2 id="焦点图部分所用知识点"><a href="#焦点图部分所用知识点" class="headerlink" title="焦点图部分所用知识点"></a>焦点图部分所用知识点</h2><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>圆角矩形</td><td>border-radius: 左上角 右上角 右下角  左下角。</td></tr></tbody></table></div><p>负值自己的宽度一半（固定定位也是如此）</p><h2 id="背景半透明"><a href="#背景半透明" class="headerlink" title="背景半透明"></a>背景半透明</h2><p>1.强烈推荐：  background: rgba(r,g,b,alpha);</p><p>​     r,g,b 是红绿蓝的颜色，  alpha 是透明度的意思，取值范围是 0~1 之间。</p><p>2.了解ie低版本浏览器 半透明</p><p>filter:Alpha(opacity=50) ；   // opacity值为0 到 100</p><p>但是 此属性是盒子半透明，不是背景半透明哦，因为里面的内容也一起半透明了</p><p>因此，低版本的 ie6.7浏览器，我们不需要透明了，直接采用优雅降级的做法。</p><p>background: gary;</p><p>background: rgba(0,0,0,.2);</p><p>写上两句 背景， 低版本ie只执行gray， 其他浏览器执行 半透明下面这一句。</p><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h2><p>BFC(Block formatting context)</p><p>直译为”块级格式化上下文”。</p><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><p>我们前面讲过 元素的显示模式 display。 </p><p>分为 块级元素   行内元素  行内块元素 ，其实，它还有很多其他显示模式。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/dis.png"  style="border: 1px dashed #ccc; padding: 5px;" /></p><h3 id="那些元素会具有BFC的条件"><a href="#那些元素会具有BFC的条件" class="headerlink" title="那些元素会具有BFC的条件"></a>那些元素会具有BFC的条件</h3><p>不是所有的元素模式都能产生BFC，w3c 规范： </p><p>display 属性为 block, list-item, table 的元素，会产生BFC.</p><p>大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。</p><p>注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。</p><p>这个BFC 有着具体的布局特性： </p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/box.gif" /></p><p>有宽度和高度 ， 有 外边距margin  有内边距padding 有边框 border。</p><p>就好比，你有了练习武术的体格了。 有潜力，有资质。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/gu.jpeg" width="400" /></p><h3 id="什么情况下可以让元素产生BFC"><a href="#什么情况下可以让元素产生BFC" class="headerlink" title="什么情况下可以让元素产生BFC"></a>什么情况下可以让元素产生BFC</h3><p>以上盒子具有BFC条件了，就是说有资质了，但是怎样触发才会产生BFC，从而创造这个封闭的环境呢？ </p><p>在好比，你光有资质还不行，你需要一定额外效果才能出发的武学潜力，要么你掉到悬崖下面，捡到了一本九阴真经，要么你学习葵花宝典，欲练此功必先….</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/kuihua.png" /><br>同样，要给这些元素添加如下属性就可以触发BFC。</p><p>-float属性不为none</p><p>-position为absolute或fixed</p><p>-display为inline-block, table-cell, table-caption, flex, inline-flex</p><p>-overflow不为visible。</p><h3 id="BFC元素所具有的特性"><a href="#BFC元素所具有的特性" class="headerlink" title="BFC元素所具有的特性"></a>BFC元素所具有的特性</h3><p>BFC布局规则特性：</p><p>1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.</p><p>2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p><p>3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p><ol><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</li></ol><p>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>白话文： 孩子在家里愿意怎么折腾都行，但是出了家门口，你就的乖乖的，不能影响外面的任何人。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/xiong.jpeg" width="400" /></p><h3 id="BFC的主要用途"><a href="#BFC的主要用途" class="headerlink" title="BFC的主要用途"></a>BFC的主要用途</h3><p>BFC能用来做什么？</p><p>(1) 清除元素内部浮动</p><p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p><p>主要用到 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/fu.jpg" /><br>(2) 解决外边距合并问题</p><p>外边距合并的问题。</p><p>主要用到 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</span><br></pre></td></tr></table></figure><p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/ma.png" /></p><p>(3) 制作右侧自适应的盒子问题</p><p>主要用到 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/you.png" /></p><h3 id="BFC-总结"><a href="#BFC-总结" class="headerlink" title="BFC 总结"></a>BFC 总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。</p><h2 id="优雅降级和渐进增强"><a href="#优雅降级和渐进增强" class="headerlink" title="优雅降级和渐进增强"></a>优雅降级和渐进增强</h2><p>什么是渐进增强（progressive enhancement）、优雅降级（graceful degradation）呢？</p><p>渐进增强 progressive enhancement：</p><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p> 类似 爬山，由低出往高处爬</p><p>  <img src= "/img/loading.gif" data-lazy-src="/img/media/pa.png" width="400" /></p><p>  <b>优雅降级 graceful degradation：</b></p><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p>类似蹦极，由高处往低处下落</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/xia.jpg" /></p><p>　　区别：渐进增强是向上兼容，优雅降级是向下兼容。</p><p>个人建议： 现在互联网发展很快， 连微软公司都抛弃了ie浏览器，转而支持 edge这样的高版本浏览器，我们很多情况下没有必要再时刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况，修补低版本浏览器问题。</p><h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><div class="table-container"><table><thead><tr><th>浏览器前缀</th><th>浏览器</th></tr></thead><tbody><tr><td>-webkit-</td><td>Google Chrome, Safari, Android Browser</td></tr><tr><td>-moz-</td><td>Firefox</td></tr><tr><td>-o-</td><td>Opera</td></tr><tr><td>-ms-</td><td>Internet Explorer, Edge</td></tr><tr><td>-khtml-</td><td>Konqueror</td></tr></tbody></table></div><p>后面我们会有 常用的解决H5和C3 的兼容解决文件， 我们这里暂且不涉及。</p><h2 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h2><p>在线性渐变过程中，颜色沿着一条直线过渡：从左侧到右侧、从右侧到左侧、从顶部到底部、从底部到顶部或着沿任何任意轴。如果你曾使用过制作图件，比如说Photoshop，你对线性渐变并不会陌生。</p><p>兼容性问题很严重，我们这里之讲解线性渐变</p><p>语法格式： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">-webkit-linear-gradient</span>(渐变的起始位置， 起始颜色， 结束颜色)；</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">-webkit-linear-gradient</span>(渐变的起始位置， 颜色 位置， 颜色位置....)；</span><br></pre></td></tr></table></figure><h2 id="CSS-W3C-统一验证工具"><a href="#CSS-W3C-统一验证工具" class="headerlink" title="CSS W3C 统一验证工具"></a>CSS W3C 统一验证工具</h2><p>CssStats 是一个在线的 CSS 代码分析工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网址是：  http://www.cssstats.com/</span><br></pre></td></tr></table></figure><p>如果你想要更全面的，这个神奇，你值得拥有：</p><p>W3C 统一验证工具：    <a href="http://validator.w3.org/unicorn/">http://validator.w3.org/unicorn/</a>  ☆☆☆☆☆</p><p>因为它可以检测本地文件哦！！</p><h1 id="HTML5新标签与特性"><a href="#HTML5新标签与特性" class="headerlink" title="HTML5新标签与特性"></a>HTML5新标签与特性</h1><p><img src= "/img/loading.gif" data-lazy-src="/img/media/html.jpg" /></p><h2 id="文档类型设定"><a href="#文档类型设定" class="headerlink" title="文档类型设定"></a>文档类型设定</h2><ul><li>document<ul><li>HTML:        sublime 输入  html:4s</li><li>XHTML:      sublime 输入  html:xt</li><li>HTML5        sublime 输入  html:5       &lt;!DOCTYPE html&gt;</li></ul></li></ul><h2 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h2><ul><li><p><meta http-equiv="charset" content="utf-8">：HTML与XHTML中建议这样去写</p></li><li><p><meta charset="utf-8">：HTML5的标签中建议这样去写</p></li></ul><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><p> w3c  手册中文官网     :   <a href="http://w3school.com.cn/">http://w3school.com.cn/</a></p><ul><li><p>header：定义文档的页眉 头部</p></li><li><p>nav：定义导航链接的部分</p></li><li><p>footer：定义文档或节的页脚 底部</p></li><li><p>article：定义文章。</p></li><li><p>section：定义文档中的节（section、区段）</p></li><li><p>aside：定义其所处内容之外的内容 侧边</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span> 语义 :定义页面的头部  页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>  语义 :定义导航栏 <span class="tag">&lt;/<span class="name">nav</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> 语义: 定义 页面底部 页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> 语义:  定义文章<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> 语义： 定义区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 语义： 定义其所处内容之外的内容 侧边<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>datalist   标签定义选项列表。请与 input 元素配合使用该元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入明星&quot;</span> <span class="attr">list</span>=<span class="string">&quot;star&quot;</span>/&gt;</span> <span class="comment">&lt;!--  input里面用 list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;star&quot;</span>&gt;</span>   <span class="comment">&lt;!-- datalist 里面用 id  来实现和 input 链接 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>刘若英<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>郭郭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>fieldset 元素可将表单内的相关元素分组，打包      legend 搭配使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  标题</span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="新增的input-type属性值："><a href="#新增的input-type属性值：" class="headerlink" title="新增的input type属性值："></a>新增的input type属性值：</h2><div class="table-container"><table><thead><tr><th><strong>类型<em>**</em></strong></th><th><strong>使用示例<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>email<em>**</em></strong></td><td><input type="email"></td><td>输入邮箱格式</td></tr><tr><td><strong>tel<em>**</em></strong></td><td><input type="tel"></td><td>输入手机号码格式</td></tr><tr><td><strong>url<em>**</em></strong></td><td><input type="url"></td><td>输入url格式</td></tr><tr><td><strong>number<em>**</em></strong></td><td><input type="number"></td><td>输入数字格式</td></tr><tr><td><strong>search<em>**</em></strong></td><td><input type="search"></td><td>搜索框（体现语义化）</td></tr><tr><td><strong>range<em>**</em></strong></td><td><input type="range"></td><td>自由拖动滑块</td></tr><tr><td><strong>time<em>**</em></strong></td><td><input type="time"></td><td>小时分钟</td></tr><tr><td><strong>date<em>**</em></strong></td><td><input type="date"></td><td>年月日</td></tr><tr><td><strong>datetime<em>**</em></strong></td><td><input type="datetime"></td><td>时间</td></tr><tr><td><strong>month<em>**</em></strong></td><td><input type="month"></td><td>月年</td></tr><tr><td><strong>week<em>**</em></strong></td><td><input type="week"></td><td>星期 年</td></tr></tbody></table></div><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><div class="table-container"><table><thead><tr><th><strong>属性<em>**</em></strong></th><th><strong>用法<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>placeholder<em>**</em></strong></td><td><input type="text" placeholder="请输入用户名"></td><td>占位符  当用户输入的时候 里面的文字消失  删除所有文字，自动返回</td></tr><tr><td><strong>autofocus<em>**</em></strong></td><td><input type="text" autofocus></td><td>规定当页面加载时 input 元素应该自动获得焦点</td></tr><tr><td><strong>multiple<em>**</em></strong></td><td><input type="file" multiple></td><td>多文件上传</td></tr><tr><td><strong>autocomplete<em>**</em></strong></td><td><input type="text" autocomplete="off"></td><td>规定表单是否应该启用自动完成功能  有2个值，一个是on 一个是off      on 代表记录已经输入的值  1.autocomplete 首先需要提交按钮 <br/>2.这个表单您必须给他名字</td></tr><tr><td><strong>required<em>**</em></strong></td><td><input type="text" required></td><td>必填项  内容不能为空</td></tr><tr><td><strong>accesskey<em>**</em></strong></td><td><input type="text" accesskey="s"></td><td>规定激活（使元素获得焦点）元素的快捷键   采用 alt + s的形式</td></tr></tbody></table></div><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userPhone&quot;</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPhone&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPhone&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^1\d&#123;10&#125;$&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;collage&quot;</span>&gt;</span>所属学院:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;collage&quot;</span> <span class="attr">id</span>=<span class="string">&quot;collage&quot;</span> <span class="attr">list</span>=<span class="string">&quot;cList&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;cList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;前端与移动开发学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c++学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;score&quot;</span>&gt;</span>入学成绩:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案思密达<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学生名字&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>所属学院:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择学院&quot;</span> <span class="attr">list</span>=<span class="string">&quot;xueyuan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;xueyuan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>java学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>前端学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>php学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>设计学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期:   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>成绩:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业时间:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inTime&quot;</span>&gt;</span>入学日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inTime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inTime&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;leaveTime&quot;</span>&gt;</span>毕业日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;leaveTime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;leaveTime&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul><li>embed：标签定义嵌入的内容</li><li>audio：播放音频</li><li>video：播放视频</li></ul><h3 id="多媒体-embed（会使用）"><a href="#多媒体-embed（会使用）" class="headerlink" title="多媒体 embed（会使用）"></a>多媒体 embed（会使用）</h3><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p><p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf&quot;</span> <span class="attr">allowFullScreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">allowScriptAccess</span>=<span class="string">&quot;always&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="/img/media/embed.png" /></p><p> 优酷，土豆，爱奇艺，腾讯、乐视等等</p><ol><li>先上传   </li><li>在分享</li></ol><h3 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</p><p>使用相当简单，如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468026526.png" alt="1498468026526"> </p><p>并且可以通过附加属性可以更友好控制音频的播放，如：</p><p>autoplay 自动播放</p><p>controls 是否显不默认播放控件</p><p>loop 循环播放    如果这个属性不写 默认播放一次        loop  或者  loop = “loop”    表示无限循环</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468041058.png" alt="1498468041058"> </p><p>多浏览器支持的方案，如下图</p><p><source> 标签允许您规定可替换的视频/音频文件供浏览器根据它对媒体类型或者编解码器的支持进行选择</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468052965.png" alt="1498468052965"> </p><h3 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</p><p>同音频播放一样，<video>使用也相当简单，如下图</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468072194.png" alt="1498468072194"> </p><p>同样，通过附加属性可以更友好的控制视频的播放</p><p>autoplay 自动播放</p><p>controls 是否显示默认播放控件</p><p>loop 循环播放</p><p>width 设置播放窗口宽度</p><p>height 设置播放窗口的高度</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468086199.png" alt="1498468086199"> </p><p><strong>多浏览器支持的方案，如下图<em>**</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498468097509.png" alt="1498468097509"></p><h1 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h1><h1 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h1><h3 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h3><ul><li>:first-child :选取属于其父元素的首个子元素的指定选择器</li><li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li><li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li><li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li><li></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123; <span class="comment">/*  选择第一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: pink; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;   <span class="comment">/* 最后一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: purple;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;   <span class="comment">/* 选择第4个孩子  n  代表 第几个的意思 */</span> </span><br><span class="line"><span class="attribute">color</span>: skyblue;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取到 拥有 该属性的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=font]</span> &#123; <span class="comment">/*  class^=font 表示 font 开始位置就行了 */</span></span><br><span class="line"><span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=footer]</span> &#123; <span class="comment">/*  class$=footer 表示 footer 结束位置就行了 */</span></span><br><span class="line"><span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=tao]</span> &#123; <span class="comment">/* class*=tao  *=  表示tao 在任意位置都可以 */</span></span><br><span class="line"><span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font12&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font12&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;24font&quot;</span>&gt;</span>属性选择器123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-footer&quot;</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jd-footer&quot;</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-tao-nav&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-tao-header&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tao-header&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h2><ol><li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li><li>E::first-line 文本第一行；</li><li>E::selection 可改变选中文本的样式；</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首行特殊样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="comment">/* font-size: 50px; */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、E::before和E::after</p><p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>::befor &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;开始&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;结束&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p><p>“:” 与 “::” 区别在于区分伪类和伪元素</p><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查</p><p><strong>注意</strong></p><p>伪元素:before和:after添加的内容默认是inline元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before和:after时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p><h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/gyt.jpg&#x27;</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/* background-size: contain; */</span></span><br><span class="line"><span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure><h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li>一个元素可以设置多重背景图像。 </li><li>每组属性间使用逗号分隔。 </li><li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li><li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">50px</span> <span class="number">60px</span>  ,</span><br><span class="line">   <span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">70px</span> <span class="number">90px</span> ,</span><br><span class="line">   <span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">110px</span> <span class="number">130px</span> c <span class="number">#aaa</span>;</span><br></pre></td></tr></table></figure><ul><li><h2 id="凹凸文字"><a href="#凹凸文字" class="headerlink" title="凹凸文字"></a>凹凸文字</h2></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">700</span> <span class="number">80px</span> <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line"><span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;我是凸起的文字&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;我是凹下的文字&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498467533412.png" alt="1498467533412"></p><h2 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h2><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p><p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p><p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: pink; </span><br><span class="line"><span class="attribute">box-sizing</span>: content-box;  <span class="comment">/*  就是以前的标准盒模型  w3c */</span></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line"><span class="comment">/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: purple;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;   <span class="comment">/* padding border  不撑开盒子 */</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line"><span class="comment">/* margin: 10px; */</span></span><br><span class="line"><span class="comment">/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498445034712.png" alt="1498445034712"></p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/zhen.gif" /></p><p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><p>语法格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br><span class="line">如果有多组属性变化，还是用逗号隔开。</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td><td>3</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td><td>3</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td><td>3</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td><td>3</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td><td>3</td></tr></tbody></table></div><p>如果想要所有的属性都变化过渡， 写一个all 就可以</p><p>transition-duration  花费时间  单位是  秒     s    比如 0.5s    这个s单位必须写      ms 毫秒</p><p>运动曲线   默认是 ease</p><p> 何时开始  默认是 0s  立马开始</p><p>运动曲线示意图：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498445454760.png" alt="1498445454760"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line"><span class="comment">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span></span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">0.6s</span> ease <span class="number">0s</span>, height <span class="number">0.3s</span> ease-in <span class="number">1s</span>;</span><br><span class="line"><span class="comment">/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过盒子，我们的宽度变为400 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.6s</span>;  <span class="comment">/* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span></span><br></pre></td></tr></table></figure><h2 id="2D变形-CSS3-transform"><a href="#2D变形-CSS3-transform" class="headerlink" title="2D变形(CSS3) transform"></a>2D变形(CSS3) transform</h2><p>transform是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p><p>变形转换 transform    transform  变换 变形的意思             《 transformers 变形金刚》</p><h3 id="移动-translate-x-y"><a href="#移动-translate-x-y" class="headerlink" title="移动 translate(x, y)"></a>移动 translate(x, y)</h3><p>translate 移动平移的意思</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498443715586.png" alt="1498443715586"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translate(<span class="number">50px</span>,<span class="number">50px</span>);</span><br></pre></td></tr></table></figure><p>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p><p>可以改变元素的位置，x、y可为负值；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</span><br><span class="line">translateX(x)仅水平方向移动（X轴移动）</span><br><span class="line">translateY(Y)仅垂直方向移动（Y轴移动）</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">499.9999px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);  <span class="comment">/* 走的自己的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 让定位的盒子水平居中</p><h3 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 scale(x, y)"></a>缩放 scale(x, y)</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498444645795.png" alt="1498444645795"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</span><br><span class="line">scaleX(x)元素仅水平方向缩放（X轴缩放）</span><br><span class="line">scaleY(y)元素仅垂直方向缩放（Y轴缩放）</span><br></pre></td></tr></table></figure><p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大</p><h3 id="旋转-rotate-deg"><a href="#旋转-rotate-deg" class="headerlink" title="旋转 rotate(deg)"></a>旋转 rotate(deg)</h3><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498443651293.png" alt="1498443651293"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br></pre></td></tr></table></figure><p> 注意单位是 deg 度数      </p><h3 id="transform-origin可以调整元素转换变形的原点"><a href="#transform-origin可以调整元素转换变形的原点" class="headerlink" title="transform-origin可以调整元素转换变形的原点"></a>transform-origin可以调整元素转换变形的原点</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498443912530.png" alt="1498443912530"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: left top;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); &#125;  <span class="comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span>    </span><br></pre></td></tr></table></figure><p> 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: <span class="number">10px</span> <span class="number">10px</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); &#125;  <span class="comment">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span> </span><br></pre></td></tr></table></figure><p>案例旋转楚乔传</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">200px</span> auto;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line"><span class="attribute">transform-origin</span>: top right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;  <span class="comment">/* 鼠标经过div  第一张图片旋转 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;  </span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;  </span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;  </span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;  </span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;  </span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倾斜-skew-deg-deg"><a href="#倾斜-skew-deg-deg" class="headerlink" title="倾斜 skew(deg, deg)"></a>倾斜 skew(deg, deg)</h3><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498443827389.png" alt="1498443827389"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">0deg</span>);</span><br></pre></td></tr></table></figure><p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p><p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p><h2 id="3D变形-CSS3-transform"><a href="#3D变形-CSS3-transform" class="headerlink" title="3D变形(CSS3) transform"></a>3D变形(CSS3) transform</h2><p>2d    x  y  </p><p>3d  x  y  z</p><p> 左手坐标系</p><p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498445587576.png" alt="1498445587576"></p><p>CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498459001951.png" alt="1498459001951"></p><p>简单记住他们的坐标：</p><p> x左边是负的，右边是正的</p><p>y 上面是负的， 下面是正的</p><p>z 里面是负的， 外面是正的</p><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 就是沿着 x 立体旋转.</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498445756802.png" alt="1498445756802"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>:hove &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498446043198.png" alt="1498446043198"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>:hove &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all .<span class="number">25s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform:rotateX(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateY(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateZ(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p><ul><li>透视原理： 近大远小 。</li><li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li><li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li></ul><p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p><p>perspective 一般作为一个属性，设置给父元素，作用于所有3D转换的子元素</p><p>理解透视距离原理：</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498446715314.png" alt="1498446715314"></p><h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498459697576.png" alt="1498459697576"></p><p>主要目的实现移动效果</p><h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498459770252.png" alt="1498459770252"></p><h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p><h3 id="translate3d-x-y-z"><a href="#translate3d-x-y-z" class="headerlink" title="translate3d(x,y,z)"></a>translate3d(x,y,z)</h3><p>[注意]其中，x和y可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值</p><h3 id="开门案例"><a href="#开门案例" class="headerlink" title="开门案例"></a>开门案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/dog.gif&#x27;</span>) no-repeat cover;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">130deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">130deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p><h3 id="翻转盒子案例"><a href="#翻转盒子案例" class="headerlink" title="翻转盒子案例"></a>翻转盒子案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">224px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">224px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">1s</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">img</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">backface-visibility</span>: hidden; <span class="comment">/* 不是正面对象屏幕，就隐藏 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画-CSS3-animation"><a href="#动画-CSS3-animation" class="headerlink" title="动画(CSS3) animation"></a>动画(CSS3) animation</h2><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498461096243.png" alt="1498461096243"></p><p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123; 开始位置 &#125;  <span class="number">0%</span></span><br><span class="line">  <span class="selector-tag">to</span>&#123;  结束  &#125;  <span class="number">100%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-count:infinite;  无限循环播放</span><br><span class="line">animation-play-state:paused;   暂停动画&quot;</span><br></pre></td></tr></table></figure><h3 id="小汽车案例"><a href="#小汽车案例" class="headerlink" title="小汽车案例"></a>小汽车案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: goback;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> goback &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;&#125;</span><br><span class="line">  <span class="number">49%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1000px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">55%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1000px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">95%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h2><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p><p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p><p>方向：默认主轴从左向右，侧轴默认从上到下</p><p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498441839910.png" alt="1498441839910"></p><p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p><p><strong>2、各属性详解<em>**</em></strong></p><p>1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p><p>min-width  最小值      min-width: 280px  最小宽度  不能小于 280</p><p>max-width: 1280px  最大宽度  不能大于 1280</p><p>2.flex-direction调整主轴方向（默认为水平方向）</p><p>flex-direction: column 垂直排列</p><p>flex-direction: row  水平排列</p><p><a href="http://m.ctrip.com/html5/">http://m.ctrip.com/html5/</a>   携程网手机端地址</p><p>3、justify-content调整主轴对齐（水平对齐）</p><p>子盒子如何在父盒子里面水平对齐</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值。项目位于容器的开头。</td><td>让子元素从父容器的开头开始排序但是盒子顺序不变</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>让子元素从父容器的后面开始排序但是盒子顺序不变</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>让子元素在父容器中间显示</td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td>左右的盒子贴近父盒子，中间的平均分布空白间距</td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td><td>相当于给每个盒子添加了左右margin外边距</td></tr></tbody></table></div><p>4、align-items调整侧轴对齐（垂直对齐）</p><p>子盒子如何在父盒子里面垂直对齐（单行）</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>垂直居中</td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td>垂直对齐开始位置 上对齐</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>垂直对齐结束位置 底对齐</td></tr><tr><td></td><td></td></tr></tbody></table></div><p>5、flex-wrap控制是否换行</p><p>当我们子盒子内容宽度多于父盒子的时候如何处理</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示</td></tr><tr><td>wrap</td><td>规定灵活的项目在必要的时候拆行或拆列。</td></tr><tr><td>wrap-reverse</td><td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><p>6、flex-flow是flex-direction、flex-wrap的简写形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: flex-direction  flex-wrap;  </span><br></pre></td></tr></table></figure><p>白话记：    flex-flow: 排列方向   换不换行; </p><p>两个中间用空格</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* flex-direction: row;</span></span><br><span class="line"><span class="comment">flex-wrap: wrap;   这两句话等价于下面的这句话*/</span></span><br><span class="line"><span class="attribute">flex-flow</span>: column wrap;  <span class="comment">/* 两者的综合 */</span></span><br></pre></td></tr></table></figure><p>7、align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐</p><p>align-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。</p><p>必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th><th>测试</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td></td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td></td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td></td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td></td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td></td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td></tr></tbody></table></div><p>8、order控制子项目的排列顺序，正序方式排序，从小到大</p><p>用css 来控制盒子的前后顺序。  用order 就可以</p><p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p><h2 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498467502625.png" alt="1498467502625"> </p><ol><li>前两项是必须写的。  后两项可以选写。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/img/media/1498467519665.png" alt="1498467519665">    </p><h1 id="-4"><a href="#-4" class="headerlink" title=" "></a> </h1>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About Me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="☠-基本信息"><a href="#☠-基本信息" class="headerlink" title="☠ 基本信息"></a>☠ 基本信息</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">ZhuoRu(张卓如)</span></span><br><span class="line"><span class="attr">Age:</span> <span class="number">27</span></span><br><span class="line"><span class="attr">Address:</span> <span class="string">Guangzhou</span></span><br><span class="line"><span class="attr">Github:</span> <span class="string">https://gitee.com/zhangzhuoru</span></span><br><span class="line"><span class="attr">Blog:</span> <span class="string">https://webzhuoru.github.io/</span></span><br><span class="line"><span class="attr">Hobbies:</span> <span class="string">photography,</span> <span class="string">animation,</span> <span class="string">Internet,</span> <span class="string">front-end</span> <span class="string">technology</span></span><br></pre></td></tr></table></figure><p>就个人而言，因为呆过的两家公司规模都不大，之前也有提到过，第二家公司甚至只有我一个前端，所以我一直没有经历过一个比较完整的项目开发流程，两家公司都没有成熟的UI设计师，所以有时候自己还得做一些除了前端以为的其它工作。在思考了一段时间后，我也看到了自己身上几个比较大的弊端：</p><ul><li>团队很小，前端开发并不规范</li><li>不熟悉中大厂他们的整个开发体系</li><li>缺少前端团队协作开发的相关经验</li><li>项目都是以<code>ToB</code>为主，移动端开发较少</li></ul><p>所以在知道了自己的不足之后，我也明确了自己的目标，决心跳槽，并且对下一份工作要求排了一个优先级：</p><ol><li>团队、平台(大团队，大平台)</li><li>地域(深圳、广州、杭州)</li><li>薪资待遇</li></ol><p>针对于第一点，前两份工作基本是一年一跳，所以对于第三份工作，我希望能呆着长久一些，并且也是想要进入大点的平台，不一定非得说是<code>500百强</code>这样的超级大公司，但起码是得有个千人以上的。</p><h1 id="🎓-技术栈"><a href="#🎓-技术栈" class="headerlink" title="🎓 技术栈"></a>🎓 技术栈</h1><p>精通使用H5+CSS3对页面进行布局(成功的页面仔)<br>熟悉使用原生JavaScript、ES6、TS<br>熟练使用Vue全家桶进行搭建项目<br>了解 微信小程序 和React 开发框架,能熟练且合理调用其Api，有相关项目经验<br>熟悉Webpack、Gulp、Grunt等等打包工具<br>熟练编写前端标准代码,熟悉浏览器兼容问题解决(IE10以下另当别论)<br>……</p><h1 id="📡-联系博主"><a href="#📡-联系博主" class="headerlink" title="📡 联系博主"></a>📡 联系博主</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">qq:</span> <span class="number">2276839311</span></span><br><span class="line"><span class="attr">vx:</span> <span class="string">zzr17765603009（加我请留下备注，无备注不会审核通过哈，望理解）</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">2276839311</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">motto:</span> <span class="string">好看的皮囊千篇一律,有趣的灵魂万中无一。</span></span><br></pre></td></tr></table></figure><h1 id="🎩-关于本站"><a href="#🎩-关于本站" class="headerlink" title="🎩 关于本站"></a>🎩 关于本站</h1><p>Hexo 框架 + Butterfly 主题</p><p>博客中的部分图片源于网络，侵删</p><p>本博客文章采用 CC BY-NC-SA 4.0 协议，转载请注明出处</p><p>欢迎小伙伴们交换友链，具体说明可在 友链页 查看。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类页</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>More realize</title>
      <link href="/other/index.html"/>
      <url>/other/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>I wish you to become your own sun , no need to rely on who’s light.<br>— 愿你成为自己的太阳，无需凭借谁的光芒。</p></blockquote><div class="tip "><p>默认情况</p></div><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='https://bu.dusays.com/2021/03/06/38a2c5cd8b44e.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">烟花秀</div>  <p>人间烟火</p>  <a href='/effect/fireworks'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/react.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">个人简历</div>  <p>React版</p>  <a href='/effect/resume'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/dack.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">模拟黑客版</div>  <p>生动有趣的个人简历版</p>  <a href='/effect/resumefuns'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/rmb.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">大数据看板</div>  <p>银行项目大数据生动展示</p>  <a href='/effect/RMB'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/haishi.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">海事博物馆</div>  <p>后台使用富文本管理的前端官网</p>  <a href='https://www.gzhsmuseum.com/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/yunguangzhan.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">云逛展</div>  <p>在线360度无死角观看博物展</p>  <a href='http://view.gzhsmuseum.com/main.html?p=6&d=100'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/hanzi.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">翰智智能</div>  <p>公司自研的翰智识图</p>  <a href='http://www.hanzhiai.com:7002/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='/img/gaolujie.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">高露洁</div>  <p>高露洁图片质量检测后台</p>  <a href='http://175.178.131.5:8050/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">日程安排</div>  <p>vue3制作的工作计划;日程安排;(电视或广播)节目表</p>  <a href='/effect/schedule'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>没蜘蛛侠</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>赞助墙</title>
      <link href="/sponsorWall/index.html"/>
      <url>/sponsorWall/index.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>网站建设与维护实属不易，如果我的文章帮助到了您，或者您想支持我的网站，可以扫描下方二维码进行赞助（赞助时请备注自己的 化名/昵称 ，打赏后将在此页面展示），非常感谢您的支持~ 🌹🌹🌹</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">微信</button></li><li class="tab"><button type="button" data-href="#test1-2">支付宝</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong><img src= "/img/loading.gif" data-lazy-src="./img/wechat.png" alt="微信"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong><img src= "/img/loading.gif" data-lazy-src="./img/alipay.jpg" alt="支付宝"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note purple icon modern"><i class="note-icon fas fa-battery-half"></i><p>特此鸣谢💓 ，感谢各位小伙伴们の支持~ 💋💋</p></div><table><thead><tr><th align="center">小伙伴昵称</th><th align="center">打赏方式</th><th align="center">打赏金额</th><th align="center">打赏日期</th><th align="center">留言</th></tr></thead><tbody><tr><td align="center">杨大杰</td><td align="center">支付宝</td><td align="center">￥6.66  👍</td><td align="center">2022-08-29</td><td align="center">要博客源码一份</td></tr><!-- <tr><td align="center">Liu HuanHuan</td><td align="center">微信</td><td align="center">￥50.00 👍</td><td align="center">2022-03-04</td><td align="center">咨询博客搭建问题</td></tr><tr><td align="center">御网尚书</td><td align="center">QQ红包</td><td align="center">￥18.80 👍</td><td align="center">2022-05-25</td><td align="center">请喝奶茶</td></tr><tr><td align="center">*炜</td><td align="center">微信</td><td align="center">￥1.00</td><td align="center">2022-05-31</td><td align="center">共同学习</td></tr><tr><td align="center">郭*宏</td><td align="center">微信</td><td align="center">￥9.99 👍</td><td align="center">2022-08-10</td><td align="center">我给你博客找bug</td></tr> --></tbody></table>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
